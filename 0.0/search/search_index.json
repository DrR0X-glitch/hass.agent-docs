{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NOTICE This is the old documentation Pre v2 This documentation is no longer up-to-date or current. Click here to go to the current documentation DEPRACATED: Welcome to HASS.Agent\u2019s documentation! HASS.Agent is a Windows-based client ( companion app ) for Home Assistant , developed in .NET 6. It provides notifications, quick actions, commands, sensors and more. Click here to download the latest installer. Please consult the various topics on the left for more information. Need additional help? Visit the dedicated HA forum thread or join on Discord . Visit the LAB02 Research Site for release info, development backstories, and misc. posts. C# or Python developer, or able to help out with tickets? Please read this: lab02-research.org/2023-04-01-help-wanted Starting from zero, and want to learn what HASS.Agent's about and how to start? Be sure to check the introduction article , and optionally the command basics . Have anything to add? Feel free to create pull requests for the documentation repo , or just send a mail: Thanks! HASS.Agent is completely free , and will always stay that way without restrictions. However, developing and maintaining this tool (and everything that surrounds it, like these docs) takes up a lot of time. Like most developers, I run on caffe\u00efne - so a cup of coffee is always very much appreciated! | | | |","title":"Home"},{"location":"#notice","text":"","title":"NOTICE"},{"location":"#this-is-the-old-documentation-pre-v2","text":"This documentation is no longer up-to-date or current.","title":"This is the old documentation Pre v2"},{"location":"#click-here-to-go-to-the-current-documentation","text":"","title":"Click here to go to the current documentation"},{"location":"#depracated-welcome-to-hassagents-documentation","text":"HASS.Agent is a Windows-based client ( companion app ) for Home Assistant , developed in .NET 6. It provides notifications, quick actions, commands, sensors and more. Click here to download the latest installer. Please consult the various topics on the left for more information. Need additional help? Visit the dedicated HA forum thread or join on Discord . Visit the LAB02 Research Site for release info, development backstories, and misc. posts.","title":"DEPRACATED: Welcome to HASS.Agent\u2019s documentation!"},{"location":"#c-or-python-developer-or-able-to-help-out-with-tickets-please-read-this-lab02-researchorg2023-04-01-help-wanted","text":"Starting from zero, and want to learn what HASS.Agent's about and how to start? Be sure to check the introduction article , and optionally the command basics . Have anything to add? Feel free to create pull requests for the documentation repo , or just send a mail: Thanks! HASS.Agent is completely free , and will always stay that way without restrictions. However, developing and maintaining this tool (and everything that surrounds it, like these docs) takes up a lot of time. Like most developers, I run on caffe\u00efne - so a cup of coffee is always very much appreciated! | | | |","title":"C# or Python developer, or able to help out with tickets? Please read this: lab02-research.org/2023-04-01-help-wanted"},{"location":"clean-slate/","text":"Clean Slate This manual shows you how to clean up HASS.Agent in both Home Assistant ( HA ) and locally. Use this whenever you want to start over, or something goes wrong with a sensor or command. Home Assistant HASS.Agent should keep everything tidy, but sometimes, old devices or entities get orphaned in HA. If you're like me, you want to clean them up. Other reasons can be that a sensor or command got messed up, tangled up because of duplicate device names, or you simply want to start over. When you delete your device in HA, it won't mess with your automations and scripts. Simply have HASS.Agent re-register (which is as easy as restarting it) and everything's up and running! Before you get started, make sure you completely close HASS.Agent by chosing exit in the exit dialog. Otherwise it'll keep re-registering. Afterwards, open HA, press c , type devices and press enter. This'll bring you to the devices list. Now type the name of the device you want to clean, and click it to open: Check that you have a HASS.Agent device open, by looking at the Device info - it should say LAB02 Research : Now click the hamburger menu (the three vertical dots) and click Delete device : You'll get a popup asking you to confirm, simply click OK . HA will show you a Device / service not found. page: This means all went well, and you can go back to the devices list by clicking GO BACK . At this point HA has been cleaned up. You can repeat the process for other HASS.Agent (orphaned) devices. When you're satisfied, you can start HASS.Agent. Your device will get registered again, and all your stored sensors and commands are added. Local If you want to remove HASS.Agent, simply do so through Windows' configuration screen (the exact place depends on your Windows version): This wil not delete your settings, sensors and commands. So if you want to downgrade, at this point you can install the version you want and be done (note that older versions might not support your config). If you want to completely clean up, or backup your settings, open explorer and navigate to: %APPDATA%\\LAB02 Research\\HASS.Agent To perform a backup: copy the config folder. To clean up: completely remove this HASS.Agent folder. For the Satellite Service, navigate to: %PROGRAMFILES(X86)%\\LAB02 Research\\HASS.Agent Satellite Service To perform a backup: copy the config folder. To clean up: completely remove this HASS.Agent Satellite Service folder.","title":"Clean Slate"},{"location":"clean-slate/#clean-slate","text":"This manual shows you how to clean up HASS.Agent in both Home Assistant ( HA ) and locally. Use this whenever you want to start over, or something goes wrong with a sensor or command.","title":"Clean Slate"},{"location":"clean-slate/#home-assistant","text":"HASS.Agent should keep everything tidy, but sometimes, old devices or entities get orphaned in HA. If you're like me, you want to clean them up. Other reasons can be that a sensor or command got messed up, tangled up because of duplicate device names, or you simply want to start over. When you delete your device in HA, it won't mess with your automations and scripts. Simply have HASS.Agent re-register (which is as easy as restarting it) and everything's up and running! Before you get started, make sure you completely close HASS.Agent by chosing exit in the exit dialog. Otherwise it'll keep re-registering. Afterwards, open HA, press c , type devices and press enter. This'll bring you to the devices list. Now type the name of the device you want to clean, and click it to open: Check that you have a HASS.Agent device open, by looking at the Device info - it should say LAB02 Research : Now click the hamburger menu (the three vertical dots) and click Delete device : You'll get a popup asking you to confirm, simply click OK . HA will show you a Device / service not found. page: This means all went well, and you can go back to the devices list by clicking GO BACK . At this point HA has been cleaned up. You can repeat the process for other HASS.Agent (orphaned) devices. When you're satisfied, you can start HASS.Agent. Your device will get registered again, and all your stored sensors and commands are added.","title":"Home Assistant"},{"location":"clean-slate/#local","text":"If you want to remove HASS.Agent, simply do so through Windows' configuration screen (the exact place depends on your Windows version): This wil not delete your settings, sensors and commands. So if you want to downgrade, at this point you can install the version you want and be done (note that older versions might not support your config). If you want to completely clean up, or backup your settings, open explorer and navigate to: %APPDATA%\\LAB02 Research\\HASS.Agent To perform a backup: copy the config folder. To clean up: completely remove this HASS.Agent folder. For the Satellite Service, navigate to: %PROGRAMFILES(X86)%\\LAB02 Research\\HASS.Agent Satellite Service To perform a backup: copy the config folder. To clean up: completely remove this HASS.Agent Satellite Service folder.","title":"Local"},{"location":"configuration/","text":"Configuration When you first launch HASS.Agent, you'll be taken to the onboarding process. This will guide you through configuring step-by-step, and HASS.Agent will offer to perform some tasks for you. If you don't want this, or if you want to change something later on, you can use the configuration screen: Configuring HASS.Agent is split into different pages: 1. General Miscellaneous HASS.Agent related settings. The device name is how your PC advertises itself in Home Assistant. When you change it, all your sensors and command will be removed from Home Assistant, and then reregistered under the new name. Don't worry though, all your automations and scripts will keep working as their IDs don't change. 2. External Tools Some commands have the ability to invoke external tools; other applications installed on your PC. You can define them here. When you don't configure a browser, HASS.Agent will use your default one. If you want, you can specify your own here. As an added bonus, you can set it to launch incognito (HASS.Agent will recognize most browsers for you, and set the required arguments). The custom executor can be used if you run a lot of Python scripts for instance. That way, you don't have to link the Python binary for every command you configure. Neat! 3. Home Assistant API config To use quick actions, you have to configure your instance's API. Usually the default URI should work, unless you've changed the port or mdns name. You can get a long-lived API token following this doc . 4. HotKey This is optional, and can be used to pull up the Quick Actions window at any time. 5. Local API The local API is an alternative for receiving notifications and using the mediaplayer functionality, if you don't use MQTT. It requires a port reservation and a firewall rule, so if you enable it, make sure to click the Execute Port Reservation button afterwards. 6. Local Storage Manage how local storage is handled. By default HASS.Agent will clear cache older than 7 days. 7. Logging If you encounter problems while using HASS.Agent, please activate the enable extended logging switch. HASS.Agent will restart when you store the configuration, and afterwards try to recreate your problem. Then open this tab again and click open logs folder . Please attach the latest log when submitting a ticket, or you can mail it to lab02research@outlook.com if you want it handled confidentially (or just because it's easy). Remember to turn extended logging off afterwards, as it'll clog your disk! 8. Media Player Make sure the integration has been installed and configured in Home Assistant. Requires a patched Windows 10 or Windows 11 to function, ymmv . If it appears broken, checks the logs for more info. 9. MQTT Enter your MQTT broker configuration. This is required if you want to use commands (triggered from Home Assistant) or sensors (sent from your PC). The new integration also uses MQTT by default, but can use the local API as a fallback. If you need help setting up MQTT, you can use this tutorial: Home Assistant MQTT Install and Setup - A Beginner's Guide . If you want to monitor what's being send through MQTT, you can use MQTT Explorer . 10. Notifications Make sure the integration has been installed and configured in Home Assistant. Sometimes Windows won't allow you to enable notifications for HASS.Agent. This can happen if HASS.Agent hasn't shown a notification yet. To make sure it technically works, click the show test notification button in this tab. You'll be presented with a locally generated notification (or not, of course). 11. Satellite Service This tab provides you with options to manage the technical aspect of the satellite service, like stop/start/disable/reinstall. Usually you won't have to use this. If the satellite service doesn't work as expected, please use the open service logs folder to locate its logs, and attach the latest one when sending a bug report. 12. Startup Gives the option to enable/disable running HASS.Agent when you login. 13. Tray Icon Allows configuring the (right)mouse click events of HASS.Agent's tray icon. 14. Updates If you want, HASS.Agent can check for updates in the background. This works by checking the latest release on GitHub. When a new release is found, you'll be notified and given the option to install the update. You can opt-in on beta updates here. They are generally quite stable, and are mostly used to release new features faster than the regular updates. The regular channel is used roughly once a month, the prevent update fatigue. To make updating easier, you can enable offer to download and launch the installer for me . When enabled, you still have the last say in whether an update will be installed, but you won't have to do anything else. The update is downloaded from github.com, and its cryptographic signature is checked before being executed.","title":"Configuration"},{"location":"configuration/#configuration","text":"When you first launch HASS.Agent, you'll be taken to the onboarding process. This will guide you through configuring step-by-step, and HASS.Agent will offer to perform some tasks for you. If you don't want this, or if you want to change something later on, you can use the configuration screen: Configuring HASS.Agent is split into different pages:","title":"Configuration"},{"location":"configuration/#1-general","text":"Miscellaneous HASS.Agent related settings. The device name is how your PC advertises itself in Home Assistant. When you change it, all your sensors and command will be removed from Home Assistant, and then reregistered under the new name. Don't worry though, all your automations and scripts will keep working as their IDs don't change.","title":"1. General"},{"location":"configuration/#2-external-tools","text":"Some commands have the ability to invoke external tools; other applications installed on your PC. You can define them here. When you don't configure a browser, HASS.Agent will use your default one. If you want, you can specify your own here. As an added bonus, you can set it to launch incognito (HASS.Agent will recognize most browsers for you, and set the required arguments). The custom executor can be used if you run a lot of Python scripts for instance. That way, you don't have to link the Python binary for every command you configure. Neat!","title":"2. External Tools"},{"location":"configuration/#3-home-assistant-api-config","text":"To use quick actions, you have to configure your instance's API. Usually the default URI should work, unless you've changed the port or mdns name. You can get a long-lived API token following this doc .","title":"3. Home Assistant API config"},{"location":"configuration/#4-hotkey","text":"This is optional, and can be used to pull up the Quick Actions window at any time.","title":"4. HotKey"},{"location":"configuration/#5-local-api","text":"The local API is an alternative for receiving notifications and using the mediaplayer functionality, if you don't use MQTT. It requires a port reservation and a firewall rule, so if you enable it, make sure to click the Execute Port Reservation button afterwards.","title":"5. Local API"},{"location":"configuration/#6-local-storage","text":"Manage how local storage is handled. By default HASS.Agent will clear cache older than 7 days.","title":"6. Local Storage"},{"location":"configuration/#7-logging","text":"If you encounter problems while using HASS.Agent, please activate the enable extended logging switch. HASS.Agent will restart when you store the configuration, and afterwards try to recreate your problem. Then open this tab again and click open logs folder . Please attach the latest log when submitting a ticket, or you can mail it to lab02research@outlook.com if you want it handled confidentially (or just because it's easy). Remember to turn extended logging off afterwards, as it'll clog your disk!","title":"7. Logging"},{"location":"configuration/#8-media-player","text":"Make sure the integration has been installed and configured in Home Assistant. Requires a patched Windows 10 or Windows 11 to function, ymmv . If it appears broken, checks the logs for more info.","title":"8. Media Player"},{"location":"configuration/#9-mqtt","text":"Enter your MQTT broker configuration. This is required if you want to use commands (triggered from Home Assistant) or sensors (sent from your PC). The new integration also uses MQTT by default, but can use the local API as a fallback. If you need help setting up MQTT, you can use this tutorial: Home Assistant MQTT Install and Setup - A Beginner's Guide . If you want to monitor what's being send through MQTT, you can use MQTT Explorer .","title":"9. MQTT"},{"location":"configuration/#10-notifications","text":"Make sure the integration has been installed and configured in Home Assistant. Sometimes Windows won't allow you to enable notifications for HASS.Agent. This can happen if HASS.Agent hasn't shown a notification yet. To make sure it technically works, click the show test notification button in this tab. You'll be presented with a locally generated notification (or not, of course).","title":"10. Notifications"},{"location":"configuration/#11-satellite-service","text":"This tab provides you with options to manage the technical aspect of the satellite service, like stop/start/disable/reinstall. Usually you won't have to use this. If the satellite service doesn't work as expected, please use the open service logs folder to locate its logs, and attach the latest one when sending a bug report.","title":"11. Satellite Service"},{"location":"configuration/#12-startup","text":"Gives the option to enable/disable running HASS.Agent when you login.","title":"12. Startup"},{"location":"configuration/#13-tray-icon","text":"Allows configuring the (right)mouse click events of HASS.Agent's tray icon.","title":"13. Tray Icon"},{"location":"configuration/#14-updates","text":"If you want, HASS.Agent can check for updates in the background. This works by checking the latest release on GitHub. When a new release is found, you'll be notified and given the option to install the update. You can opt-in on beta updates here. They are generally quite stable, and are mostly used to release new features faster than the regular updates. The regular channel is used roughly once a month, the prevent update fatigue. To make updating easier, you can enable offer to download and launch the installer for me . When enabled, you still have the last say in whether an update will be installed, but you won't have to do anything else. The update is downloaded from github.com, and its cryptographic signature is checked before being executed.","title":"14. Updates"},{"location":"examples/","text":"Sensor, Command, Automation and Script Examples Below is a list of examples, provided by the community. Template sensor: Storage Capacity Starting with 2022.13.0-beta2, multivalue sensors are using attributes. That means that a lot of values aren't reachable as regular sensors anymore. You can use state_attr to fetch the value, or even to create another sensor with just that specific value. Here's an example to get the AvailableSpaceMB attribute from a Storage multivalue sensor: template: sensor: - storage_capacity_c: friendly_name: \"Storage Capacity Drive C\" unit_of_measurement: \"MB\" value_template: \"{{ state_attr('sensor.hass_agent_storage_c', 'AvailableSpaceMB') | float(0) }}\" Make sure to change sensor.hass_agent_storage_c to the drive's sensor, and optionally AvailableSpaceMB to the attribute you want to use. The | float(0) part converts it to a number-based value, you can drop that if you want it as a text value. Reboot HA, and it'll show up as sensor.storage_capacity_c . Template trigger: LastActive alias: example trigger: - platform: template value_template: \"{{ (now() - states('sensor.testvm_lastactive')|as_datetime).total_seconds() < 60 }}\" action: ... etc ... Alternative version: value_template: \"{{ now() - states('sensor.testvm_lastactive')|as_datetime < timedelta(minutes=1) }}\" Alternative version (binary template sensor so you can use the true/false anywhere): template: - binary_sensor: - name: \"User Active\" state: \"{{ as_timestamp(now(),0) - as_timestamp(states('sensor.staging_lastactive'),0) < 60 }}\" This will also not error when the sensor's unavailable (thanks dbrunt !). Condition: TTS only when microphone's not active tts_test: alias: Test TTS mode: single sequence: - condition: state entity_id: binary_sensor.test_vm_mic_active state: \"off\" - service: notify.mycroft_tts data_template: message: >- {{ message }} Switch: Wake-On-LAN - platform: wake_on_lan name: \"your_pc_name\" mac: \"00-00-00-00-00-00\" host: 10.0.0.5 broadcast_address: 10.0.0.255 turn_off: service: switch.turn_on data: entity_id: switch.your_pc_hass_agent_shutdown_switch Alternative version: use a Hibernate Command to put your PC in hibernation instead. You may need to enable a rule in Windows Firewall to allow ICMP (ping) packets. Open Windows Defender Firewall with Advanced Security by running wf.msc and go to Inbound Rules . Then look up the rules called File and Printer Sharing (Echo Request - ICMPv*-In) , and enable the ICMPv4 variants. To manually add a rule, consult these docs (thanks @ArekkusuDesu!): https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-firewall/create-an-inbound-icmp-rule Sensor: GeoLocation alias: GPS voiture description: '' trigger: - platform: state entity_id: sensor.voiture_geolocation condition: [] action: - service: device_tracker.see data: dev_id: Voiture gps: - '{{ states(''sensor.voiture_geolocation'').split(\",\")[0] }}' - '{{ states(''sensor.voiture_geolocation'').split(\",\")[1] }}' mode: single This places the GeoLocation sensor as a device_tracker on the map (thanks Neilge !). Sensor: RAM from Percent to Usage/Total WMI Query Sensor: Query: SELECT Capacity FROM Win32_PhysicalMemory Scope: \\\\.\\Root\\CIMV2 Home Assistant Template Sensor: - sensor: - name: \"RAM Usage\" state: > {% set ram = states('sensor.laptop_memoryusage') | float %} {% set ramTotal = states('sensor.laptop_ramtotal') | int * 2 / 1024 / 1024 / 1024 %} {% set usage = ramTotal | float / 100 * ram | round(0, default=0) %} {% set state = usage | string + \"GB\" + \"/\" + ramTotal | string + \"GB\" %} {{state}} The sensor makes the assumption that you have 2 identical sticks of RAM installed, which you should have for performance, but if you only have 1 stick, simply remove the * 2. sensor.laptop_memoryusage is my percentage sensor reported by HASS Agent by default. I simply changed my entity in the card from the HASS.Agent entity to my own sensor. Thanks Celisuis ( forum post )! Automation: Change LCD brightness based on lux and session state Uses a CustomCommand with Actions to trigger Monitorian, and a LastSystemStateChangeSensor to check whether the user's active. alias: Change LCDs brightness based on lux mode: queued variables: # 25 - min value to set on first LCD (my LCD is hard to view below this value) # 30 - the difference between max value and min value that should be set, which gives us number of steps LCD can be set on (above 55 my LCD is already to bright for normal viewing) # 220 - the max lux value I've observed where the LCDs are standing throughout normal day of work # states(\"sensor.xiaomi_lumi_sen_ill_mgl01_illuminance\") | int(0) - make sure to get int value, not text lux_lcd01: '{{ 25 + (( (states(\"sensor.xiaomi_lumi_sen_ill_mgl01_illuminance\") | int(0)) / 220) * 30) | int(0) }}' trigger: - platform: state entity_id: sensor.xiaomi_lumi_sen_ill_mgl01_illuminance to: ~ condition: # set brightness only if the PC is up by looking for specific values from sensor set in HASS.Agent - condition: template value_template: \"{{ states('sensor.earth_lastsystemstatechange') in ['ApplicationStarted', 'Resume', 'SessionLogon', 'SessionUnlock'] }}\" # don't update brightness if the last trigger was less the 10s ago but do if there was no trigger at all (like after restarting HA) - condition: template value_template: \"{{ state_attr('automation.lcd_change_brightness', 'last_triggered') != 'None' or ((as_timestamp(utcnow()) - as_timestamp(state_attr('automation.lcd_change_brightness', 'last_triggered')) |int(0) ) > 10) }}\" - condition: template value_template: '{{ states(\"input_number.lux_value_for_automation\") | int(0) != lux_lcd01 }}' action: - service: mqtt.publish data: topic: \"homeassistant/light/EARTH/set_lcd01_brightness/action\" payload_template: '%LOCALAPPDATA%\\\\Microsoft\\\\WindowsApps\\\\Monitorian.exe /set \"DISPLAY\\AOC2713\\5&3f30a18&0&UID4357\" {{ lux_lcd01 }}' - service: mqtt.publish data: topic: \"homeassistant/light/EARTH/set_lcd01_brightness/action\" # this is the same as for lux_lcd01 but second LCD has different min and max (zero and 7 - yeah, that's how bright it is...) payload_template: '%LOCALAPPDATA%\\\\Microsoft\\\\WindowsApps\\\\Monitorian.exe /set \"DISPLAY\\PHL08E9\\5&3f30a18&0&UID4355\" {{ (( (states(\"sensor.xiaomi_lumi_sen_ill_mgl01_illuminance\") | int(0)) / 220) * 7) | int(0) }}' # I'm saving this to use later on when checking if the brightness changes even if the lux changed (automation was triggered) - service: input_number.set_value target: entity_id: input_number.lux_value_for_automation data: value: '{{ lux_lcd01 }}' Thanks @Draghmar! Awesome detailed writeup :) Light: Create a light entity for your monitor's powerstate - platform: template lights: pc_monitor: friendly_name: \"PC Monitor\" unique_id: pc_monitor availability_template: '{{ not is_state(\"binary_sensor.my_pc_is_active\", \"unknown\") }}' icon_template: >- hass: monitor value_template: >- {{ is_state(\"sensor.windows_11_monitorpowerstate\", \"PowerOn\") }} turn_on: service: button.press entity_id: button.windows_11_monitorwake turn_off: service: button.press entity_id: button.windows_11_monitorsleep Thanks @danielbrunt57! Automation: Toggle light based on motion and pc activity alias: Office Lights description: \"\" trigger: - platform: state entity_id: - binary_sensor.my_pc_is_active id: PC Active to: \"on\" - platform: state entity_id: - binary_sensor.office_motion id: Motion on to: \"on\" - platform: state entity_id: - binary_sensor.my_pc_is_active id: PC Idle to: \"off\" for: hours: 0 minutes: 5 seconds: 0 - platform: state entity_id: - binary_sensor.office_motion to: \"off\" id: Motion off for: hours: 0 minutes: \"{{ states('input_number.office_lights_auto_off_time') }}\" seconds: 0 condition: [] action: - choose: - conditions: - condition: or conditions: - condition: trigger id: PC Active - condition: trigger id: Motion on sequence: - if: - condition: state entity_id: sensor.windows_11_monitorpowerstate state: \"PowerOff\" then: - service: light.turn_on data: {} target: entity_id: light.pc_monitor - if: - condition: state entity_id: light.office_lights state: \"off\" then: - service: light.turn_on data: {} target: entity_id: light.office_lights - conditions: - condition: and conditions: - condition: state entity_id: binary_sensor.my_pc_is_active state: \"off\" - condition: state entity_id: binary_sensor.office_motion state: \"off\" sequence: - service: light.turn_off data: {} target: area_id: office default: [] mode: restart Thanks @danielbrunt57! Command: Grab screenshot using Powershell A small Powershell script to save the screen and write it to the www folder on home assistant, then use the standard Generic Camera to use the image. This is the powershell to grab the shot. Then simply schedule a standard automation to update every two minutes. $Path = \"\\\\HOMEASSISTANT\\config\\www\" # Make sure that the directory to keep screenshots has been created, otherwise create it If (!(test-path $path)) { New-Item -ItemType Directory -Force -Path $path } Add-Type -AssemblyName System.Windows.Forms $screen = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds # Get the current screen resolution $image = New-Object System.Drawing.Bitmap($screen.Width, $screen.Height) # Create a graphic object $graphic = [System.Drawing.Graphics]::FromImage($image) $point = New-Object System.Drawing.Point(0, 0) $graphic.CopyFromScreen($point, $point, $image.Size); $cursorBounds = New-Object System.Drawing.Rectangle([System.Windows.Forms.Cursor]::Position, [System.Windows.Forms.Cursor]::Current.Size) # Get a screenshot [System.Windows.Forms.Cursors]::Default.Draw($graphic, $cursorBounds) # $screen_file = \"$Path\\\" + $env:computername + \"_\" + $env:username + \"_\" + \"$((get-date).tostring('yyyy.MM.dd-HH.mm.ss')).png\" $screen_file = \"$Path\\\" + $env:computername + \"-screenshot.png\" # Save the screenshot as a PNG file $image.Save($screen_file, [System.Drawing.Imaging.ImageFormat]::Png) Thanks kind stranger ! Note: make sure your PS execution policy allows execution (to allow remote unsigned, but require remote scripts to be signed, use Set-ExecutionPolicy RemoteSigned ). Thanks drjjr ! Automation: Send a notification when Spotify starts playing alias: HASS.Agent - Spotify is playing audio description: \"\" trigger: - platform: template value_template: >- {%- if state_attr('sensor.hass_desktop_audio_audio_sessions', 'AudioSessions') | selectattr('Application', 'match', 'Spotify') | list %} true {%- else %} false {%- endif %} condition: [] action: - service: notify.hass_agent_desktop data: message: Spotify is playing music data: image: none mode: single Thanks Rokanishu ! Sensor: Battery percentage to Bluetooth device Based on: https://stackoverflow.com/questions/71736070/how-to-get-bluetooth-device-battery-percentage-using-powershell-on-windows Create a PowershellSensor : (Get-PnpDevice -Class 'Bluetooth' -FriendlyName ''Xbox Wireless Controller' | Get-PnpDeviceProperty -KeyName '{104EA319-6EE2-4701-BD47-8DDBF425BBE5} 2').Data Customize the sensor: sensor.desktop_windows_xboxbattery: device_class: battery Thanks @bkbilly! Command: Change default audio playback device Uses nircmd: https://www.nirsoft.net/utils/nircmd.html Create a CustomCommand (button type): nircmd setdefaultsounddevice <your device> Optionally use input_select in HA: https://github.com/LAB02-Research/HASS.Agent/issues/97#issuecomment-1288040508 Thanks @tachibanayui!","title":"Misc Examples"},{"location":"examples/#sensor-command-automation-and-script-examples","text":"Below is a list of examples, provided by the community.","title":"Sensor, Command, Automation and Script Examples"},{"location":"examples/#template-sensor-storage-capacity","text":"Starting with 2022.13.0-beta2, multivalue sensors are using attributes. That means that a lot of values aren't reachable as regular sensors anymore. You can use state_attr to fetch the value, or even to create another sensor with just that specific value. Here's an example to get the AvailableSpaceMB attribute from a Storage multivalue sensor: template: sensor: - storage_capacity_c: friendly_name: \"Storage Capacity Drive C\" unit_of_measurement: \"MB\" value_template: \"{{ state_attr('sensor.hass_agent_storage_c', 'AvailableSpaceMB') | float(0) }}\" Make sure to change sensor.hass_agent_storage_c to the drive's sensor, and optionally AvailableSpaceMB to the attribute you want to use. The | float(0) part converts it to a number-based value, you can drop that if you want it as a text value. Reboot HA, and it'll show up as sensor.storage_capacity_c .","title":"Template sensor: Storage Capacity"},{"location":"examples/#template-trigger-lastactive","text":"alias: example trigger: - platform: template value_template: \"{{ (now() - states('sensor.testvm_lastactive')|as_datetime).total_seconds() < 60 }}\" action: ... etc ... Alternative version: value_template: \"{{ now() - states('sensor.testvm_lastactive')|as_datetime < timedelta(minutes=1) }}\" Alternative version (binary template sensor so you can use the true/false anywhere): template: - binary_sensor: - name: \"User Active\" state: \"{{ as_timestamp(now(),0) - as_timestamp(states('sensor.staging_lastactive'),0) < 60 }}\" This will also not error when the sensor's unavailable (thanks dbrunt !).","title":"Template trigger: LastActive"},{"location":"examples/#condition-tts-only-when-microphones-not-active","text":"tts_test: alias: Test TTS mode: single sequence: - condition: state entity_id: binary_sensor.test_vm_mic_active state: \"off\" - service: notify.mycroft_tts data_template: message: >- {{ message }}","title":"Condition: TTS only when microphone's not active"},{"location":"examples/#switch-wake-on-lan","text":"- platform: wake_on_lan name: \"your_pc_name\" mac: \"00-00-00-00-00-00\" host: 10.0.0.5 broadcast_address: 10.0.0.255 turn_off: service: switch.turn_on data: entity_id: switch.your_pc_hass_agent_shutdown_switch Alternative version: use a Hibernate Command to put your PC in hibernation instead. You may need to enable a rule in Windows Firewall to allow ICMP (ping) packets. Open Windows Defender Firewall with Advanced Security by running wf.msc and go to Inbound Rules . Then look up the rules called File and Printer Sharing (Echo Request - ICMPv*-In) , and enable the ICMPv4 variants. To manually add a rule, consult these docs (thanks @ArekkusuDesu!): https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-firewall/create-an-inbound-icmp-rule","title":"Switch: Wake-On-LAN"},{"location":"examples/#sensor-geolocation","text":"alias: GPS voiture description: '' trigger: - platform: state entity_id: sensor.voiture_geolocation condition: [] action: - service: device_tracker.see data: dev_id: Voiture gps: - '{{ states(''sensor.voiture_geolocation'').split(\",\")[0] }}' - '{{ states(''sensor.voiture_geolocation'').split(\",\")[1] }}' mode: single This places the GeoLocation sensor as a device_tracker on the map (thanks Neilge !).","title":"Sensor: GeoLocation"},{"location":"examples/#sensor-ram-from-percent-to-usagetotal","text":"WMI Query Sensor: Query: SELECT Capacity FROM Win32_PhysicalMemory Scope: \\\\.\\Root\\CIMV2 Home Assistant Template Sensor: - sensor: - name: \"RAM Usage\" state: > {% set ram = states('sensor.laptop_memoryusage') | float %} {% set ramTotal = states('sensor.laptop_ramtotal') | int * 2 / 1024 / 1024 / 1024 %} {% set usage = ramTotal | float / 100 * ram | round(0, default=0) %} {% set state = usage | string + \"GB\" + \"/\" + ramTotal | string + \"GB\" %} {{state}} The sensor makes the assumption that you have 2 identical sticks of RAM installed, which you should have for performance, but if you only have 1 stick, simply remove the * 2. sensor.laptop_memoryusage is my percentage sensor reported by HASS Agent by default. I simply changed my entity in the card from the HASS.Agent entity to my own sensor. Thanks Celisuis ( forum post )!","title":"Sensor: RAM from Percent to Usage/Total"},{"location":"examples/#automation-change-lcd-brightness-based-on-lux-and-session-state","text":"Uses a CustomCommand with Actions to trigger Monitorian, and a LastSystemStateChangeSensor to check whether the user's active. alias: Change LCDs brightness based on lux mode: queued variables: # 25 - min value to set on first LCD (my LCD is hard to view below this value) # 30 - the difference between max value and min value that should be set, which gives us number of steps LCD can be set on (above 55 my LCD is already to bright for normal viewing) # 220 - the max lux value I've observed where the LCDs are standing throughout normal day of work # states(\"sensor.xiaomi_lumi_sen_ill_mgl01_illuminance\") | int(0) - make sure to get int value, not text lux_lcd01: '{{ 25 + (( (states(\"sensor.xiaomi_lumi_sen_ill_mgl01_illuminance\") | int(0)) / 220) * 30) | int(0) }}' trigger: - platform: state entity_id: sensor.xiaomi_lumi_sen_ill_mgl01_illuminance to: ~ condition: # set brightness only if the PC is up by looking for specific values from sensor set in HASS.Agent - condition: template value_template: \"{{ states('sensor.earth_lastsystemstatechange') in ['ApplicationStarted', 'Resume', 'SessionLogon', 'SessionUnlock'] }}\" # don't update brightness if the last trigger was less the 10s ago but do if there was no trigger at all (like after restarting HA) - condition: template value_template: \"{{ state_attr('automation.lcd_change_brightness', 'last_triggered') != 'None' or ((as_timestamp(utcnow()) - as_timestamp(state_attr('automation.lcd_change_brightness', 'last_triggered')) |int(0) ) > 10) }}\" - condition: template value_template: '{{ states(\"input_number.lux_value_for_automation\") | int(0) != lux_lcd01 }}' action: - service: mqtt.publish data: topic: \"homeassistant/light/EARTH/set_lcd01_brightness/action\" payload_template: '%LOCALAPPDATA%\\\\Microsoft\\\\WindowsApps\\\\Monitorian.exe /set \"DISPLAY\\AOC2713\\5&3f30a18&0&UID4357\" {{ lux_lcd01 }}' - service: mqtt.publish data: topic: \"homeassistant/light/EARTH/set_lcd01_brightness/action\" # this is the same as for lux_lcd01 but second LCD has different min and max (zero and 7 - yeah, that's how bright it is...) payload_template: '%LOCALAPPDATA%\\\\Microsoft\\\\WindowsApps\\\\Monitorian.exe /set \"DISPLAY\\PHL08E9\\5&3f30a18&0&UID4355\" {{ (( (states(\"sensor.xiaomi_lumi_sen_ill_mgl01_illuminance\") | int(0)) / 220) * 7) | int(0) }}' # I'm saving this to use later on when checking if the brightness changes even if the lux changed (automation was triggered) - service: input_number.set_value target: entity_id: input_number.lux_value_for_automation data: value: '{{ lux_lcd01 }}' Thanks @Draghmar! Awesome detailed writeup :)","title":"Automation: Change LCD brightness based on lux and session state"},{"location":"examples/#light-create-a-light-entity-for-your-monitors-powerstate","text":"- platform: template lights: pc_monitor: friendly_name: \"PC Monitor\" unique_id: pc_monitor availability_template: '{{ not is_state(\"binary_sensor.my_pc_is_active\", \"unknown\") }}' icon_template: >- hass: monitor value_template: >- {{ is_state(\"sensor.windows_11_monitorpowerstate\", \"PowerOn\") }} turn_on: service: button.press entity_id: button.windows_11_monitorwake turn_off: service: button.press entity_id: button.windows_11_monitorsleep Thanks @danielbrunt57!","title":"Light: Create a light entity for your monitor's powerstate"},{"location":"examples/#automation-toggle-light-based-on-motion-and-pc-activity","text":"alias: Office Lights description: \"\" trigger: - platform: state entity_id: - binary_sensor.my_pc_is_active id: PC Active to: \"on\" - platform: state entity_id: - binary_sensor.office_motion id: Motion on to: \"on\" - platform: state entity_id: - binary_sensor.my_pc_is_active id: PC Idle to: \"off\" for: hours: 0 minutes: 5 seconds: 0 - platform: state entity_id: - binary_sensor.office_motion to: \"off\" id: Motion off for: hours: 0 minutes: \"{{ states('input_number.office_lights_auto_off_time') }}\" seconds: 0 condition: [] action: - choose: - conditions: - condition: or conditions: - condition: trigger id: PC Active - condition: trigger id: Motion on sequence: - if: - condition: state entity_id: sensor.windows_11_monitorpowerstate state: \"PowerOff\" then: - service: light.turn_on data: {} target: entity_id: light.pc_monitor - if: - condition: state entity_id: light.office_lights state: \"off\" then: - service: light.turn_on data: {} target: entity_id: light.office_lights - conditions: - condition: and conditions: - condition: state entity_id: binary_sensor.my_pc_is_active state: \"off\" - condition: state entity_id: binary_sensor.office_motion state: \"off\" sequence: - service: light.turn_off data: {} target: area_id: office default: [] mode: restart Thanks @danielbrunt57!","title":"Automation: Toggle light based on motion and pc activity"},{"location":"examples/#command-grab-screenshot-using-powershell","text":"A small Powershell script to save the screen and write it to the www folder on home assistant, then use the standard Generic Camera to use the image. This is the powershell to grab the shot. Then simply schedule a standard automation to update every two minutes. $Path = \"\\\\HOMEASSISTANT\\config\\www\" # Make sure that the directory to keep screenshots has been created, otherwise create it If (!(test-path $path)) { New-Item -ItemType Directory -Force -Path $path } Add-Type -AssemblyName System.Windows.Forms $screen = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds # Get the current screen resolution $image = New-Object System.Drawing.Bitmap($screen.Width, $screen.Height) # Create a graphic object $graphic = [System.Drawing.Graphics]::FromImage($image) $point = New-Object System.Drawing.Point(0, 0) $graphic.CopyFromScreen($point, $point, $image.Size); $cursorBounds = New-Object System.Drawing.Rectangle([System.Windows.Forms.Cursor]::Position, [System.Windows.Forms.Cursor]::Current.Size) # Get a screenshot [System.Windows.Forms.Cursors]::Default.Draw($graphic, $cursorBounds) # $screen_file = \"$Path\\\" + $env:computername + \"_\" + $env:username + \"_\" + \"$((get-date).tostring('yyyy.MM.dd-HH.mm.ss')).png\" $screen_file = \"$Path\\\" + $env:computername + \"-screenshot.png\" # Save the screenshot as a PNG file $image.Save($screen_file, [System.Drawing.Imaging.ImageFormat]::Png) Thanks kind stranger ! Note: make sure your PS execution policy allows execution (to allow remote unsigned, but require remote scripts to be signed, use Set-ExecutionPolicy RemoteSigned ). Thanks drjjr !","title":"Command: Grab screenshot using Powershell"},{"location":"examples/#automation-send-a-notification-when-spotify-starts-playing","text":"alias: HASS.Agent - Spotify is playing audio description: \"\" trigger: - platform: template value_template: >- {%- if state_attr('sensor.hass_desktop_audio_audio_sessions', 'AudioSessions') | selectattr('Application', 'match', 'Spotify') | list %} true {%- else %} false {%- endif %} condition: [] action: - service: notify.hass_agent_desktop data: message: Spotify is playing music data: image: none mode: single Thanks Rokanishu !","title":"Automation: Send a notification when Spotify starts playing"},{"location":"examples/#sensor-battery-percentage-to-bluetooth-device","text":"Based on: https://stackoverflow.com/questions/71736070/how-to-get-bluetooth-device-battery-percentage-using-powershell-on-windows Create a PowershellSensor : (Get-PnpDevice -Class 'Bluetooth' -FriendlyName ''Xbox Wireless Controller' | Get-PnpDeviceProperty -KeyName '{104EA319-6EE2-4701-BD47-8DDBF425BBE5} 2').Data Customize the sensor: sensor.desktop_windows_xboxbattery: device_class: battery Thanks @bkbilly!","title":"Sensor: Battery percentage to Bluetooth device"},{"location":"examples/#command-change-default-audio-playback-device","text":"Uses nircmd: https://www.nirsoft.net/utils/nircmd.html Create a CustomCommand (button type): nircmd setdefaultsounddevice <your device> Optionally use input_select in HA: https://github.com/LAB02-Research/HASS.Agent/issues/97#issuecomment-1288040508 Thanks @tachibanayui!","title":"Command: Change default audio playback device"},{"location":"installation-and-configuration-summary/","text":"Installation and Configuration Summary Checklist to start using HASS.Agent: Install and configure the HASS.Agent integration if you want notifications and/or mediaplayer capabilities Download & run the latest release's installer HASS.Agent will launch and show you the onboarding process Configure the parts you'll be using HASS.Agent will restart to activate your configuration Start adding Quick Actions, commands & sensors! Stuck? Create a ticket or join on Discord . Note - to fully use HASS.Agent, it's recommended to have MQTT up and running. This may seem daunting, but it's really easy. Tutorial: Home Assistant MQTT Install and Setup - A Beginner's Guide","title":"Installation and Configuration Summary"},{"location":"installation-and-configuration-summary/#installation-and-configuration-summary","text":"Checklist to start using HASS.Agent: Install and configure the HASS.Agent integration if you want notifications and/or mediaplayer capabilities Download & run the latest release's installer HASS.Agent will launch and show you the onboarding process Configure the parts you'll be using HASS.Agent will restart to activate your configuration Start adding Quick Actions, commands & sensors! Stuck? Create a ticket or join on Discord . Note - to fully use HASS.Agent, it's recommended to have MQTT up and running. This may seem daunting, but it's really easy. Tutorial: Home Assistant MQTT Install and Setup - A Beginner's Guide","title":"Installation and Configuration Summary"},{"location":"installation/","text":"Installation Click here to download the latest installer. If you want to install HASS.Agent on multiple accounts on the same PC, first install using the installer, then use the .zip package for the remaining accounts: click here to get it. Note: you only have to install HASS.Agent on those accounts, the service is once-per-machine. 1. Installer (recommended) You have the option to download an installer or a .zip package. The installer is the easier and recommended option: it'll help you install .NET 6 if you don't have it yet, install the service and launch HASS.Agent. However, because the installer requires elevated rights, you can use the .zip package to install HASS.Agent on other accounts on the same PC (since the service only needs to be installed once). HASS.Agent can use an entry in your user account's registry to launch on login. It's disabled by default, but you'll be offered to enable this during onboarding, or you can always disable/enable using the Configuration window. To use notifications and/or the mediaplayer functionality, you'll need to install the HASS.Agent integration . Refer to the Integration's installation and configuration pages on the left for more info. 2. Manual If you don't want to (or can't) use the installer, you can also install manually - it's not that hard. Make sure you have dotnet 6 desktop runtime installed, you can get that here . There are two zip files to download with every release: Click here to download the latest HASS.Agent package. Click here to download the latest Satellite Service package. HASS.Agent needs to be placed in a folder with write access. The default is %appdata%\\LAB02 Research\\HASS.Agent , but anywhere will do. The Satellite Service's default folder is C:\\Program Files (x86)\\LAB02 Research\\HASS.Agent Satellite Service . You can place it anywhere you want, however, if that's the case you need to manually start HASS.Agent.Satellite.Service.exe , wait for it to start, then close it again. This way, it'll have configured a local registry setting telling HASS.Agent where it's stored. When both are done, you can start the configuration process by opening an elevated command prompt in HASS.Agent's directory. Then, execute the following command: HASS.Agent.exe update HASS.Agent will now launch, install and configure the service and firewall rules, then relaunch itself without elevation. All done! 3. Build From Scratch If you want, you can also build everything yourself. You'll need to have Visual Studio 2022 installed. Also, make sure you have dotnet 6 desktop runtime installed, you can get that here . There are two main projects: HASS.Agent HASS.Agent Satellite Service Just get the source through git or GitHub's zip download, launch the solution files, make sure you set x64 as its output type and build. If you want to control the entire process: both projects use HASS.Agent.Shared , a library which contains models and code mainly for the commands and sensors. It's added as a nuget . You can download its source here: HASS.Agent.Shared Just like before, make sure you set x64 as its output type and build. Then, remove the nuget reference from both projects, add your own library and rebuild them. When all this is done, you can follow step 2 'manual' on this page to resume installation.","title":"Installation"},{"location":"installation/#installation","text":"Click here to download the latest installer. If you want to install HASS.Agent on multiple accounts on the same PC, first install using the installer, then use the .zip package for the remaining accounts: click here to get it. Note: you only have to install HASS.Agent on those accounts, the service is once-per-machine.","title":"Installation"},{"location":"installation/#1-installer-recommended","text":"You have the option to download an installer or a .zip package. The installer is the easier and recommended option: it'll help you install .NET 6 if you don't have it yet, install the service and launch HASS.Agent. However, because the installer requires elevated rights, you can use the .zip package to install HASS.Agent on other accounts on the same PC (since the service only needs to be installed once). HASS.Agent can use an entry in your user account's registry to launch on login. It's disabled by default, but you'll be offered to enable this during onboarding, or you can always disable/enable using the Configuration window. To use notifications and/or the mediaplayer functionality, you'll need to install the HASS.Agent integration . Refer to the Integration's installation and configuration pages on the left for more info.","title":"1. Installer (recommended)"},{"location":"installation/#2-manual","text":"If you don't want to (or can't) use the installer, you can also install manually - it's not that hard. Make sure you have dotnet 6 desktop runtime installed, you can get that here . There are two zip files to download with every release: Click here to download the latest HASS.Agent package. Click here to download the latest Satellite Service package. HASS.Agent needs to be placed in a folder with write access. The default is %appdata%\\LAB02 Research\\HASS.Agent , but anywhere will do. The Satellite Service's default folder is C:\\Program Files (x86)\\LAB02 Research\\HASS.Agent Satellite Service . You can place it anywhere you want, however, if that's the case you need to manually start HASS.Agent.Satellite.Service.exe , wait for it to start, then close it again. This way, it'll have configured a local registry setting telling HASS.Agent where it's stored. When both are done, you can start the configuration process by opening an elevated command prompt in HASS.Agent's directory. Then, execute the following command: HASS.Agent.exe update HASS.Agent will now launch, install and configure the service and firewall rules, then relaunch itself without elevation. All done!","title":"2. Manual"},{"location":"installation/#3-build-from-scratch","text":"If you want, you can also build everything yourself. You'll need to have Visual Studio 2022 installed. Also, make sure you have dotnet 6 desktop runtime installed, you can get that here . There are two main projects: HASS.Agent HASS.Agent Satellite Service Just get the source through git or GitHub's zip download, launch the solution files, make sure you set x64 as its output type and build. If you want to control the entire process: both projects use HASS.Agent.Shared , a library which contains models and code mainly for the commands and sensors. It's added as a nuget . You can download its source here: HASS.Agent.Shared Just like before, make sure you set x64 as its output type and build. Then, remove the nuget reference from both projects, add your own library and rebuild them. When all this is done, you can follow step 2 'manual' on this page to resume installation.","title":"3. Build From Scratch"},{"location":"introduction/","text":"Introduction This page explains the basics behind HASS.Agent: what is it and what can it do. We'll be using the abbreviation HA for Home Assistant, so when HA is mentioned, it refers to your Home Assistant instance. Tip: you can use Home Assistant's glossary to look up words you don't know yet. Tip: EverythingSmartHome's youtube video is a great guide to get you started: Control Your Windows PC With Home Assistant! . Note that it is based on an older version, so for instance the mentioned missing 'actionable notifications' are already implemented. Overview In general, HASS.Agent is a client ( companion ) application for Home Assistant. It's being developed for Windows, with Windows 10 and 11 (fully up-to-date) in mind - previous versions or unpatched systems may work. The communication goes both ways: HASS.Agent can send data to HA, and HA can send data to HASS.Agent. In other words: you can use HASS.Agent to control and inform HA, and you can use HA to control HASS.Agent. Globally, these are the functionalities: Function Description Commands Control your PC from HA. Example: lock your session, open notepad or emulate a keypress. Sensors Send PC telemetry to HA. Example: cpu load, is your webcam active or is the current user active. Quick Actions Trigger any HA entity. Example: turn on your lights or open the garage door. Notifications Receive a notification from HA, and show it as a Windows notification. Example: image of who's at the front door. Media Player Control your PC from HA as if it were a mediaplayer. Example: see what Spotify song's playing, or send a text-to-speech message. WebView Show any webpage, without launching a browser. Example: show a HA dashboard when rightclicking HASS.Agent's tray icon. Satellite Service Process commands and sensors even when no user's logged in. Example: shutdown your PC at any time, locked or not. Let's go over every function for a bit more in-depth. Commands Commands have their own introduction page: Command Basics . If you want to go a bit more advanced, have a look at the actions page: Actions Usage and Examples . Actions allow you to send variables alongside your command, so you can for example have you HA automation decide what URL you want to show. Sensors Sensors allow you to send all sorts of telemetry from your PC to HA. A few common examples are what's the current cpu load , are you using your webcam/mic , are you logged in or is your session locked - but there are over 30 of them, so there's much more to explore. When you create a new sensor, it shows up in HA as an entity: To find the entities, go to your HA instance, and press c . This will show the search bar. Now type devices and press enter . In the Search devices bar that's shown on top, type the name of your HASS.Agent instance: Tip: you can always find (and change) the name of your HASS.Agent instance by clicking on the configuration button in the main window. If your HASS.Agent is properly configured, your pc will now show as a result. You can easily verify it's a HASS.Agent instance by confirming it says LAB02 Research under the Manufacturer column. Click on your pc to see what commands and sensors are currently configured. Multi-Value Sensors Some sensors have multiple relevant data points. For instance, if you add a storage sensor, statistics for all your disks will get sent. You can easily see which sensors are multi-value through this column: And here you can see the multiple sensors being added (they all start with the name you gave it): Quick Actions One of the reasons for developing HASS.Agent was the ability to easily trigger HA entities. For instance, if I want to turn on a light, I don't want to open an app or browser and go to the right dashboard. Nor do I always want to say it out load to a Google Home-device of sorts. To make that possible, HASS.Agent has Quick Actions. You configure them once by selected the desired entity and the desired state: And from that on you can either execute them by their individual hotkey, or pull up the list of quick actions by their global hotkey: Notifications Another reason for HASS.Agent's creation was the ability to receive notifications from HA. For instance: someone presses the doorbell, and you get a notification with a picture of the guest on your PC. Because I'm usually listening to music with earpods in while working, this would be a good way to get my attention. Use the integration installation to help get you started, or the notifications example page for inspiration. Media Player The mediaplayer allows you to use your HASS.Agent as a mediaplayer device: see and control what's playing (regardless of what application you're actually using to play media), and send text-to-speech notifications. Use the integration installation to help get you started or the mediaplayer example page for inspiration. WebView The webview capability is not something you can see directly like commands and sensors, but more of an underlying technique. It's basically a way to show a website, without having to launch a browser. There are currently two implementations for the webview component. WebView Command This command allows you to open any webpage with some extra configuration, like where on your monitor, and what size. You can use this to launch a predefined URL (like a HA dashboard) or even dynamically when using an Action. Example configuration: Tray Icon By default, when you right-click the HASS.Agent tray icon (near your clock on the taskbar) you'll get a simple menu. However, you can also configure (through Configuration -> Tray Icon ) to show a webview. This is really neat if you want to quickly show a dashboard with a bit more options than the quick actions: Satellite Service HASS.Agent is a very easy (at least I think so) tool to configure your sensors and commands. There is however a downside: if you're not logged into Windows, it won't load, so your sensors and commands won't run. Another issue is security-wise: HASS.Agent runs with the least possible privileges, but that means you can't perform commands that would require elevation. To allow for all that, the satellite service was added. This is a Windows service which runs in the background, and allows you to run sensors and commands without having to be logged in - and with elevated privileges (be careful though when running potential hazardous commands). You can start tinkering by clicking the satellite service button in the main window: The satellite service copies HASS.Agent's MQTT settings, except the client id (which is required to be unique). If you want to set another user, you can do so on the MQTT tab. Otherwise, jump straight into adding commands and sensors! HASS.Agent will warn you when a certain command or sensor can't be run via the satellite service. Remember to click the send and activate button after adding or modifying your entities! Tip: if the MQTT status remains disconnected , restart the service (go to Configuration in the main window, then tab Satellite Service and click stop service and start service respectively) and check again. Note: you can't do anything that would require an UI in the satellite service - for instance, you can't open a browser. It wouldn't show. If you need more info or want to talk, please feel free to reach out: Github Tickets : Report bugs, feature requests, ideas, tips, .. Discord : Get help with setting up and using HASS.Agent, report bugs or just talk about whatever. Home Assistant forum : Bit of everything, with the addition that other HA users can help as well.","title":"Introduction"},{"location":"introduction/#introduction","text":"This page explains the basics behind HASS.Agent: what is it and what can it do. We'll be using the abbreviation HA for Home Assistant, so when HA is mentioned, it refers to your Home Assistant instance. Tip: you can use Home Assistant's glossary to look up words you don't know yet. Tip: EverythingSmartHome's youtube video is a great guide to get you started: Control Your Windows PC With Home Assistant! . Note that it is based on an older version, so for instance the mentioned missing 'actionable notifications' are already implemented.","title":"Introduction"},{"location":"introduction/#overview","text":"In general, HASS.Agent is a client ( companion ) application for Home Assistant. It's being developed for Windows, with Windows 10 and 11 (fully up-to-date) in mind - previous versions or unpatched systems may work. The communication goes both ways: HASS.Agent can send data to HA, and HA can send data to HASS.Agent. In other words: you can use HASS.Agent to control and inform HA, and you can use HA to control HASS.Agent. Globally, these are the functionalities: Function Description Commands Control your PC from HA. Example: lock your session, open notepad or emulate a keypress. Sensors Send PC telemetry to HA. Example: cpu load, is your webcam active or is the current user active. Quick Actions Trigger any HA entity. Example: turn on your lights or open the garage door. Notifications Receive a notification from HA, and show it as a Windows notification. Example: image of who's at the front door. Media Player Control your PC from HA as if it were a mediaplayer. Example: see what Spotify song's playing, or send a text-to-speech message. WebView Show any webpage, without launching a browser. Example: show a HA dashboard when rightclicking HASS.Agent's tray icon. Satellite Service Process commands and sensors even when no user's logged in. Example: shutdown your PC at any time, locked or not. Let's go over every function for a bit more in-depth.","title":"Overview"},{"location":"introduction/#commands","text":"Commands have their own introduction page: Command Basics . If you want to go a bit more advanced, have a look at the actions page: Actions Usage and Examples . Actions allow you to send variables alongside your command, so you can for example have you HA automation decide what URL you want to show.","title":"Commands"},{"location":"introduction/#sensors","text":"Sensors allow you to send all sorts of telemetry from your PC to HA. A few common examples are what's the current cpu load , are you using your webcam/mic , are you logged in or is your session locked - but there are over 30 of them, so there's much more to explore. When you create a new sensor, it shows up in HA as an entity: To find the entities, go to your HA instance, and press c . This will show the search bar. Now type devices and press enter . In the Search devices bar that's shown on top, type the name of your HASS.Agent instance: Tip: you can always find (and change) the name of your HASS.Agent instance by clicking on the configuration button in the main window. If your HASS.Agent is properly configured, your pc will now show as a result. You can easily verify it's a HASS.Agent instance by confirming it says LAB02 Research under the Manufacturer column. Click on your pc to see what commands and sensors are currently configured.","title":"Sensors"},{"location":"introduction/#multi-value-sensors","text":"Some sensors have multiple relevant data points. For instance, if you add a storage sensor, statistics for all your disks will get sent. You can easily see which sensors are multi-value through this column: And here you can see the multiple sensors being added (they all start with the name you gave it):","title":"Multi-Value Sensors"},{"location":"introduction/#quick-actions","text":"One of the reasons for developing HASS.Agent was the ability to easily trigger HA entities. For instance, if I want to turn on a light, I don't want to open an app or browser and go to the right dashboard. Nor do I always want to say it out load to a Google Home-device of sorts. To make that possible, HASS.Agent has Quick Actions. You configure them once by selected the desired entity and the desired state: And from that on you can either execute them by their individual hotkey, or pull up the list of quick actions by their global hotkey:","title":"Quick Actions"},{"location":"introduction/#notifications","text":"Another reason for HASS.Agent's creation was the ability to receive notifications from HA. For instance: someone presses the doorbell, and you get a notification with a picture of the guest on your PC. Because I'm usually listening to music with earpods in while working, this would be a good way to get my attention. Use the integration installation to help get you started, or the notifications example page for inspiration.","title":"Notifications"},{"location":"introduction/#media-player","text":"The mediaplayer allows you to use your HASS.Agent as a mediaplayer device: see and control what's playing (regardless of what application you're actually using to play media), and send text-to-speech notifications. Use the integration installation to help get you started or the mediaplayer example page for inspiration.","title":"Media Player"},{"location":"introduction/#webview","text":"The webview capability is not something you can see directly like commands and sensors, but more of an underlying technique. It's basically a way to show a website, without having to launch a browser. There are currently two implementations for the webview component.","title":"WebView"},{"location":"introduction/#webview-command","text":"This command allows you to open any webpage with some extra configuration, like where on your monitor, and what size. You can use this to launch a predefined URL (like a HA dashboard) or even dynamically when using an Action. Example configuration:","title":"WebView Command"},{"location":"introduction/#tray-icon","text":"By default, when you right-click the HASS.Agent tray icon (near your clock on the taskbar) you'll get a simple menu. However, you can also configure (through Configuration -> Tray Icon ) to show a webview. This is really neat if you want to quickly show a dashboard with a bit more options than the quick actions:","title":"Tray Icon"},{"location":"introduction/#satellite-service","text":"HASS.Agent is a very easy (at least I think so) tool to configure your sensors and commands. There is however a downside: if you're not logged into Windows, it won't load, so your sensors and commands won't run. Another issue is security-wise: HASS.Agent runs with the least possible privileges, but that means you can't perform commands that would require elevation. To allow for all that, the satellite service was added. This is a Windows service which runs in the background, and allows you to run sensors and commands without having to be logged in - and with elevated privileges (be careful though when running potential hazardous commands). You can start tinkering by clicking the satellite service button in the main window: The satellite service copies HASS.Agent's MQTT settings, except the client id (which is required to be unique). If you want to set another user, you can do so on the MQTT tab. Otherwise, jump straight into adding commands and sensors! HASS.Agent will warn you when a certain command or sensor can't be run via the satellite service. Remember to click the send and activate button after adding or modifying your entities! Tip: if the MQTT status remains disconnected , restart the service (go to Configuration in the main window, then tab Satellite Service and click stop service and start service respectively) and check again. Note: you can't do anything that would require an UI in the satellite service - for instance, you can't open a browser. It wouldn't show. If you need more info or want to talk, please feel free to reach out: Github Tickets : Report bugs, feature requests, ideas, tips, .. Discord : Get help with setting up and using HASS.Agent, report bugs or just talk about whatever. Home Assistant forum : Bit of everything, with the addition that other HA users can help as well.","title":"Satellite Service"},{"location":"outdated/","text":"This is the old documentation To go back home click here","title":"OUTDATED DOCUMENTATION"},{"location":"outdated/#this-is-the-old-documentation","text":"","title":"This is the old documentation"},{"location":"outdated/#to-go-back-home-click-here","text":"","title":"To go back home click here"},{"location":"performance-counter-debugging/","text":"Performance Counter Debugging Windows' Performance Counters can enter a corrupt state from time to time. HASS.Agent will show this message: You can easily fix this with a few commands. First, open an elevated command prompt (search for cmd in Start, then hold ctrl and shift while you press enter) and copy & paste the following commands: cd c:\\windows\\system32 lodctr /R cd c:\\windows\\sysWOW64 lodctr /R WINMGMT.EXE /RESYNCPERF You can now close the command prompt. Open an elevated Powershell prompt (search for powershell and use the same trick as above) and enter the following commands: Get-Service -Name \"pla\" | Restart-Service -Verbose Get-Service -Name \"winmgmt\" | Restart-Service -Force -Verbose Now start HASS.Agent, and the error should be gone. Chances are the satellite service crashed as well, so make sure to go to Configuration -> Satellite Service and click start service .","title":"Performance Counter Debugging"},{"location":"performance-counter-debugging/#performance-counter-debugging","text":"Windows' Performance Counters can enter a corrupt state from time to time. HASS.Agent will show this message: You can easily fix this with a few commands. First, open an elevated command prompt (search for cmd in Start, then hold ctrl and shift while you press enter) and copy & paste the following commands: cd c:\\windows\\system32 lodctr /R cd c:\\windows\\sysWOW64 lodctr /R WINMGMT.EXE /RESYNCPERF You can now close the command prompt. Open an elevated Powershell prompt (search for powershell and use the same trick as above) and enter the following commands: Get-Service -Name \"pla\" | Restart-Service -Verbose Get-Service -Name \"winmgmt\" | Restart-Service -Force -Verbose Now start HASS.Agent, and the error should be gone. Chances are the satellite service crashed as well, so make sure to go to Configuration -> Satellite Service and click start service .","title":"Performance Counter Debugging"},{"location":"screenshots/","text":"Screenshots What's the point of docs if there aren't any screenshots, right? Main Configuration Quick Actions Satellite Service Sensors Commands Onboarding Notifications WebView Integration Media Player","title":"Screenshots"},{"location":"screenshots/#screenshots","text":"What's the point of docs if there aren't any screenshots, right?","title":"Screenshots"},{"location":"screenshots/#main","text":"","title":"Main"},{"location":"screenshots/#configuration","text":"","title":"Configuration"},{"location":"screenshots/#quick-actions","text":"","title":"Quick Actions"},{"location":"screenshots/#satellite-service","text":"","title":"Satellite Service"},{"location":"screenshots/#sensors","text":"","title":"Sensors"},{"location":"screenshots/#commands","text":"","title":"Commands"},{"location":"screenshots/#onboarding","text":"","title":"Onboarding"},{"location":"screenshots/#notifications","text":"","title":"Notifications"},{"location":"screenshots/#webview","text":"","title":"WebView"},{"location":"screenshots/#integration","text":"","title":"Integration"},{"location":"screenshots/#media-player","text":"","title":"Media Player"},{"location":"translating/","text":"Translating If you want to help out getting HASS.Agent translated into your prefered language, you can easily do so through our POEditor project - no coding knowledge required: POEditor HASS.Agent Project Thanks to POEditor for providing a free opensource license! Instructions Everyone can join and dive right in. Just select the language you want to help with, and register or log in with a listed auth provider. If your language isn't listed, you can click Click here to suggest a new language and select the one you want. When you've joined, you see the list of strings ('values') that need translating. On the left you see the English value: As soon as you go to the next field, you entry is saved. Please take care to copy spaces, periods, etc. Also take note of the linebreaks ( \\r\\n ) and make sure to copy them in the right position. POEditor will help you if you forget something: Just click on your text so it becomes editable, change it and continue with the next one. To make keyboard shortcuts possible, the & sign is added in front of the relevant letter. For instance, in this screenshot: The translation reads &hide . Please add the & in front of the corresponding letter in your translation. If the letter is absent, drop the & instead of assigning it to a random letter (otherwise there might be collisions). Tip (thanks Nejc), you can use Automatic Translation : Then work down the list correcting the entries. Note: these translations aren't very good to use as-is, since they're not context aware. It's just a starting point, you'll still have to go through them. Only use this if you prefer changing to writing. When you're done, please let us know you worked on the translations by sending a notification: Thank you for your time and effort! Translators These are the current translation heroes:","title":"Translating"},{"location":"translating/#translating","text":"If you want to help out getting HASS.Agent translated into your prefered language, you can easily do so through our POEditor project - no coding knowledge required: POEditor HASS.Agent Project Thanks to POEditor for providing a free opensource license!","title":"Translating"},{"location":"translating/#instructions","text":"Everyone can join and dive right in. Just select the language you want to help with, and register or log in with a listed auth provider. If your language isn't listed, you can click Click here to suggest a new language and select the one you want. When you've joined, you see the list of strings ('values') that need translating. On the left you see the English value: As soon as you go to the next field, you entry is saved. Please take care to copy spaces, periods, etc. Also take note of the linebreaks ( \\r\\n ) and make sure to copy them in the right position. POEditor will help you if you forget something: Just click on your text so it becomes editable, change it and continue with the next one. To make keyboard shortcuts possible, the & sign is added in front of the relevant letter. For instance, in this screenshot: The translation reads &hide . Please add the & in front of the corresponding letter in your translation. If the letter is absent, drop the & instead of assigning it to a random letter (otherwise there might be collisions). Tip (thanks Nejc), you can use Automatic Translation : Then work down the list correcting the entries. Note: these translations aren't very good to use as-is, since they're not context aware. It's just a starting point, you'll still have to go through them. Only use this if you prefer changing to writing. When you're done, please let us know you worked on the translations by sending a notification: Thank you for your time and effort!","title":"Instructions"},{"location":"translating/#translators","text":"These are the current translation heroes:","title":"Translators"},{"location":"troubleshooting/","text":"Troubleshooting This page contains references to HASS.Agent problems and solutions that can't easily be fixed code-wise. Debugging If you come across a bug, the best way for the dev to help you if you can provide HASS.Agent's logs. Open the Configuration window, navigate to the Logging page and click Open Logs Folder : In there, sort by date, and open the latest log. You can ignore the files containing restart or update etc. in their name: Attach the content of the log to a GitHub ticket . If the log's not showing anything interesting, you can enable Extended Logging : Restart HASS.Agent and try to reproduce your error. Note: disable this afterwards, as it can make the logfiles grow really large! The application-specific permission settings do not grant Local Activation permission for the COM Server application Problem: HASS.Agent crashes, showing the following log entry: The application-specific permission settings do not grant Local Activation permission for the COM Server application with CLSID {2593F8B9-4EAF-457C-B68A-50F6B8EA6B54} and APPID {15C20B67-12E7-4BB6-92BB-7AFF07997402} Fix: https://www.kapilarya.com/fix-event-10016-error-the-application-specific-permission-settings-do-not-grant-local-activation-permission-in-windows-10 Thanks @hastarin! Running HASS.Agent on x86 OS Problem: HASS.Agent is compiled as x64 and won't run as-is on the x86 build of Windows. Fix: https://github.com/LAB02-Research/HASS.Agent/issues/188#issuecomment-1287777056 Thanks @onexey! The integration isn't publishing through MQTT Problem: even though everything's configured, the integration isn't autodetecting anything through MQTT Fix: make sure that the MQTT user of both HASS.Agent and HA have access to the integration topic: hass.agent/# Thanks @DavidD!","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"This page contains references to HASS.Agent problems and solutions that can't easily be fixed code-wise.","title":"Troubleshooting"},{"location":"troubleshooting/#debugging","text":"If you come across a bug, the best way for the dev to help you if you can provide HASS.Agent's logs. Open the Configuration window, navigate to the Logging page and click Open Logs Folder : In there, sort by date, and open the latest log. You can ignore the files containing restart or update etc. in their name: Attach the content of the log to a GitHub ticket . If the log's not showing anything interesting, you can enable Extended Logging : Restart HASS.Agent and try to reproduce your error. Note: disable this afterwards, as it can make the logfiles grow really large!","title":"Debugging"},{"location":"troubleshooting/#the-application-specific-permission-settings-do-not-grant-local-activation-permission-for-the-com-server-application","text":"Problem: HASS.Agent crashes, showing the following log entry: The application-specific permission settings do not grant Local Activation permission for the COM Server application with CLSID {2593F8B9-4EAF-457C-B68A-50F6B8EA6B54} and APPID {15C20B67-12E7-4BB6-92BB-7AFF07997402} Fix: https://www.kapilarya.com/fix-event-10016-error-the-application-specific-permission-settings-do-not-grant-local-activation-permission-in-windows-10 Thanks @hastarin!","title":"The application-specific permission settings do not grant Local Activation permission for the COM Server application"},{"location":"troubleshooting/#running-hassagent-on-x86-os","text":"Problem: HASS.Agent is compiled as x64 and won't run as-is on the x86 build of Windows. Fix: https://github.com/LAB02-Research/HASS.Agent/issues/188#issuecomment-1287777056 Thanks @onexey!","title":"Running HASS.Agent on x86 OS"},{"location":"troubleshooting/#the-integration-isnt-publishing-through-mqtt","text":"Problem: even though everything's configured, the integration isn't autodetecting anything through MQTT Fix: make sure that the MQTT user of both HASS.Agent and HA have access to the integration topic: hass.agent/# Thanks @DavidD!","title":"The integration isn't publishing through MQTT"},{"location":"updating/","text":"Updating Apart from the automatic update checker, you can check for new updates from the main window or rightclicking the systray icon and selecting 'check for updates'. If there's an update, HASS.Agent can download and install it for you. If you're using the installer, it'll launch HASS.Agent for you when it's done. But if you've updated manually, just doubleclick HASS.Agent.exe .","title":"Updating"},{"location":"updating/#updating","text":"Apart from the automatic update checker, you can check for new updates from the main window or rightclicking the systray icon and selecting 'check for updates'. If there's an update, HASS.Agent can download and install it for you. If you're using the installer, it'll launch HASS.Agent for you when it's done. But if you've updated manually, just doubleclick HASS.Agent.exe .","title":"Updating"},{"location":"usage/","text":"Usage HASS.Agent resides in the system tray. Make sure it's always visible and not hidden in the overflow, otherwise notifications may not get shown. As a tip, you could drag the icon right next to your clock. You can double-click to open the Home screen: From here, you can easily use & configure the various parts of HASS.Agent: 1. Configuration Shows the various application configuration options (as discussed above). 2. Quick Actions Manage your quick action buttons. Use the add new button to create your first action. All entities are dynamically acquired from your Home Aassistant instance. If they won't show up, make sure you've configured 'HASS api' in the configuration screen. Use the 'preview' button to check if it's working for you. 3. Satellite Service From here, you can configure there service's inner workings (MQTT, commands, sensors ..). Since 2022.13, the MQTT configuration you set in HASS.Agent will get applied to the service as well (minus the client ID). 4. Local Sensors Manage which sensors you want to publish to your Home Assistant instance. There are some ready-to-use sensors available, but you can also use your own WMI query. This requires MQTT to be configured . Most sensors are single value, but some are multi-value sensors . These sensors are configured as one entity, but will create multiple entities in Home Assistant. These sensors in turn can have attributes configured to provide even more information. Note: WMI can be a pain, and also make sure you don't update your queries too often. Keep an eye on your CPU load. 5 Commands Manage which commands should be accepted from your Home Assistant instance. Aside from the builtin commands, you can use your own custom command (you can test your command by typing it into a console), or a key command which will emulate key presses. This requires MQTT to be configured. Example configuration of a shutdown command in Home Assistant, used in combination with wake-on-lan : - platform: wake_on_lan name: \"TEST_W10_x64_01\" mac: \"00-00-00-00-00-00\" host: 10.0.0.5 broadcast_address: 10.0.0.255 turn_off: service: switch.turn_on data: entity_id: switch.test_w10_x64_01_cmd_shutdown 6 Commands - Actions Some commands have support for actions . You can use automations to send extra variables along with the command, for instance the exact level to which the volume has to be set, or an URL to open. There's a page dedicated to these: Command Actions Usage & Examples . 7 Commands - Custom Executor Using the Custom Executor command, you can use any application to extend HASS.Agent even more. For instance, python.exe or a custom tool you built. Another powerful tool (tip provided by SankaGrandi ) is NirCmd . Just set nircmdc.exe as the custom executor binary in Configuration and you're ready:","title":"Usage"},{"location":"usage/#usage","text":"HASS.Agent resides in the system tray. Make sure it's always visible and not hidden in the overflow, otherwise notifications may not get shown. As a tip, you could drag the icon right next to your clock. You can double-click to open the Home screen: From here, you can easily use & configure the various parts of HASS.Agent:","title":"Usage"},{"location":"usage/#1-configuration","text":"Shows the various application configuration options (as discussed above).","title":"1. Configuration"},{"location":"usage/#2-quick-actions","text":"Manage your quick action buttons. Use the add new button to create your first action. All entities are dynamically acquired from your Home Aassistant instance. If they won't show up, make sure you've configured 'HASS api' in the configuration screen. Use the 'preview' button to check if it's working for you.","title":"2. Quick Actions"},{"location":"usage/#3-satellite-service","text":"From here, you can configure there service's inner workings (MQTT, commands, sensors ..). Since 2022.13, the MQTT configuration you set in HASS.Agent will get applied to the service as well (minus the client ID).","title":"3. Satellite Service"},{"location":"usage/#4-local-sensors","text":"Manage which sensors you want to publish to your Home Assistant instance. There are some ready-to-use sensors available, but you can also use your own WMI query. This requires MQTT to be configured . Most sensors are single value, but some are multi-value sensors . These sensors are configured as one entity, but will create multiple entities in Home Assistant. These sensors in turn can have attributes configured to provide even more information. Note: WMI can be a pain, and also make sure you don't update your queries too often. Keep an eye on your CPU load.","title":"4. Local Sensors"},{"location":"usage/#5-commands","text":"Manage which commands should be accepted from your Home Assistant instance. Aside from the builtin commands, you can use your own custom command (you can test your command by typing it into a console), or a key command which will emulate key presses. This requires MQTT to be configured. Example configuration of a shutdown command in Home Assistant, used in combination with wake-on-lan : - platform: wake_on_lan name: \"TEST_W10_x64_01\" mac: \"00-00-00-00-00-00\" host: 10.0.0.5 broadcast_address: 10.0.0.255 turn_off: service: switch.turn_on data: entity_id: switch.test_w10_x64_01_cmd_shutdown","title":"5 Commands"},{"location":"usage/#6-commands-actions","text":"Some commands have support for actions . You can use automations to send extra variables along with the command, for instance the exact level to which the volume has to be set, or an URL to open. There's a page dedicated to these: Command Actions Usage & Examples .","title":"6 Commands - Actions"},{"location":"usage/#7-commands-custom-executor","text":"Using the Custom Executor command, you can use any application to extend HASS.Agent even more. For instance, python.exe or a custom tool you built. Another powerful tool (tip provided by SankaGrandi ) is NirCmd . Just set nircmdc.exe as the custom executor binary in Configuration and you're ready:","title":"7 Commands - Custom Executor"},{"location":"wmi-examples/","text":"WMI Examples Below is a list of WMI query examples, provided by the community. Fetch CPU temp from OpenHardwareMonitor Scope: \\\\.\\ROOT\\OpenHardwareMonitor Query: SELECT value FROM Sensor WHERE Name LIKE \"%CPU Core%\" AND SensorType = \"Temperature\" Fetch CPU temp from OpenHardwareMonitor for AMD Scope: \\\\.\\ROOT\\OpenHardwareMonitor Query: SELECT value FROM Sensor WHERE Name LIKE \"%CPU Package%\" AND SensorType = \"Temperature\" Fetch CPU temp from LibreHardwareMonitor Scope: \\\\.\\ROOT\\LibreHardwareMonitor Query: SELECT value FROM Sensor WHERE Name LIKE \"%CPU Core%\" AND SensorType = \"Temperature\" Fetch CPU temp from LibreHardwareMonitor for AMD Scope: \\\\.\\ROOT\\LibreHardwareMonitor Query: SELECT value FROM Sensor WHERE Name LIKE \"%CPU Package%\" AND SensorType = \"Temperature\" Fetch GPU temp from LibreHardwareMonitor Scope: \\\\.\\ROOT\\LibreHardwareMonitor Query: SELECT value FROM Sensor WHERE Name LIKE \"%GPU Core%\" AND SensorType = \"Temperature\" Fetch CPU temp from AIDA64 Scope: \\\\.\\ROOT\\WMI Query: SELECT Value FROM AIDA64_SensorValues WHERE ID=\"TGPU1\" Fetch USB device (dis)connected Query: SELECT DeviceID FROM Win32_USBHub WHERE DeviceID LIKE \"USB\\\\VID_19F7&PID_0003%\" Check for multiple active procsses Query: Select * from Win32_Process Where Name = \u2018bf2042.exe\u2019 OR Name = \u2018HorizonZeroDawn.exe\u2019 OR Name = \u2018HaloInfinite.exe\u2019 OR Name = \u2018Cyberpunk2077.exe\u2019 OR Name = \u2018BlackOpsColdWar.exe\u2019 OR Name = \u2018ModernWarfare.exe\u2019 OR Name = \u2018GoW.exe\u2019 OR Name = \u2018reactivedrop.exe\u2019 Thanks stephack More examples can be found in the hass-workstation-server documentation .","title":"WMI Examples"},{"location":"wmi-examples/#wmi-examples","text":"Below is a list of WMI query examples, provided by the community.","title":"WMI Examples"},{"location":"wmi-examples/#fetch-cpu-temp-from-openhardwaremonitor","text":"Scope: \\\\.\\ROOT\\OpenHardwareMonitor Query: SELECT value FROM Sensor WHERE Name LIKE \"%CPU Core%\" AND SensorType = \"Temperature\"","title":"Fetch CPU temp from OpenHardwareMonitor"},{"location":"wmi-examples/#fetch-cpu-temp-from-openhardwaremonitor-for-amd","text":"Scope: \\\\.\\ROOT\\OpenHardwareMonitor Query: SELECT value FROM Sensor WHERE Name LIKE \"%CPU Package%\" AND SensorType = \"Temperature\"","title":"Fetch CPU temp from OpenHardwareMonitor for AMD"},{"location":"wmi-examples/#fetch-cpu-temp-from-librehardwaremonitor","text":"Scope: \\\\.\\ROOT\\LibreHardwareMonitor Query: SELECT value FROM Sensor WHERE Name LIKE \"%CPU Core%\" AND SensorType = \"Temperature\"","title":"Fetch CPU temp from LibreHardwareMonitor"},{"location":"wmi-examples/#fetch-cpu-temp-from-librehardwaremonitor-for-amd","text":"Scope: \\\\.\\ROOT\\LibreHardwareMonitor Query: SELECT value FROM Sensor WHERE Name LIKE \"%CPU Package%\" AND SensorType = \"Temperature\"","title":"Fetch CPU temp from LibreHardwareMonitor for AMD"},{"location":"wmi-examples/#fetch-gpu-temp-from-librehardwaremonitor","text":"Scope: \\\\.\\ROOT\\LibreHardwareMonitor Query: SELECT value FROM Sensor WHERE Name LIKE \"%GPU Core%\" AND SensorType = \"Temperature\"","title":"Fetch GPU temp from LibreHardwareMonitor"},{"location":"wmi-examples/#fetch-cpu-temp-from-aida64","text":"Scope: \\\\.\\ROOT\\WMI Query: SELECT Value FROM AIDA64_SensorValues WHERE ID=\"TGPU1\"","title":"Fetch CPU temp from AIDA64"},{"location":"wmi-examples/#fetch-usb-device-disconnected","text":"Query: SELECT DeviceID FROM Win32_USBHub WHERE DeviceID LIKE \"USB\\\\VID_19F7&PID_0003%\"","title":"Fetch USB device (dis)connected"},{"location":"wmi-examples/#check-for-multiple-active-procsses","text":"Query: Select * from Win32_Process Where Name = \u2018bf2042.exe\u2019 OR Name = \u2018HorizonZeroDawn.exe\u2019 OR Name = \u2018HaloInfinite.exe\u2019 OR Name = \u2018Cyberpunk2077.exe\u2019 OR Name = \u2018BlackOpsColdWar.exe\u2019 OR Name = \u2018ModernWarfare.exe\u2019 OR Name = \u2018GoW.exe\u2019 OR Name = \u2018reactivedrop.exe\u2019 Thanks stephack More examples can be found in the hass-workstation-server documentation .","title":"Check for multiple active procsses"},{"location":"commands/actions-usage-and-examples/","text":"Actions Usage and Examples Normal commands contain a predefined value, which you can execute by toggling the command in Home Assistant. The limitation here is that you can't pass variables, say if you'd want to set the volume to a specific volume. Your only options would be volume up, volume down or make 100 buttons for every step.. By using actions , you can pass additional variables when launching your command through an automation or script. The name action comes from the fact that HASS.Agent uses HA's built-in action MQTT topic . Not all commands support actions . For instance, there's no point passing an action to a Shutdown command (come to think of it, there is: the amount of seconds to wait before shutting down, but you get the idea). At the time of writing, these commands support actions: Custom , Custom Executor , Launch Url and Powershell You can easily see the current supported commands through the interface, by looking at this column: To use actions, you need to create an automation or script that publishes to the command's action topic. HASS.Agent will then run the command, passing your variables to it. This is an example automation, which uses the state of an input_boolean to trigger (I use that for testing). It will launch BowPad , my favorite notepad replacement. Notice the escaped quotes: \\\" and escaped backslashes: \\\\ - it's your responsibility to get those right! - alias: tests - custom command with action description: \"Test custom command with an action\" initial_state: true mode: single trigger: platform: state entity_id: input_boolean.test_custom_command_with_action to: \"on\" action: - service: mqtt.publish data: topic: \"homeassistant/switch/test-vm/test-vm_custom/action\" payload: \"\\\"C:\\\\Program Files\\\\BowPad\\\\BowPad.exe\\\"\" - delay: seconds: 2 - service: input_boolean.turn_off data: entity_id: input_boolean.test_custom_command_with_action This is the corresponding HASS.Agent configuration: As you can see, I've left the command part empty, since we're sending that from Home Assistant. Another option is to add your command to HASS.Agent, and then send additional parameters from Home Assistant. To stick with the above example, in this case I would configure BowPad here: And then use the automation to launch a text file in BowPad: - alias: tests - custom command with action description: \"Test custom command with an action\" initial_state: true mode: single trigger: platform: state entity_id: input_boolean.test_custom_command_with_action to: \"on\" action: - service: mqtt.publish data: topic: \"homeassistant/switch/test-vm/test-vm_custom/action\" payload: \"\\\"D:\\\\Staging\\\\TestFiles\\\\test_file.txt\\\"\" - delay: seconds: 2 - service: input_boolean.turn_off data: entity_id: input_boolean.test_custom_command_with_action To help you find the correct topic, there's a show mqtt action topic button when you've selected a supported command: This will show you the exact topic, and the option to copy the value to your clipboard: Make sure you've entered the correct type and name of your command before copying this! If you've built a great command action, please share! You can mail it to lab02research@outlook.com or tell me on Discord , and I'll add it to this page for everlasting fame \ud83d\ude0e","title":"Actions Usage and Examples"},{"location":"commands/actions-usage-and-examples/#actions-usage-and-examples","text":"Normal commands contain a predefined value, which you can execute by toggling the command in Home Assistant. The limitation here is that you can't pass variables, say if you'd want to set the volume to a specific volume. Your only options would be volume up, volume down or make 100 buttons for every step.. By using actions , you can pass additional variables when launching your command through an automation or script. The name action comes from the fact that HASS.Agent uses HA's built-in action MQTT topic . Not all commands support actions . For instance, there's no point passing an action to a Shutdown command (come to think of it, there is: the amount of seconds to wait before shutting down, but you get the idea). At the time of writing, these commands support actions: Custom , Custom Executor , Launch Url and Powershell You can easily see the current supported commands through the interface, by looking at this column: To use actions, you need to create an automation or script that publishes to the command's action topic. HASS.Agent will then run the command, passing your variables to it. This is an example automation, which uses the state of an input_boolean to trigger (I use that for testing). It will launch BowPad , my favorite notepad replacement. Notice the escaped quotes: \\\" and escaped backslashes: \\\\ - it's your responsibility to get those right! - alias: tests - custom command with action description: \"Test custom command with an action\" initial_state: true mode: single trigger: platform: state entity_id: input_boolean.test_custom_command_with_action to: \"on\" action: - service: mqtt.publish data: topic: \"homeassistant/switch/test-vm/test-vm_custom/action\" payload: \"\\\"C:\\\\Program Files\\\\BowPad\\\\BowPad.exe\\\"\" - delay: seconds: 2 - service: input_boolean.turn_off data: entity_id: input_boolean.test_custom_command_with_action This is the corresponding HASS.Agent configuration: As you can see, I've left the command part empty, since we're sending that from Home Assistant. Another option is to add your command to HASS.Agent, and then send additional parameters from Home Assistant. To stick with the above example, in this case I would configure BowPad here: And then use the automation to launch a text file in BowPad: - alias: tests - custom command with action description: \"Test custom command with an action\" initial_state: true mode: single trigger: platform: state entity_id: input_boolean.test_custom_command_with_action to: \"on\" action: - service: mqtt.publish data: topic: \"homeassistant/switch/test-vm/test-vm_custom/action\" payload: \"\\\"D:\\\\Staging\\\\TestFiles\\\\test_file.txt\\\"\" - delay: seconds: 2 - service: input_boolean.turn_off data: entity_id: input_boolean.test_custom_command_with_action To help you find the correct topic, there's a show mqtt action topic button when you've selected a supported command: This will show you the exact topic, and the option to copy the value to your clipboard: Make sure you've entered the correct type and name of your command before copying this! If you've built a great command action, please share! You can mail it to lab02research@outlook.com or tell me on Discord , and I'll add it to this page for everlasting fame \ud83d\ude0e","title":"Actions Usage and Examples"},{"location":"commands/command-basics/","text":"Command Basics This page contains the basics behind HASS.Agent's commands: what they are, how they function and how you can use them. We'll be using the abbreviation HA for Home Assistant, so when HA is mentioned, it refers to your Home Assistant instance. You can use Home Assistant's glossary to look up words you don't know yet. Intro From within HASS.Agent you can create commands . These are entities that will be automatically added to HA. You can use these commands to control your PC from within HA. Tip: if you want to get data from your PC to HA, you can use HASS.Agent's sensors. Commands can be different entity types: Button Light Lock Siren Switch Your command is always handled the same way by HASS.Agent, regardless of the type your selection. The type is only relevant for HA: it determines as what type it'll show up. But they all have the same functionality. Creation Throughout this page, we'll be working with an example command: the Lock command. This can be easily tested (your session will get locked, hard to miss!) without accidentally shutting down your pc or something like that. First, open HASS.Agent's main window, and click the commands button: Note: Don't be alarmed if the system status for commands says stopped : that's just because you probably don't have any commands configured yet. You'll be shown a (possibly empty) command list: Click the add new button to begin creating a new command. Tip: want to modify an existing command? Just doubleclick it! You can see the different command types on the left. Select Lock to begin configuring your lock command: We'll pick Button as our entity type. HASS.Agent will try to generate a name for you, in this case test-vm_lock , but feel free to change that to anything you like. The names need to be unique! That's why it's a good idea to start with the name of your pc. That way, if you install HASS.Agent on multiple pcs, they won't clash. If you like, you can click through the command types on the left, and read their descriptions. This way you'll get a feeling for what's possible. Missing a command? Open a ticket on GitHub with your idea! When you're ready, click the store command button to continue. At this point, your command isn't yet sent to HA, and it isn't even stored locally on HASS.Agent. So if you made a naming or type mistake, just doubleclick your command to edit. Your commands config window will now have at least one command: The columns on the right indicate action and low integrity , those are a bit more advanced and aren't relevant now. Satisfied with your new command? Go ahead and click store and activate commands . Your command is now sent to HA, and stored locally. Awesome! Usage Let's look up our new command in HA. There are multiple ways to do this, but for now we'll look up our pc (an easy way to see all sensors/commands). Go to your HA instance, and press c . This will show the search bar. Now type devices and press enter . In the Search devices bar that's shown on top, type the name of your HASS.Agent instance: Tip: you can always find (and change) the name of your HASS.Agent instance by clicking on the configuration button in the main window. If your HASS.Agent is properly configured, your pc will now show as a result. You can easily verify it's a HASS.Agent instance by confirming it says LAB02 Research under the Manufacturer column. Click on your pc to see what commands and sensors are configured. It should at least show our new command: If you can't find your device, or can't find your command, something's off in your HASS.Agent configuration. Feel free to post your problem on the HA forums . The more info you can provide, the better, but if you don't know how don't worry - we'll help. Let's go nuts and just click it to see if it works. Did your pc get locked? Great success! If it didn't, please refer to the note above. Implementation Alright, so now you have a working button. There are roughly two ways you can use it: add it to your dashboard, so you can manually click it, or add it to an automation or script so HA will trigger it for you. Adding it to your dashboard is easy. Just click on the ADD TO DASHBOARD text: You can now choose which dashboard. When you click NEXT , HA will suggest a card for you. You can either pick a different one, or click ADD TO DASHBOARD to add it. When you go to your dashboard, it should now show your button: Go ahead and click it, to make sure it works :) Let's now add it to an automation. Go back to your device's page, and on the right, click on the + sign next to Automations : You can choose what type of automation you want. Let's pick When something is triggered... , click the button below it. When you scroll down, in the Actions section, you'll see your button added: Configurating automations is beyond the scope of this manual, and there are lots of good tutorials online. Just remember that you can use this action to trigger your command! YAML If you're into yaml, you can also easily trigger your command from there. Here's an easy example automation: - alias: tests - trigger hassagent lock pc initial_state: true mode: single trigger: platform: state entity_id: input_boolean.test_vm_lock_pc to: \"on\" action: - service: button.press target: entity_id: button.test_vm_lock - delay: seconds: 2 - service: input_boolean.turn_off data: entity_id: input_boolean.test_vm_lock_pc The trigger is when an input_boolean gets enabled. This is pretty useless, but it allows for easy testing. When the input_boolean triggers (its state changes to on ), HA will trigger our button: - service: button.press target: entity_id: button.test_vm_lock The service is what you want HA to do: press our button. The entity specifies which button: our test_vm_lock one. If you configured your command to be something else than a button, you need to set the service accordingly. If for instance you made it a switch, you'd trigger it like this: - service: switch.turn_on target: entity_id: switch.test_vm_lock","title":"Command Basics"},{"location":"commands/command-basics/#command-basics","text":"This page contains the basics behind HASS.Agent's commands: what they are, how they function and how you can use them. We'll be using the abbreviation HA for Home Assistant, so when HA is mentioned, it refers to your Home Assistant instance. You can use Home Assistant's glossary to look up words you don't know yet.","title":"Command Basics"},{"location":"commands/command-basics/#intro","text":"From within HASS.Agent you can create commands . These are entities that will be automatically added to HA. You can use these commands to control your PC from within HA. Tip: if you want to get data from your PC to HA, you can use HASS.Agent's sensors. Commands can be different entity types: Button Light Lock Siren Switch Your command is always handled the same way by HASS.Agent, regardless of the type your selection. The type is only relevant for HA: it determines as what type it'll show up. But they all have the same functionality.","title":"Intro"},{"location":"commands/command-basics/#creation","text":"Throughout this page, we'll be working with an example command: the Lock command. This can be easily tested (your session will get locked, hard to miss!) without accidentally shutting down your pc or something like that. First, open HASS.Agent's main window, and click the commands button: Note: Don't be alarmed if the system status for commands says stopped : that's just because you probably don't have any commands configured yet. You'll be shown a (possibly empty) command list: Click the add new button to begin creating a new command. Tip: want to modify an existing command? Just doubleclick it! You can see the different command types on the left. Select Lock to begin configuring your lock command: We'll pick Button as our entity type. HASS.Agent will try to generate a name for you, in this case test-vm_lock , but feel free to change that to anything you like. The names need to be unique! That's why it's a good idea to start with the name of your pc. That way, if you install HASS.Agent on multiple pcs, they won't clash. If you like, you can click through the command types on the left, and read their descriptions. This way you'll get a feeling for what's possible. Missing a command? Open a ticket on GitHub with your idea! When you're ready, click the store command button to continue. At this point, your command isn't yet sent to HA, and it isn't even stored locally on HASS.Agent. So if you made a naming or type mistake, just doubleclick your command to edit. Your commands config window will now have at least one command: The columns on the right indicate action and low integrity , those are a bit more advanced and aren't relevant now. Satisfied with your new command? Go ahead and click store and activate commands . Your command is now sent to HA, and stored locally. Awesome!","title":"Creation"},{"location":"commands/command-basics/#usage","text":"Let's look up our new command in HA. There are multiple ways to do this, but for now we'll look up our pc (an easy way to see all sensors/commands). Go to your HA instance, and press c . This will show the search bar. Now type devices and press enter . In the Search devices bar that's shown on top, type the name of your HASS.Agent instance: Tip: you can always find (and change) the name of your HASS.Agent instance by clicking on the configuration button in the main window. If your HASS.Agent is properly configured, your pc will now show as a result. You can easily verify it's a HASS.Agent instance by confirming it says LAB02 Research under the Manufacturer column. Click on your pc to see what commands and sensors are configured. It should at least show our new command: If you can't find your device, or can't find your command, something's off in your HASS.Agent configuration. Feel free to post your problem on the HA forums . The more info you can provide, the better, but if you don't know how don't worry - we'll help. Let's go nuts and just click it to see if it works. Did your pc get locked? Great success! If it didn't, please refer to the note above.","title":"Usage"},{"location":"commands/command-basics/#implementation","text":"Alright, so now you have a working button. There are roughly two ways you can use it: add it to your dashboard, so you can manually click it, or add it to an automation or script so HA will trigger it for you. Adding it to your dashboard is easy. Just click on the ADD TO DASHBOARD text: You can now choose which dashboard. When you click NEXT , HA will suggest a card for you. You can either pick a different one, or click ADD TO DASHBOARD to add it. When you go to your dashboard, it should now show your button: Go ahead and click it, to make sure it works :) Let's now add it to an automation. Go back to your device's page, and on the right, click on the + sign next to Automations : You can choose what type of automation you want. Let's pick When something is triggered... , click the button below it. When you scroll down, in the Actions section, you'll see your button added: Configurating automations is beyond the scope of this manual, and there are lots of good tutorials online. Just remember that you can use this action to trigger your command!","title":"Implementation"},{"location":"commands/command-basics/#yaml","text":"If you're into yaml, you can also easily trigger your command from there. Here's an easy example automation: - alias: tests - trigger hassagent lock pc initial_state: true mode: single trigger: platform: state entity_id: input_boolean.test_vm_lock_pc to: \"on\" action: - service: button.press target: entity_id: button.test_vm_lock - delay: seconds: 2 - service: input_boolean.turn_off data: entity_id: input_boolean.test_vm_lock_pc The trigger is when an input_boolean gets enabled. This is pretty useless, but it allows for easy testing. When the input_boolean triggers (its state changes to on ), HA will trigger our button: - service: button.press target: entity_id: button.test_vm_lock The service is what you want HA to do: press our button. The entity specifies which button: our test_vm_lock one. If you configured your command to be something else than a button, you need to set the service accordingly. If for instance you made it a switch, you'd trigger it like this: - service: switch.turn_on target: entity_id: switch.test_vm_lock","title":"YAML"},{"location":"commands/elevated-custom-command/","text":"Elevated Custom Command Introduction There are situations where you'd want to launch a CustomCommand with elevated privileges, for instance if the application requires it. HASS.Agent can't natively do that (as a security measure), but you can use Windows' Scheduled Tasks instead. In short, scheduled tasks are a way to have Windows perform certain tasks on predetermined times or events. An example could be open notepad when I log into Windows or run this script at 5AM every first of the month . Creating the Scheduled Task You can open the scheduler by searching for Task Scheduler from the task menu, or by executing taskschd.msc : Click on Task Scheduler Library on the left to view a list of your current tasks (there are also subfolders, but the root folder usually contains the interesting ones). To create a new task, click on Create Task on the right pane. Give it an appropriate name, describing what it does. Enable Run with highest privileges to make sure it can run elevated: Tip: if it's a script (something that closes itself when done), you can check Hidden to have it run in the background, no interface. The Trigger tab allows you to configure moments or events on when to run this task, but we'll do that through HASS.Agent, so you can skip that part. Click on the Actions tab -> New and enter the application you want to run: Tip: it's always best to provide the Start in path as well. When you enter it like this, your scheduled task will remaing in Running state until you close the application. You'll be able to start it once. If you just want to start your application, and then stop the scheduled task, you can use cmd as the program, and /C \"C:\\Windows\\notepad.exe\" as the arguments. Just replace C:\\Windows.notepad with your app, leave the /C : Note: if you're running a script, something without an interface, you don't need the cmd /C trick. Click OK to store your action. Go to the Conditions tab, and decide whether you want to be able to launch the task when on battery (only relevant for a laptop or if you use an UPS): Go to the Settings tab, and configure as follows (of course, feel free to change as you see fit): Click OK to store your scheduled task. You might be asked for your credentials, since we asked it to be elevated. Creating the Custom Command Close the Task Scheduler and open HASS.Agent. In the main window, click Commands -> Add New . Select the Custom type in the list. In the command field, enter the following with your task's name, in my case: schtasks /Run /TN \"HASS.Agent Notepad Elevated\" Replace HASS.Agent Notepad Elevated with the name you gave your task. Should look like this: Click Store Command -> Store and Activate Commands . Testing Go to your device's page in Home Assistant, and click on your new command. The application you chose should now launch, elevated!","title":"Elevated Custom Command"},{"location":"commands/elevated-custom-command/#elevated-custom-command","text":"","title":"Elevated Custom Command"},{"location":"commands/elevated-custom-command/#introduction","text":"There are situations where you'd want to launch a CustomCommand with elevated privileges, for instance if the application requires it. HASS.Agent can't natively do that (as a security measure), but you can use Windows' Scheduled Tasks instead. In short, scheduled tasks are a way to have Windows perform certain tasks on predetermined times or events. An example could be open notepad when I log into Windows or run this script at 5AM every first of the month .","title":"Introduction"},{"location":"commands/elevated-custom-command/#creating-the-scheduled-task","text":"You can open the scheduler by searching for Task Scheduler from the task menu, or by executing taskschd.msc : Click on Task Scheduler Library on the left to view a list of your current tasks (there are also subfolders, but the root folder usually contains the interesting ones). To create a new task, click on Create Task on the right pane. Give it an appropriate name, describing what it does. Enable Run with highest privileges to make sure it can run elevated: Tip: if it's a script (something that closes itself when done), you can check Hidden to have it run in the background, no interface. The Trigger tab allows you to configure moments or events on when to run this task, but we'll do that through HASS.Agent, so you can skip that part. Click on the Actions tab -> New and enter the application you want to run: Tip: it's always best to provide the Start in path as well. When you enter it like this, your scheduled task will remaing in Running state until you close the application. You'll be able to start it once. If you just want to start your application, and then stop the scheduled task, you can use cmd as the program, and /C \"C:\\Windows\\notepad.exe\" as the arguments. Just replace C:\\Windows.notepad with your app, leave the /C : Note: if you're running a script, something without an interface, you don't need the cmd /C trick. Click OK to store your action. Go to the Conditions tab, and decide whether you want to be able to launch the task when on battery (only relevant for a laptop or if you use an UPS): Go to the Settings tab, and configure as follows (of course, feel free to change as you see fit): Click OK to store your scheduled task. You might be asked for your credentials, since we asked it to be elevated.","title":"Creating the Scheduled Task"},{"location":"commands/elevated-custom-command/#creating-the-custom-command","text":"Close the Task Scheduler and open HASS.Agent. In the main window, click Commands -> Add New . Select the Custom type in the list. In the command field, enter the following with your task's name, in my case: schtasks /Run /TN \"HASS.Agent Notepad Elevated\" Replace HASS.Agent Notepad Elevated with the name you gave your task. Should look like this: Click Store Command -> Store and Activate Commands .","title":"Creating the Custom Command"},{"location":"commands/elevated-custom-command/#testing","text":"Go to your device's page in Home Assistant, and click on your new command. The application you chose should now launch, elevated!","title":"Testing"},{"location":"development/commands/","text":"Commands General Commands can be found in the HASS.Agent.Shared project, under HomeAssistant\\Commands . They're derived from AbstractCommand (found under Models\\HomeAssistant ), which itself is derived from AbstractDiscoverable . There are a few 'base' commands, currently: CustomCommand InternalCommand KeyCommand MultipleKeysCommand PowershellCommand Which in turn have derived commands in their respective subfolders. Commands have the following functions: Constructor: initialize the command which its name, entity type, id (keep default) and configuration GetAutoDiscoveryConfig() : returns its discovery model to send to Home Assistant TurnOn() : execute the command TurnOnWithAction() : only if the command supports actions , executes the command with the user provided action GetState() : returns its current state (on/off) TurnOff : turns the command off New Command When you're adding a new command, there are a few steps to follow. There are quite a few steps - feel free to just add your command to HASS.Agent.Shared -> HomeAssistant\\Commands , and then ask the dev to test and integrate it for you. Creating the command itself is the most helpful part! Decide if there's a command which you can use as a base, or create a new type Use a clear name, and make it as general as possible (so don't make a LaunchNotepad command) Open HASS.Agent.Shared -> Enums\\CommandType.cs and add your new command Don't localize your description, that'll be done in the final release by the dev Open HASS.Agent -> Commands\\CommandsManager.cs and add your command to LoadCommandInfo() Again, don't localize, just use a regular string instead of Languages_* Follow the steps in the Storage section below If your command requires special configuration: Open the code of the form Forms\\Commands\\CommandsMod.cs Modify LoadCommand() , BtnStore_Click() , SetType() as needed Add a Set{commandname}Gui() function to create the interface you need Storage Commands are stored and retreived by the application using them, so either HASS.Agent or HASS.Agent.Satellite.Service . It's handled by StoredCommands.cs (found under Settings ). When stored, a command's type is ConfiguredCommand . When loaded in memory, its type is AbstractCommand . To accomodate this, the functions ConvertConfiguredToAbstract() and ConvertAbstractToConfigured() were added. If you created a derived command , so no new base type, just add your command to ConvertConfiguredToAbstract() , using the right derived command type. If you added a new base type, add it to ConvertAbstractToConfigured() . First add storage capabilities for your command to HASS.Agent to test. When it's working properly, add it to HASS.Agent.Satellite.Service 's StoredCommands.cs as well.","title":"Commands"},{"location":"development/commands/#commands","text":"","title":"Commands"},{"location":"development/commands/#general","text":"Commands can be found in the HASS.Agent.Shared project, under HomeAssistant\\Commands . They're derived from AbstractCommand (found under Models\\HomeAssistant ), which itself is derived from AbstractDiscoverable . There are a few 'base' commands, currently: CustomCommand InternalCommand KeyCommand MultipleKeysCommand PowershellCommand Which in turn have derived commands in their respective subfolders. Commands have the following functions: Constructor: initialize the command which its name, entity type, id (keep default) and configuration GetAutoDiscoveryConfig() : returns its discovery model to send to Home Assistant TurnOn() : execute the command TurnOnWithAction() : only if the command supports actions , executes the command with the user provided action GetState() : returns its current state (on/off) TurnOff : turns the command off","title":"General"},{"location":"development/commands/#new-command","text":"When you're adding a new command, there are a few steps to follow. There are quite a few steps - feel free to just add your command to HASS.Agent.Shared -> HomeAssistant\\Commands , and then ask the dev to test and integrate it for you. Creating the command itself is the most helpful part! Decide if there's a command which you can use as a base, or create a new type Use a clear name, and make it as general as possible (so don't make a LaunchNotepad command) Open HASS.Agent.Shared -> Enums\\CommandType.cs and add your new command Don't localize your description, that'll be done in the final release by the dev Open HASS.Agent -> Commands\\CommandsManager.cs and add your command to LoadCommandInfo() Again, don't localize, just use a regular string instead of Languages_* Follow the steps in the Storage section below If your command requires special configuration: Open the code of the form Forms\\Commands\\CommandsMod.cs Modify LoadCommand() , BtnStore_Click() , SetType() as needed Add a Set{commandname}Gui() function to create the interface you need","title":"New Command"},{"location":"development/commands/#storage","text":"Commands are stored and retreived by the application using them, so either HASS.Agent or HASS.Agent.Satellite.Service . It's handled by StoredCommands.cs (found under Settings ). When stored, a command's type is ConfiguredCommand . When loaded in memory, its type is AbstractCommand . To accomodate this, the functions ConvertConfiguredToAbstract() and ConvertAbstractToConfigured() were added. If you created a derived command , so no new base type, just add your command to ConvertConfiguredToAbstract() , using the right derived command type. If you added a new base type, add it to ConvertAbstractToConfigured() . First add storage capabilities for your command to HASS.Agent to test. When it's working properly, add it to HASS.Agent.Satellite.Service 's StoredCommands.cs as well.","title":"Storage"},{"location":"development/introduction/","text":"Introduction These pages are meant as a quick introduction into how HASS.Agent is developed, in case you want to help out (or use code for your own projects). Use the subpages on the left to learn more about specific parts. Do not use this guide if you just want to manually build and use HASS.Agent. Please see these instructions on how to do that. Overview All development is done in the HASS.Agent.Staging repo. It contains a solution with all three sub-projects: Project Description HASS.Agent Main client, containing the UI, runs in userspace, by default without elevation HASS.Agent.Satellite.Service Windows client, runs under SYSTEM account HASS.Agent.Shared Library, published as a nuget, contains all commands, sensors, shared functions and enums Its purpose is to more easily develop beta releases, as the shared library will be instantly compiled and referenced. General Notes 1) I'm a big fan of the KISS principle , especially since it's a project I maintain in my freetime. If I don't need a design pattern, I don't use it. By keeping it simple, I can easily tinker with whatever I want, as fast as possible. However, if you do want to build something complex because that's how you roll, knock yourself out - just give me a heads up. 2) Make sure any regular instance of HASS.Agent is shut down. If you're just planning to tinker with HASS.Agent, you can leave the regular service active, otherwise turn it off as well as the named pipe will be in use. Start the beta service with elevated privileges. 3) It's best to have enable extended logging enabled, which will also reflect on the satellite service (as long as it's started in console mode instead of service mode). But that'll also generate false positives, so primarily focus on the issue at hand. 4) A lot has been done for localization and screenreader support. Don't bother about either during beta development; just use regular strings and mess about the UI as you like. The dev will implement it for the release candidate and make sure it's done in a uniform matter.","title":"Introduction"},{"location":"development/introduction/#introduction","text":"These pages are meant as a quick introduction into how HASS.Agent is developed, in case you want to help out (or use code for your own projects). Use the subpages on the left to learn more about specific parts. Do not use this guide if you just want to manually build and use HASS.Agent. Please see these instructions on how to do that.","title":"Introduction"},{"location":"development/introduction/#overview","text":"All development is done in the HASS.Agent.Staging repo. It contains a solution with all three sub-projects: Project Description HASS.Agent Main client, containing the UI, runs in userspace, by default without elevation HASS.Agent.Satellite.Service Windows client, runs under SYSTEM account HASS.Agent.Shared Library, published as a nuget, contains all commands, sensors, shared functions and enums Its purpose is to more easily develop beta releases, as the shared library will be instantly compiled and referenced.","title":"Overview"},{"location":"development/introduction/#general-notes","text":"1) I'm a big fan of the KISS principle , especially since it's a project I maintain in my freetime. If I don't need a design pattern, I don't use it. By keeping it simple, I can easily tinker with whatever I want, as fast as possible. However, if you do want to build something complex because that's how you roll, knock yourself out - just give me a heads up. 2) Make sure any regular instance of HASS.Agent is shut down. If you're just planning to tinker with HASS.Agent, you can leave the regular service active, otherwise turn it off as well as the named pipe will be in use. Start the beta service with elevated privileges. 3) It's best to have enable extended logging enabled, which will also reflect on the satellite service (as long as it's started in console mode instead of service mode). But that'll also generate false positives, so primarily focus on the issue at hand. 4) A lot has been done for localization and screenreader support. Don't bother about either during beta development; just use regular strings and mess about the UI as you like. The dev will implement it for the release candidate and make sure it's done in a uniform matter.","title":"General Notes"},{"location":"development/sensors/","text":"Sensors General Sensors can be found in the HASS.Agent.Shared project, under HomeAssistant\\Sensors . They're derived from AbstractSingleValueSensor and AbstractMultiValueSensor (found under Models\\HomeAssistant ), which themselves are derived from AbstractDiscoverable . There are a few 'base' sensors, currently: PerformanceCounterSensor WmiQuerySensor Which in turn have derived sensors in their respective subfolders. Most sensors however are SingleValue sensors (ie. they return a single value), found under HomeAssistant\\Sensors\\SingleValue . Another possibility is a MultiValue sensors (ie. they return 2:n values), found under HomeAssistant\\Sensors\\MultiValue . MultiValue sensors consist of sub-sensors, which can have the following types: DataTypeBoolSensor DataTypeDoubleSensor DataTypeIntSensor DataTypeStringSensor Sensors have the following functions: Constructor: initialize the sensor which its name, entity type, id (keep default) and configuration GetAutoDiscoveryConfig() : returns its discovery model to send to Home Assistant GetState() : returns its current state UpdateSensorValues() : updates the values of a multivalue sensor's sensors New Sensor When you're adding a new sensor, there are a few steps to follow. There are quite a few steps - feel free to just add your sensor to HASS.Agent.Shared -> HomeAssistant\\Sensors , and then ask the dev to test and integrate it for you. Creating the sensor itself is the most helpful part! Decide if there's a sensor which you can use as a base, or create a new type using AbstractSingleValueSensor or AbstractMultiValueSensor Use a clear name, and make it as exact as possible Open HASS.Agent.Shared -> Enums\\SensorType.cs and add your new sensor Don't localize your description, that'll be done in the final release by the dev Open HASS.Agent -> Sensors\\SensorsManager.cs and add your sensor to LoadSensorInfo() Again, don't localize, just use a regular string instead of Languages_* Follow the steps in the Storage section below If your sensor requires special configuration: Open the code of the form Forms\\Sensors\\SensorsMod.cs Modify LoadSensor() , BtnStore_Click() , SetType() as needed Add a Set{sensorname}Gui() function to create the interface you need Storage Sensors are stored and retreived by the application using them, so either HASS.Agent or HASS.Agent.Satellite.Service . It's handled by StoredSensors.cs (found under Settings ). When stored, a sensor's type is ConfiguredSensor . When loaded in memory, its type is AbstractSingleValueSensor or AbstractMultiValueSensor . To accomodate this, the functions ConvertConfiguredToAbstractSingleValue() , ConvertConfiguredToAbstractMultiValue() , ConvertAbstractSingleValueToConfigured() and ConvertAbstractMultiValueToConfigured() were added. If you created a derived sensor , so no new base type, just add your sensor to ConvertConfiguredToAbstractSingleValue() or ConvertConfiguredToAbstractMultiValue() , using the right derived sensor type. If you added a new base type, add it to ConvertAbstractSingleValueToConfigured() or ConvertAbstractMultiValueToConfigured() . First add storage capabilities for your sensor to HASS.Agent to test. When it's working properly, add it to HASS.Agent.Satellite.Service 's StoredSensors.cs as well.","title":"Sensors"},{"location":"development/sensors/#sensors","text":"","title":"Sensors"},{"location":"development/sensors/#general","text":"Sensors can be found in the HASS.Agent.Shared project, under HomeAssistant\\Sensors . They're derived from AbstractSingleValueSensor and AbstractMultiValueSensor (found under Models\\HomeAssistant ), which themselves are derived from AbstractDiscoverable . There are a few 'base' sensors, currently: PerformanceCounterSensor WmiQuerySensor Which in turn have derived sensors in their respective subfolders. Most sensors however are SingleValue sensors (ie. they return a single value), found under HomeAssistant\\Sensors\\SingleValue . Another possibility is a MultiValue sensors (ie. they return 2:n values), found under HomeAssistant\\Sensors\\MultiValue . MultiValue sensors consist of sub-sensors, which can have the following types: DataTypeBoolSensor DataTypeDoubleSensor DataTypeIntSensor DataTypeStringSensor Sensors have the following functions: Constructor: initialize the sensor which its name, entity type, id (keep default) and configuration GetAutoDiscoveryConfig() : returns its discovery model to send to Home Assistant GetState() : returns its current state UpdateSensorValues() : updates the values of a multivalue sensor's sensors","title":"General"},{"location":"development/sensors/#new-sensor","text":"When you're adding a new sensor, there are a few steps to follow. There are quite a few steps - feel free to just add your sensor to HASS.Agent.Shared -> HomeAssistant\\Sensors , and then ask the dev to test and integrate it for you. Creating the sensor itself is the most helpful part! Decide if there's a sensor which you can use as a base, or create a new type using AbstractSingleValueSensor or AbstractMultiValueSensor Use a clear name, and make it as exact as possible Open HASS.Agent.Shared -> Enums\\SensorType.cs and add your new sensor Don't localize your description, that'll be done in the final release by the dev Open HASS.Agent -> Sensors\\SensorsManager.cs and add your sensor to LoadSensorInfo() Again, don't localize, just use a regular string instead of Languages_* Follow the steps in the Storage section below If your sensor requires special configuration: Open the code of the form Forms\\Sensors\\SensorsMod.cs Modify LoadSensor() , BtnStore_Click() , SetType() as needed Add a Set{sensorname}Gui() function to create the interface you need","title":"New Sensor"},{"location":"development/sensors/#storage","text":"Sensors are stored and retreived by the application using them, so either HASS.Agent or HASS.Agent.Satellite.Service . It's handled by StoredSensors.cs (found under Settings ). When stored, a sensor's type is ConfiguredSensor . When loaded in memory, its type is AbstractSingleValueSensor or AbstractMultiValueSensor . To accomodate this, the functions ConvertConfiguredToAbstractSingleValue() , ConvertConfiguredToAbstractMultiValue() , ConvertAbstractSingleValueToConfigured() and ConvertAbstractMultiValueToConfigured() were added. If you created a derived sensor , so no new base type, just add your sensor to ConvertConfiguredToAbstractSingleValue() or ConvertConfiguredToAbstractMultiValue() , using the right derived sensor type. If you added a new base type, add it to ConvertAbstractSingleValueToConfigured() or ConvertAbstractMultiValueToConfigured() . First add storage capabilities for your sensor to HASS.Agent to test. When it's working properly, add it to HASS.Agent.Satellite.Service 's StoredSensors.cs as well.","title":"Storage"},{"location":"examples/activewindowsensor-multiple-processes/","text":"ActiveWindowSensor - Multiple Processes This example allows you to monitor multiple processes, by using an ActiveWindowSensor. It was created by @DivanX10 ( #87 ). Edit 23.06.2022: @DivanX10 created a new version which allows you to detect more specifically, for instance with ignoreCase . You can find the new version here . I have created sensors that work by keywords. We enter the keywords into the input_text helpers. If there are matching words in the ActiveWindowSensor, it will be on, if there are none, it will be off. Keywords are indicated by | . This will allow you not to have to create a bunch of sensors with different processes in HASS.Agent itself, and you can flexibly automate brightness adjustment, ambilight, color effects on coolers: Create input_text helpers, in which you can define which game, video player or browser is running: input_text: pc_livingroom_games_keywords: name: 'Living room: Computer. Games. Keywords' min: 0 max: 100000 icon: mdi:google-controller pc_livingroom_videoplayer_keywords: name: 'Living room: Computer. Video player. Keywords' min: 0 max: 100000 icon: mdi:video pc_livingroom_browser_keywords: name: 'Living room: Computer. Browser. Keywords' min: 0 max: 100000 icon: mdi:web Create the sensors that will show the category that we are using at the moment: #Sensor Living Room: Computer. Game sensor: - platform: template sensors: hassagent_pc_livingroom_running_game: friendly_name: \"Living room: Computer. Game\" icon_template: mdi:google-controller value_template: > {% set activewindow = states(\"sensor.pc_livingroom_activewindow\") %} {% set games = states(\"input_text.pc_livingroom_games_keywords\") %} {% if activewindow | string is search(find=games) %} on {% else %} off {% endif %} #Sensor Living Room: Computer. Video Player - platform: template sensors: hassagent_pc_livingroom_running_videoplayer: friendly_name: \"Living room: Computer. Video Player\" icon_template: mdi:video value_template: > {% set activewindow = states(\"sensor.pc_livingroom_activewindow\") %} {% set videoplayer = states(\"input_text.pc_livingroom_videoplayer_keywords\") %} {% if activewindow | string is search(find=videoplayer) %} on {% else %} off {% endif %} #Sensor Living Room: Computer. Browser - platform: template sensors: hassagent_pc_livingroom_running_browser: friendly_name: \"Living room: Computer. Browser\" icon_template: mdi:web value_template: > {% set activewindow = states(\"sensor.pc_livingroom_activewindow\") %} {% set browser = states(\"input_text.pc_livingroom_browser_keywords\") %} {% if activewindow | string is search(find=browser) %} on {% else %} off {% endif %}","title":"ActiveWindowSensor - Multiple Processes"},{"location":"examples/activewindowsensor-multiple-processes/#activewindowsensor-multiple-processes","text":"This example allows you to monitor multiple processes, by using an ActiveWindowSensor. It was created by @DivanX10 ( #87 ). Edit 23.06.2022: @DivanX10 created a new version which allows you to detect more specifically, for instance with ignoreCase . You can find the new version here . I have created sensors that work by keywords. We enter the keywords into the input_text helpers. If there are matching words in the ActiveWindowSensor, it will be on, if there are none, it will be off. Keywords are indicated by | . This will allow you not to have to create a bunch of sensors with different processes in HASS.Agent itself, and you can flexibly automate brightness adjustment, ambilight, color effects on coolers: Create input_text helpers, in which you can define which game, video player or browser is running: input_text: pc_livingroom_games_keywords: name: 'Living room: Computer. Games. Keywords' min: 0 max: 100000 icon: mdi:google-controller pc_livingroom_videoplayer_keywords: name: 'Living room: Computer. Video player. Keywords' min: 0 max: 100000 icon: mdi:video pc_livingroom_browser_keywords: name: 'Living room: Computer. Browser. Keywords' min: 0 max: 100000 icon: mdi:web Create the sensors that will show the category that we are using at the moment: #Sensor Living Room: Computer. Game sensor: - platform: template sensors: hassagent_pc_livingroom_running_game: friendly_name: \"Living room: Computer. Game\" icon_template: mdi:google-controller value_template: > {% set activewindow = states(\"sensor.pc_livingroom_activewindow\") %} {% set games = states(\"input_text.pc_livingroom_games_keywords\") %} {% if activewindow | string is search(find=games) %} on {% else %} off {% endif %} #Sensor Living Room: Computer. Video Player - platform: template sensors: hassagent_pc_livingroom_running_videoplayer: friendly_name: \"Living room: Computer. Video Player\" icon_template: mdi:video value_template: > {% set activewindow = states(\"sensor.pc_livingroom_activewindow\") %} {% set videoplayer = states(\"input_text.pc_livingroom_videoplayer_keywords\") %} {% if activewindow | string is search(find=videoplayer) %} on {% else %} off {% endif %} #Sensor Living Room: Computer. Browser - platform: template sensors: hassagent_pc_livingroom_running_browser: friendly_name: \"Living room: Computer. Browser\" icon_template: mdi:web value_template: > {% set activewindow = states(\"sensor.pc_livingroom_activewindow\") %} {% set browser = states(\"input_text.pc_livingroom_browser_keywords\") %} {% if activewindow | string is search(find=browser) %} on {% else %} off {% endif %}","title":"ActiveWindowSensor - Multiple Processes"},{"location":"examples/adjust-screen-brightness/","text":"Adjust Screen Brightness This example allows you to adjust your screen brightness, by using the Monitorian tool and a CustomCommand. It was created by @DivanX10 ( #86 ). Note: your screen has to support DDC/CI, check the Monitorian link for more info. Create a custom command: We create a mqtt light entity and configure it as below. With it, you can control the brightness of the monitor screen. Make sure you change the brightness_command_template if you've placed Monitorian somewhere else. mqtt: light: - name: \"Living room: Monitor. Screen Brightness\" unique_id: \"pc_livingroom_monitor_brightness\" object_id: \"pc_livingroom_monitor_brightness\" command_topic: \"homeassistant/light/LIVINGROOM/pc_livingroom_screen_brightness/action\" brightness_command_topic: \"homeassistant/light/LIVINGROOM/pc_livingroom_screen_brightness/action\" brightness_command_template: \"%LOCALAPPDATA%\\\\Microsoft\\\\WindowsApps\\\\Monitorian.exe /set {{ value }}\" brightness_scale: 100 on_command_type: 'brightness' icon: mdi:monitor-shimmer To keep the brightness level in the auxiliary element number, and for the values to be equal, then you need to use this code: {{ state_attr(\"light.pc_livingroom_monitor_brightness\", \"brightness\")|multiply(0.392)|round(0) }}","title":"Adjust Screen Brightness"},{"location":"examples/adjust-screen-brightness/#adjust-screen-brightness","text":"This example allows you to adjust your screen brightness, by using the Monitorian tool and a CustomCommand. It was created by @DivanX10 ( #86 ). Note: your screen has to support DDC/CI, check the Monitorian link for more info. Create a custom command: We create a mqtt light entity and configure it as below. With it, you can control the brightness of the monitor screen. Make sure you change the brightness_command_template if you've placed Monitorian somewhere else. mqtt: light: - name: \"Living room: Monitor. Screen Brightness\" unique_id: \"pc_livingroom_monitor_brightness\" object_id: \"pc_livingroom_monitor_brightness\" command_topic: \"homeassistant/light/LIVINGROOM/pc_livingroom_screen_brightness/action\" brightness_command_topic: \"homeassistant/light/LIVINGROOM/pc_livingroom_screen_brightness/action\" brightness_command_template: \"%LOCALAPPDATA%\\\\Microsoft\\\\WindowsApps\\\\Monitorian.exe /set {{ value }}\" brightness_scale: 100 on_command_type: 'brightness' icon: mdi:monitor-shimmer To keep the brightness level in the auxiliary element number, and for the values to be equal, then you need to use this code: {{ state_attr(\"light.pc_livingroom_monitor_brightness\", \"brightness\")|multiply(0.392)|round(0) }}","title":"Adjust Screen Brightness"},{"location":"examples/pc-card/","text":"PC Card This example allows you to create a PC card in your dashboard. It was created by Mouhwahno . Make sure you change all name values and other specific references. Feel free to join the Discord for help. Note: it uses the Powershell screenshot example, found here . WOL switch: You need to change the entity_id to that of your HASS.Agent shutdown command. switch: - platform: wake_on_lan name: \"PC Blanc\" mac: \"AA:AA:AA:AA:AA:AA\" host: 192.168.0.1 broadcast_address: 192.168.0.255 turn_off: service: button.press data: entity_id: button.pc_Blanc_shutdown Screenshot camera: Use this example . camera: - platform: local_file file_path: /media/PC_Blanc/PC-BLANC-screenshot.png name: \"PC Blanc\" Uptime sensor: Mouhwahno uses a PowershellSensor to get the uptime. ((Get-Date) - (Get-CimInstance Win32_OperatingSystem).LastBootUpTime).ToString('dd\\.hh\\:mm\\:ss') YAML layout code: type: custom:layout-card layout_type: custom:vertical-layout layout: {} cards: - type: markdown content: | # <img height=\"40\" src='/local/logo/pcmr.png' /> PC-BLANC card_mod: style: ha-markdown $: | h1 img { vertical-align: bottom; } .: | ha-card { background-color: transparent !important; box-shadow: none !important; margin-bottom: -15px; margin-top: -15px; text-align: center; } - type: custom:stack-in-card mode: vertical cards: - type: custom:stack-in-card mode: horizontal card_mod: style: | ha-card { background: none; --ha-card-box-shadow: 0px; } cards: - type: custom:mushroom-template-card entity: switch.pc_blanc primary: PC Cube secondary: |- {% set st = states('switch.pc_blanc') %} {% set up = 'Uptime: ' + states(sensor.pc_blanc_uptime) %} {% if st == 'on' %} {{ up }} {% else %} {% endif %} icon: mdi:desktop-tower-monitor badge_icon: |- {% set temp = states('sensor.pc_blanc_cputemp') %} {% if temp == 'unavailable' %} {% elif temp > '65' %} mdi:thermometer {% endif %} fill_container: false multiline_secondary: false badge_color: |- {% set temp = states('sensor.pc_blanc_cputemp') %} {% if temp < '40' %} green {% elif temp < '50' %} light-green {% elif temp < '55' %} lime {% elif temp < '60' %} yellow {% elif temp < '65' %} amber {% elif temp < '68' %} orange {% elif temp < '70' %} deep-orange {% else %} red {% endif %} icon_color: |- {% set st = states(entity) %} {% if st == 'on' %} blue {% else %} grey {% endif %} tap_action: action: call-service service: switch.toggle data: {} target: entity_id: switch.pc_blanc - type: custom:state-switch entity: switch.pc_blanc states: 'on': type: custom:mushroom-chips-card alignment: end chips: - type: template entity: sensor.pc_blanc_cputemp content: '{{states(entity) | round(0) }} \u00b0C' icon_color: |- {% set temp = states(entity) %} {% if temp < '40' %} green {% elif temp < '50' %} light-green {% elif temp < '55' %} lime {% elif temp < '60' %} yellow {% elif temp < '65' %} amber {% elif temp < '68' %} orange {% elif temp < '70' %} deep-orange {% else %} red {% endif %} icon: mdi:thermometer card_mod: style: | ha-card { --chip-box-shadow: none; --chip-background: none; --chip-padding: 0 0.3em; margin-top: 0.4em; margin-right: 0.4em; --chip-font-size: 0.4em; --chip-icon-size: 0.6em; } - type: custom:state-switch entity: switch.pc_blanc states: 'on': type: picture-glance camera_view: auto entities: [] camera_image: camera.pc_blanc theme: Mushroom","title":"PC Card"},{"location":"examples/pc-card/#pc-card","text":"This example allows you to create a PC card in your dashboard. It was created by Mouhwahno . Make sure you change all name values and other specific references. Feel free to join the Discord for help. Note: it uses the Powershell screenshot example, found here . WOL switch: You need to change the entity_id to that of your HASS.Agent shutdown command. switch: - platform: wake_on_lan name: \"PC Blanc\" mac: \"AA:AA:AA:AA:AA:AA\" host: 192.168.0.1 broadcast_address: 192.168.0.255 turn_off: service: button.press data: entity_id: button.pc_Blanc_shutdown Screenshot camera: Use this example . camera: - platform: local_file file_path: /media/PC_Blanc/PC-BLANC-screenshot.png name: \"PC Blanc\" Uptime sensor: Mouhwahno uses a PowershellSensor to get the uptime. ((Get-Date) - (Get-CimInstance Win32_OperatingSystem).LastBootUpTime).ToString('dd\\.hh\\:mm\\:ss') YAML layout code: type: custom:layout-card layout_type: custom:vertical-layout layout: {} cards: - type: markdown content: | # <img height=\"40\" src='/local/logo/pcmr.png' /> PC-BLANC card_mod: style: ha-markdown $: | h1 img { vertical-align: bottom; } .: | ha-card { background-color: transparent !important; box-shadow: none !important; margin-bottom: -15px; margin-top: -15px; text-align: center; } - type: custom:stack-in-card mode: vertical cards: - type: custom:stack-in-card mode: horizontal card_mod: style: | ha-card { background: none; --ha-card-box-shadow: 0px; } cards: - type: custom:mushroom-template-card entity: switch.pc_blanc primary: PC Cube secondary: |- {% set st = states('switch.pc_blanc') %} {% set up = 'Uptime: ' + states(sensor.pc_blanc_uptime) %} {% if st == 'on' %} {{ up }} {% else %} {% endif %} icon: mdi:desktop-tower-monitor badge_icon: |- {% set temp = states('sensor.pc_blanc_cputemp') %} {% if temp == 'unavailable' %} {% elif temp > '65' %} mdi:thermometer {% endif %} fill_container: false multiline_secondary: false badge_color: |- {% set temp = states('sensor.pc_blanc_cputemp') %} {% if temp < '40' %} green {% elif temp < '50' %} light-green {% elif temp < '55' %} lime {% elif temp < '60' %} yellow {% elif temp < '65' %} amber {% elif temp < '68' %} orange {% elif temp < '70' %} deep-orange {% else %} red {% endif %} icon_color: |- {% set st = states(entity) %} {% if st == 'on' %} blue {% else %} grey {% endif %} tap_action: action: call-service service: switch.toggle data: {} target: entity_id: switch.pc_blanc - type: custom:state-switch entity: switch.pc_blanc states: 'on': type: custom:mushroom-chips-card alignment: end chips: - type: template entity: sensor.pc_blanc_cputemp content: '{{states(entity) | round(0) }} \u00b0C' icon_color: |- {% set temp = states(entity) %} {% if temp < '40' %} green {% elif temp < '50' %} light-green {% elif temp < '55' %} lime {% elif temp < '60' %} yellow {% elif temp < '65' %} amber {% elif temp < '68' %} orange {% elif temp < '70' %} deep-orange {% else %} red {% endif %} icon: mdi:thermometer card_mod: style: | ha-card { --chip-box-shadow: none; --chip-background: none; --chip-padding: 0 0.3em; margin-top: 0.4em; margin-right: 0.4em; --chip-font-size: 0.4em; --chip-icon-size: 0.6em; } - type: custom:state-switch entity: switch.pc_blanc states: 'on': type: picture-glance camera_view: auto entities: [] camera_image: camera.pc_blanc theme: Mushroom","title":"PC Card"},{"location":"examples/pc-state/","text":"PC State Cards Both examples were created by Rokanishu . This example allows you to create cards showing the state of your PC in your dashboard. type: entities entities: - entity: binary_sensor.office_motion_sensor_ias_zone secondary_info: last-changed name: Motion Detected - entity: binary_sensor.lumi_lumi_sensor_motion_aq2_ias_zone name: Desk Motion Sensor secondary_info: last-updated - entity: binary_sensor.lumi_lumi_sensor_magnet_aq2_on_off secondary_info: last-changed name: Office Door - type: conditional conditions: - entity: sensor.hass_desktop_sessionstate state_not: Unlocked row: entity: sensor.desktop_lastactive icon: mdi:sleep state_color: true name: PC Last Active (Off) - type: conditional conditions: - entity: sensor.hass_desktop_sessionstate state: Unlocked row: entity: sensor.desktop_lastactive icon: mdi:mouse state_color: true name: PC Last Active This example shows specific buttons for when the PC is asleep/off or on. square: false columns: 1 type: grid cards: - type: conditional conditions: - entity: sensor.hass_desktop_sessionstate state_not: Unlocked card: show_name: true show_icon: true show_state: false type: glance entities: - entity: script.button_wake_desktop name: Desktop WOL tap_action: action: toggle icon: mdi:power state_color: false - type: conditional conditions: - entity: sensor.hass_desktop_sessionstate state_not: unavailable - entity: sensor.hass_desktop_sessionstate state_not: unknown card: show_name: true show_icon: true show_state: false type: glance entities: - entity: button.desktop_hibernate name: Sleep Desktop tap_action: action: toggle icon: mdi:power - entity: button.desktop_monitorsoff name: Monitors Off tap_action: action: toggle icon: mdi:monitor-off - entity: button.desktop_launchhyperion name: Run Hyperion tap_action: action: toggle icon: mdi:television-ambient-light - entity: media_player.office_tv name: Toggle TV tap_action: action: call-service service: media_player.toggle target: entity_id: media_player.office_tv state_color: false","title":"PC State Cards"},{"location":"examples/pc-state/#pc-state-cards","text":"Both examples were created by Rokanishu . This example allows you to create cards showing the state of your PC in your dashboard. type: entities entities: - entity: binary_sensor.office_motion_sensor_ias_zone secondary_info: last-changed name: Motion Detected - entity: binary_sensor.lumi_lumi_sensor_motion_aq2_ias_zone name: Desk Motion Sensor secondary_info: last-updated - entity: binary_sensor.lumi_lumi_sensor_magnet_aq2_on_off secondary_info: last-changed name: Office Door - type: conditional conditions: - entity: sensor.hass_desktop_sessionstate state_not: Unlocked row: entity: sensor.desktop_lastactive icon: mdi:sleep state_color: true name: PC Last Active (Off) - type: conditional conditions: - entity: sensor.hass_desktop_sessionstate state: Unlocked row: entity: sensor.desktop_lastactive icon: mdi:mouse state_color: true name: PC Last Active This example shows specific buttons for when the PC is asleep/off or on. square: false columns: 1 type: grid cards: - type: conditional conditions: - entity: sensor.hass_desktop_sessionstate state_not: Unlocked card: show_name: true show_icon: true show_state: false type: glance entities: - entity: script.button_wake_desktop name: Desktop WOL tap_action: action: toggle icon: mdi:power state_color: false - type: conditional conditions: - entity: sensor.hass_desktop_sessionstate state_not: unavailable - entity: sensor.hass_desktop_sessionstate state_not: unknown card: show_name: true show_icon: true show_state: false type: glance entities: - entity: button.desktop_hibernate name: Sleep Desktop tap_action: action: toggle icon: mdi:power - entity: button.desktop_monitorsoff name: Monitors Off tap_action: action: toggle icon: mdi:monitor-off - entity: button.desktop_launchhyperion name: Run Hyperion tap_action: action: toggle icon: mdi:television-ambient-light - entity: media_player.office_tv name: Toggle TV tap_action: action: call-service service: media_player.toggle target: entity_id: media_player.office_tv state_color: false","title":"PC State Cards"},{"location":"integration/configuration/","text":"Configuration MQTT By default, the integration uses MQTT to autodetect your devices. With MQTT setup, it'll show up in your Integrations page: Just hit CONFIGURE , click SUBMIT , pick an area (optionally) and you're done! You'll now have one (or a list of) HASS.Agent instance(s): Each instance will have a media_player entity and notifiy service, depending on what you've configured in HASS.Agent. Note: notify is a service, so it won't show up in the device's page like the media_player entity - you can test it through Developer Tools -> SERVICES . Note: the integration's device is not the same as HASS.Agent's device, so it'll be empty except the media_player entity. Legacy If you don't use MQTT, you can still use HASS.Agent's local API to connect. Click ADD INTEGRATION in HA's Integrations page and search for HASS.Agent . Enter you device's IP and click SUBMIT : You'll also need to open the configured port in the firewall of the receiving PC (default 5115 ). You can do that through the configuration window: Use the legacy integration troubleshooting on the left if something's not working. Note: the local API doesn't support all functionality of the MQTT variant.","title":"Configuration"},{"location":"integration/configuration/#configuration","text":"","title":"Configuration"},{"location":"integration/configuration/#mqtt","text":"By default, the integration uses MQTT to autodetect your devices. With MQTT setup, it'll show up in your Integrations page: Just hit CONFIGURE , click SUBMIT , pick an area (optionally) and you're done! You'll now have one (or a list of) HASS.Agent instance(s): Each instance will have a media_player entity and notifiy service, depending on what you've configured in HASS.Agent. Note: notify is a service, so it won't show up in the device's page like the media_player entity - you can test it through Developer Tools -> SERVICES . Note: the integration's device is not the same as HASS.Agent's device, so it'll be empty except the media_player entity.","title":"MQTT"},{"location":"integration/configuration/#legacy","text":"If you don't use MQTT, you can still use HASS.Agent's local API to connect. Click ADD INTEGRATION in HA's Integrations page and search for HASS.Agent . Enter you device's IP and click SUBMIT : You'll also need to open the configured port in the firewall of the receiving PC (default 5115 ). You can do that through the configuration window: Use the legacy integration troubleshooting on the left if something's not working. Note: the local API doesn't support all functionality of the MQTT variant.","title":"Legacy"},{"location":"integration/debugging/","text":"Debugging Home Assistant If an integration isn't working as it should, you can opt to enable debug logging in Home Assistant. This will show you logs for every step the integration's taking, so you (or the dev) can better determine what's going wrong. Go to your file-editor-of-choice in HA, and open configuration.yaml . Add the following snippet: logger: default: warning logs: custom_components.hass_agent: debug This is for the new integration. If you use either of the old ones, you can add these rows: custom_components.hass_agent_notifier: debug custom_components.hass_agent_mediaplayer: debug Reboot HA, and it'll be activated. Tip: install the Log Viewer add-on for easy viewing. You should see rows like this coming in: HASS.Agent If you're sure everything's working from HA's end, you can check HASS.Agent's logs. Open the Configuration window, navigate to the Logging page and click Open Logs Folder : In there, sort by date, and open the latest log. You can ignore the files containing restart or update etc. in their name: Attach the content of the log to a GitHub ticket . If the log's not showing anything interesting, you can enable Extended Logging : Restart HASS.Agent and try to reproduce your error. Note: disable this afterwards, as it can make the logfiles grow really large!","title":"Debugging"},{"location":"integration/debugging/#debugging","text":"","title":"Debugging"},{"location":"integration/debugging/#home-assistant","text":"If an integration isn't working as it should, you can opt to enable debug logging in Home Assistant. This will show you logs for every step the integration's taking, so you (or the dev) can better determine what's going wrong. Go to your file-editor-of-choice in HA, and open configuration.yaml . Add the following snippet: logger: default: warning logs: custom_components.hass_agent: debug This is for the new integration. If you use either of the old ones, you can add these rows: custom_components.hass_agent_notifier: debug custom_components.hass_agent_mediaplayer: debug Reboot HA, and it'll be activated. Tip: install the Log Viewer add-on for easy viewing. You should see rows like this coming in:","title":"Home Assistant"},{"location":"integration/debugging/#hassagent","text":"If you're sure everything's working from HA's end, you can check HASS.Agent's logs. Open the Configuration window, navigate to the Logging page and click Open Logs Folder : In there, sort by date, and open the latest log. You can ignore the files containing restart or update etc. in their name: Attach the content of the log to a GitHub ticket . If the log's not showing anything interesting, you can enable Extended Logging : Restart HASS.Agent and try to reproduce your error. Note: disable this afterwards, as it can make the logfiles grow really large!","title":"HASS.Agent"},{"location":"integration/installation/","text":"Installation HASS.Agent's integration isn't part of Home Assistant's core (yet), so you'll need to install it before you can use it. HACS The easiest way to do this is by installing HACS ( Home Assistant Community Store ). It's a central hub through which you can install tons of useful integrations, themes, custom cards and scripts. They've written a step-by-step guide on how to do this: https://hacs.xyz/docs/setup/prerequisites Or you can use one of the youtube guides, like this one: How to install HACS in 2022 in Home Assistant You can also ask for help in the HA forums if you're stuck. After you've installed HACS (and rebooted HA), you can use this link to jump to the integration (thanks @c00ldude1oo ): Or if you want to navigate yourself: open HACS by clicking on its icon on the toolbar on the leftside of HA. Then click Integrations -> EXPLORE & DOWNLOAD REPOSITORIES (bottom right) and search for HASS.Agent . Note: you ONLY need the HASS.Agent integration. The notification and media_player integrations are legacy, you can ignore them. Manual Another option is to manually install the integration. The downside of this is that you'll also need to manually update every time. Go to the integration's repository . Click on Code -> Download ZIP : Browse to the custom_components folder, and extract the hass_agent folder into your HA's config\\custom_components folder. Restart HA to load it. MQTT It's highly recommened to have MQTT up and running. This way, you'll have all the latest features. If you don't already have it, follow this guide to help you get started.","title":"Installation"},{"location":"integration/installation/#installation","text":"HASS.Agent's integration isn't part of Home Assistant's core (yet), so you'll need to install it before you can use it.","title":"Installation"},{"location":"integration/installation/#hacs","text":"The easiest way to do this is by installing HACS ( Home Assistant Community Store ). It's a central hub through which you can install tons of useful integrations, themes, custom cards and scripts. They've written a step-by-step guide on how to do this: https://hacs.xyz/docs/setup/prerequisites Or you can use one of the youtube guides, like this one: How to install HACS in 2022 in Home Assistant You can also ask for help in the HA forums if you're stuck. After you've installed HACS (and rebooted HA), you can use this link to jump to the integration (thanks @c00ldude1oo ): Or if you want to navigate yourself: open HACS by clicking on its icon on the toolbar on the leftside of HA. Then click Integrations -> EXPLORE & DOWNLOAD REPOSITORIES (bottom right) and search for HASS.Agent . Note: you ONLY need the HASS.Agent integration. The notification and media_player integrations are legacy, you can ignore them.","title":"HACS"},{"location":"integration/installation/#manual","text":"Another option is to manually install the integration. The downside of this is that you'll also need to manually update every time. Go to the integration's repository . Click on Code -> Download ZIP : Browse to the custom_components folder, and extract the hass_agent folder into your HA's config\\custom_components folder. Restart HA to load it.","title":"Manual"},{"location":"integration/installation/#mqtt","text":"It's highly recommened to have MQTT up and running. This way, you'll have all the latest features. If you don't already have it, follow this guide to help you get started.","title":"MQTT"},{"location":"integration/introduction/","text":"Introduction Most of the tricks HASS.Agent does is direct communication between it and Home Assistant: HASS.Agent sends the value of a sensor to HA, HA sends the request to execute a command to HASS.Agent, etc. That all works great; however, some parts require more extensive integration into HA. And that's where HASS.Agent's integration comes into play. It basically extends HA's functionality. Currently, the integration adds these two parts: Notifications The ability to send notifications from within HA to any HASS.Agent. This'll then show up as a toast notification in Windows. You can add images, or actionable buttons if you want. Media Player Control your PC like it's a media_player entity from within HA. See what's playing, skip tracks, even send text-to-speech to your PC. You'll need to install the integration in HA to unlock these functions. Consult the Installation page for info on how to do this.","title":"Introduction"},{"location":"integration/introduction/#introduction","text":"Most of the tricks HASS.Agent does is direct communication between it and Home Assistant: HASS.Agent sends the value of a sensor to HA, HA sends the request to execute a command to HASS.Agent, etc. That all works great; however, some parts require more extensive integration into HA. And that's where HASS.Agent's integration comes into play. It basically extends HA's functionality. Currently, the integration adds these two parts: Notifications The ability to send notifications from within HA to any HASS.Agent. This'll then show up as a toast notification in Windows. You can add images, or actionable buttons if you want. Media Player Control your PC like it's a media_player entity from within HA. See what's playing, skip tracks, even send text-to-speech to your PC. You'll need to install the integration in HA to unlock these functions. Consult the Installation page for info on how to do this.","title":"Introduction"},{"location":"mediaplayer/mediaplayer-usage-and-examples/","text":"MediaPlayer Usage and Examples Installation Refer to the integration's installation and configuration pages on the left. General You can add the mediaplayer to your dashboard by using a Media Control Card , and selecting your entity (for the above example, media_player.hass_agent_test_mediaplayer ). It'll show up as follows: Media Control The entity allows you to control your PC as if it were a regular media player, regardless of what application is actually playing. For the 'what's playing' functionality, the playing application needs to use Windows' media API. An example application that does this, is Spotify. An example application that doesn't do this, is VLC. If your application supports it, your current playing media will show up in Home Assistant: Text-to-Speech By using this integration, you can use your PC as a text-to-speech target. You can easily test the functionality by using the developer tools in Home Assistant: Or through YAML: service: tts.google_translate_say data: entity_id: media_player.hass_agent_test_mediaplayer message: this is a test message Replace google_translate_say if you're using any other TTS service. Notes Some extra info: Besides TTS, you can play any .mp3 file on HASS.Agent directly This file can be online ( http(s) ) or local ( C:\\path\\to\\file.mp3 ) The media_content_type must be music Currently running audio will be aborted when a new file is received YAML to play a .mp3 file on the agent: service: media_player.play_media data: # Hosted on Home Assistant (/config/www folder) media_content_id: media-source://media_source/local/Alarm1.mp3 # Or streamed from another server # media_content_id: https://download.samplelib.com/mp3/sample-3s.mp3 media_content_type: music target: entity_id: media_player.hass_agent_test_mediaplayer If you're not getting your current-song information from Spotify, make sure this setting is enabled:","title":"MediaPlayer Usage and Examples"},{"location":"mediaplayer/mediaplayer-usage-and-examples/#mediaplayer-usage-and-examples","text":"","title":"MediaPlayer Usage and Examples"},{"location":"mediaplayer/mediaplayer-usage-and-examples/#installation","text":"Refer to the integration's installation and configuration pages on the left.","title":"Installation"},{"location":"mediaplayer/mediaplayer-usage-and-examples/#general","text":"You can add the mediaplayer to your dashboard by using a Media Control Card , and selecting your entity (for the above example, media_player.hass_agent_test_mediaplayer ). It'll show up as follows:","title":"General"},{"location":"mediaplayer/mediaplayer-usage-and-examples/#media-control","text":"The entity allows you to control your PC as if it were a regular media player, regardless of what application is actually playing. For the 'what's playing' functionality, the playing application needs to use Windows' media API. An example application that does this, is Spotify. An example application that doesn't do this, is VLC. If your application supports it, your current playing media will show up in Home Assistant:","title":"Media Control"},{"location":"mediaplayer/mediaplayer-usage-and-examples/#text-to-speech","text":"By using this integration, you can use your PC as a text-to-speech target. You can easily test the functionality by using the developer tools in Home Assistant: Or through YAML: service: tts.google_translate_say data: entity_id: media_player.hass_agent_test_mediaplayer message: this is a test message Replace google_translate_say if you're using any other TTS service.","title":"Text-to-Speech"},{"location":"mediaplayer/mediaplayer-usage-and-examples/#notes","text":"Some extra info: Besides TTS, you can play any .mp3 file on HASS.Agent directly This file can be online ( http(s) ) or local ( C:\\path\\to\\file.mp3 ) The media_content_type must be music Currently running audio will be aborted when a new file is received YAML to play a .mp3 file on the agent: service: media_player.play_media data: # Hosted on Home Assistant (/config/www folder) media_content_id: media-source://media_source/local/Alarm1.mp3 # Or streamed from another server # media_content_id: https://download.samplelib.com/mp3/sample-3s.mp3 media_content_type: music target: entity_id: media_player.hass_agent_test_mediaplayer If you're not getting your current-song information from Spotify, make sure this setting is enabled:","title":"Notes"},{"location":"notifications/notification-debugging-client-side/","text":"Notification Debugging - Client Side This page is based on the legacy notifier integration. It is (and will remain) functional, but for future updates, it's advisable to switch to the new integration . The info on this page is focussed on making sure notifications work on the client side: HASS.Agent on your PC. Use Notification Debugging - HA Side to debug on Home Assistant's side. If it still doesn't work after following all below steps, ask for help on Discord or open a Github Ticket . 1. Firewall Rule and Port Reservation Your PC needs to be able to accept messages from Home Assistant. Normally, your PC's closed for the 'outside world', so we need to allow add an exception. This is done for you during onboarding, however, you can always execute these steps again by going to Configuration -> Notifications and click execute port reservation . You can check whether HASS.Agent can be reached by going to this URL on another device on the same network (for instance your smartphone, when it's connected to WiFi): http://{hass_agent_ip}:5115 Make sure to change {hass_agent_ip} to the IP of the PC where HASS.Agent's installed. If HASS.Agent is configured and the firewall rule's active, you'll see: HASS.Agent Active . If not, something is blocking access to HASS.Agent. Perhaps your using a 3rd party firewall (most paid antivirus have them these days). If that's the case, consult its documentation to see how you can allow an exception for port 5115 and/or HASS.Agent.exe . 2. Windows Notifications Settings Windows manages which notifications are allowed and when. Usually HASS.Agent is allowed by default. If not, notifications aren't shown, even when you've correctly configured Home Assistant. For starters, make sure the HASS.Agent icon is shown next to the clock in your taskbar, and not in the overflow message. After you've done this, you can show a test notification by going to Configuration -> Notifications and click show test notification . Did the notification popup? Great! If not, go to Windows' (new) configuration page and make sure you've enabled Notification access or Notifications , depending on your Windows version: On that same page, make sure HASS.Agent has its checkbox set to On : Optionally, click on HASS.Agent instead of the checkbox, and make sure its settings are as follows: Depending on your Windows version, you may also need to make sure that the Action Center system icon is enabled: Important : if you have focus assist active, you need to add HASS.Agent to the Priority list (thanks @jrnhrmn): How to Customize Focus Assist Priority List in Windows 10 When you've done all this, try the show test notification button again in HASS.Agent. Did the notification show? Great, you can now finish setting up in Home Assistant. If not, continue below. 3. Obscure Windows configurations There have been a few reports of users which had to change weird Windows settings before it worked. For starters, if you're using privacy tools like o&o shutup or decrapifier (great tools by the way!), make sure they're not set to block notifications. Sometimes, when telemetry is disabled, it also disables notifications. You can temporarily reenable it with the following Powershell command: Remove-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\DataCollection\" -Name \"AllowTelemetry\" When everything's working, feel free to disable telemetry once again. 4. External links The following links may (or may not) help in further debugging: https://www.surfacetablethelp.com/2017/02/fix-show-app-notifications-option-greyed-out-in-windows-10-settings.html https://www.guidingtech.com/top-ways-to-fix-notifications-not-working-on-windows-11/","title":"Notification Debugging - Client Side"},{"location":"notifications/notification-debugging-client-side/#notification-debugging-client-side","text":"This page is based on the legacy notifier integration. It is (and will remain) functional, but for future updates, it's advisable to switch to the new integration . The info on this page is focussed on making sure notifications work on the client side: HASS.Agent on your PC. Use Notification Debugging - HA Side to debug on Home Assistant's side. If it still doesn't work after following all below steps, ask for help on Discord or open a Github Ticket .","title":"Notification Debugging - Client Side"},{"location":"notifications/notification-debugging-client-side/#1-firewall-rule-and-port-reservation","text":"Your PC needs to be able to accept messages from Home Assistant. Normally, your PC's closed for the 'outside world', so we need to allow add an exception. This is done for you during onboarding, however, you can always execute these steps again by going to Configuration -> Notifications and click execute port reservation . You can check whether HASS.Agent can be reached by going to this URL on another device on the same network (for instance your smartphone, when it's connected to WiFi): http://{hass_agent_ip}:5115 Make sure to change {hass_agent_ip} to the IP of the PC where HASS.Agent's installed. If HASS.Agent is configured and the firewall rule's active, you'll see: HASS.Agent Active . If not, something is blocking access to HASS.Agent. Perhaps your using a 3rd party firewall (most paid antivirus have them these days). If that's the case, consult its documentation to see how you can allow an exception for port 5115 and/or HASS.Agent.exe .","title":"1. Firewall Rule and Port Reservation"},{"location":"notifications/notification-debugging-client-side/#2-windows-notifications-settings","text":"Windows manages which notifications are allowed and when. Usually HASS.Agent is allowed by default. If not, notifications aren't shown, even when you've correctly configured Home Assistant. For starters, make sure the HASS.Agent icon is shown next to the clock in your taskbar, and not in the overflow message. After you've done this, you can show a test notification by going to Configuration -> Notifications and click show test notification . Did the notification popup? Great! If not, go to Windows' (new) configuration page and make sure you've enabled Notification access or Notifications , depending on your Windows version: On that same page, make sure HASS.Agent has its checkbox set to On : Optionally, click on HASS.Agent instead of the checkbox, and make sure its settings are as follows: Depending on your Windows version, you may also need to make sure that the Action Center system icon is enabled: Important : if you have focus assist active, you need to add HASS.Agent to the Priority list (thanks @jrnhrmn): How to Customize Focus Assist Priority List in Windows 10 When you've done all this, try the show test notification button again in HASS.Agent. Did the notification show? Great, you can now finish setting up in Home Assistant. If not, continue below.","title":"2. Windows Notifications Settings"},{"location":"notifications/notification-debugging-client-side/#3-obscure-windows-configurations","text":"There have been a few reports of users which had to change weird Windows settings before it worked. For starters, if you're using privacy tools like o&o shutup or decrapifier (great tools by the way!), make sure they're not set to block notifications. Sometimes, when telemetry is disabled, it also disables notifications. You can temporarily reenable it with the following Powershell command: Remove-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\DataCollection\" -Name \"AllowTelemetry\" When everything's working, feel free to disable telemetry once again.","title":"3. Obscure Windows configurations"},{"location":"notifications/notification-debugging-client-side/#4-external-links","text":"The following links may (or may not) help in further debugging: https://www.surfacetablethelp.com/2017/02/fix-show-app-notifications-option-greyed-out-in-windows-10-settings.html https://www.guidingtech.com/top-ways-to-fix-notifications-not-working-on-windows-11/","title":"4. External links"},{"location":"notifications/notification-debugging-ha-side/","text":"Notification Debugging - HA Side This page is based on the legacy notifier integration. It is (and will remain) functional, but for future updates, it's advisable to switch to the new integration . The info on this page is focussed on making sure notifications work on Home Assistant's side. Use Notification Debugging - Client Side to debug on the client (HASS.Agent on your PC) side. If it still doesn't work after following all below steps, ask for help on Discord or open a Github Ticket . 1. Configuring The most important part is that you get the basic configuration right. You need to create a notify entity, and use that in your automations and scripts. Please follow this guide to make sure the basics are good. 2. Home Assistant Log Debugging You can use Home Assistant's log to see how the notification-integration's doing. Install the Log Viewer addon through HA's add-on store: Afterwards, add the following snippet to your configuration.yaml to enable debug logging for the integration: logger: default: warning logs: custom_components.hass_agent_notifier: debug Reboot Home Assistant. Whenever you send a message, this should show up in your logs: If not, something's wrong and HA can't reach your PC. Use the Notification Debugging - HA Side manual to debug on the client (HASS.Agent on your PC) side. 3. Manual Testing This is a bit more advanced, but if you use a tool like Postman , you can manually send a test notification. Configure as follows: Use this JSON object: { \"Message\": \"This is a test message\", \"Title\": \"HASS Agent Test\" } Another way is by using curl: curl -X POST -H \"Content-Type: text/json\" -d \"{\\\"Message\\\": \\\"Test Message\\\", \\\"Title\\\": \\\"Test Title\\\"}\" http://{device_ip}:5115/notify","title":"Notification Debugging - HA Side"},{"location":"notifications/notification-debugging-ha-side/#notification-debugging-ha-side","text":"This page is based on the legacy notifier integration. It is (and will remain) functional, but for future updates, it's advisable to switch to the new integration . The info on this page is focussed on making sure notifications work on Home Assistant's side. Use Notification Debugging - Client Side to debug on the client (HASS.Agent on your PC) side. If it still doesn't work after following all below steps, ask for help on Discord or open a Github Ticket .","title":"Notification Debugging - HA Side"},{"location":"notifications/notification-debugging-ha-side/#1-configuring","text":"The most important part is that you get the basic configuration right. You need to create a notify entity, and use that in your automations and scripts. Please follow this guide to make sure the basics are good.","title":"1. Configuring"},{"location":"notifications/notification-debugging-ha-side/#2-home-assistant-log-debugging","text":"You can use Home Assistant's log to see how the notification-integration's doing. Install the Log Viewer addon through HA's add-on store: Afterwards, add the following snippet to your configuration.yaml to enable debug logging for the integration: logger: default: warning logs: custom_components.hass_agent_notifier: debug Reboot Home Assistant. Whenever you send a message, this should show up in your logs: If not, something's wrong and HA can't reach your PC. Use the Notification Debugging - HA Side manual to debug on the client (HASS.Agent on your PC) side.","title":"2. Home Assistant Log Debugging"},{"location":"notifications/notification-debugging-ha-side/#3-manual-testing","text":"This is a bit more advanced, but if you use a tool like Postman , you can manually send a test notification. Configure as follows: Use this JSON object: { \"Message\": \"This is a test message\", \"Title\": \"HASS Agent Test\" } Another way is by using curl: curl -X POST -H \"Content-Type: text/json\" -d \"{\\\"Message\\\": \\\"Test Message\\\", \\\"Title\\\": \\\"Test Title\\\"}\" http://{device_ip}:5115/notify","title":"3. Manual Testing"},{"location":"notifications/notification-debugging-ssl/","text":"Notification Debugging - SSL If you use the DuckDNS addon, you can only access Home Assistant through SSL. However, you might want to retrieve notification images directly from your HA's local IP. You can solve this by using the NGINX Home Assistant SSL proxy addon in addition to DuckDNS. Configuration steps: Install NGINX Home Assistant SSL proxy addon Configure as follows: certfile: fullchain.pem cloudflare: false customize: active: false default: nginx_proxy_default*.conf servers: nginx_proxy/*.conf domain: your_domain.duckdns.org hsts: max-age=31536000; includeSubDomains keyfile: privkey.pem Start the addon, it'll give errors in the log, don't mind those You probably changed the http section of configuration.yaml for the DuckDNS addon, change it to the following: http: use_x_forwarded_for: true trusted_proxies: - 172.30.33.0/24 Reboot Home Assistant If you set port forwarding in your router, you need to change the destination port from 8123 to 443 You can of course keep the source port the same, as long as it forwards to 443 You should now be able to access your Home Assistant instance through both the DuckDNS url and through its local IP, and use the local IP to retrieve notification images.","title":"Notification Debugging - SSL"},{"location":"notifications/notification-debugging-ssl/#notification-debugging-ssl","text":"If you use the DuckDNS addon, you can only access Home Assistant through SSL. However, you might want to retrieve notification images directly from your HA's local IP. You can solve this by using the NGINX Home Assistant SSL proxy addon in addition to DuckDNS. Configuration steps: Install NGINX Home Assistant SSL proxy addon Configure as follows: certfile: fullchain.pem cloudflare: false customize: active: false default: nginx_proxy_default*.conf servers: nginx_proxy/*.conf domain: your_domain.duckdns.org hsts: max-age=31536000; includeSubDomains keyfile: privkey.pem Start the addon, it'll give errors in the log, don't mind those You probably changed the http section of configuration.yaml for the DuckDNS addon, change it to the following: http: use_x_forwarded_for: true trusted_proxies: - 172.30.33.0/24 Reboot Home Assistant If you set port forwarding in your router, you need to change the destination port from 8123 to 443 You can of course keep the source port the same, as long as it forwards to 443 You should now be able to access your Home Assistant instance through both the DuckDNS url and through its local IP, and use the local IP to retrieve notification images.","title":"Notification Debugging - SSL"},{"location":"notifications/notification-usage-and-examples/","text":"Notification Usage and Examples Installation Refer to the integration's installation and configuration pages on the left. General Currently, there are four variables you can set: message : the message you want to show title : the title of your popup [optional] image : http(s) url containing the location of an image [optional] duration : duration (in seconds) for which the popup will be shown [optional] You can also configure actionable notifications, refer to the actionable notifications docs for more info. Text notification action: - service: notify.hass_agent_test_device data: message: \"This is a test message.\" Text notification with title and duration action: - service: notify.hass_agent_test_device data: message: \"This is a test message with title and 3 sec duration.\" title: \"HASS.Agent Test\" data: duration: 3 Image notification action: - service: notify.hass_agent_test_device data: message: \"This is a test message with an image.\" data: image: \"http://10.0.0.6:1234/jpeg/image.jpg\" Camera Proxy You can also use Home Assistant's camera proxy. This way you don't have to share the credentials etc. of your camera. Home Assistant will provide a token that's valid for 5 minutes, so it's safe to use. Example automation that sends an image when the doorbell's pressed (thanks @bharvey88): alias: Send image notification on doorbell trigger: - platform: state entity_id: - binary_sensor.doorbell to: \"on\" condition: [] action: - service: notify.hassagent_desktop data: message: Someone is at the door title: Doorbell data: image: /api/camera_proxy/camera.doorbell duration: 3 mode: single Optionally change hass.local to the mDNS/IP of your Home Assistant instance, and change garden to the name of your camera - or use another variable. Multiple Receivers You can combine multiple notifiers in a notify group: notify: name: hassagent_group platform: group services: - service: device_one - service: device_two Script GUI examples This is the sequence part of a test script to send a text-only message, created through the Home Assistant GUI: This is the same script, but with an image added to the notification: You can use the new Button Card to trigger your test scripts.","title":"Notification Usage and Examples"},{"location":"notifications/notification-usage-and-examples/#notification-usage-and-examples","text":"","title":"Notification Usage and Examples"},{"location":"notifications/notification-usage-and-examples/#installation","text":"Refer to the integration's installation and configuration pages on the left.","title":"Installation"},{"location":"notifications/notification-usage-and-examples/#general","text":"Currently, there are four variables you can set: message : the message you want to show title : the title of your popup [optional] image : http(s) url containing the location of an image [optional] duration : duration (in seconds) for which the popup will be shown [optional] You can also configure actionable notifications, refer to the actionable notifications docs for more info.","title":"General"},{"location":"notifications/notification-usage-and-examples/#text-notification","text":"action: - service: notify.hass_agent_test_device data: message: \"This is a test message.\"","title":"Text notification"},{"location":"notifications/notification-usage-and-examples/#text-notification-with-title-and-duration","text":"action: - service: notify.hass_agent_test_device data: message: \"This is a test message with title and 3 sec duration.\" title: \"HASS.Agent Test\" data: duration: 3","title":"Text notification with title and duration"},{"location":"notifications/notification-usage-and-examples/#image-notification","text":"action: - service: notify.hass_agent_test_device data: message: \"This is a test message with an image.\" data: image: \"http://10.0.0.6:1234/jpeg/image.jpg\"","title":"Image notification"},{"location":"notifications/notification-usage-and-examples/#camera-proxy","text":"You can also use Home Assistant's camera proxy. This way you don't have to share the credentials etc. of your camera. Home Assistant will provide a token that's valid for 5 minutes, so it's safe to use. Example automation that sends an image when the doorbell's pressed (thanks @bharvey88): alias: Send image notification on doorbell trigger: - platform: state entity_id: - binary_sensor.doorbell to: \"on\" condition: [] action: - service: notify.hassagent_desktop data: message: Someone is at the door title: Doorbell data: image: /api/camera_proxy/camera.doorbell duration: 3 mode: single Optionally change hass.local to the mDNS/IP of your Home Assistant instance, and change garden to the name of your camera - or use another variable.","title":"Camera Proxy"},{"location":"notifications/notification-usage-and-examples/#multiple-receivers","text":"You can combine multiple notifiers in a notify group: notify: name: hassagent_group platform: group services: - service: device_one - service: device_two","title":"Multiple Receivers"},{"location":"notifications/notification-usage-and-examples/#script-gui-examples","text":"This is the sequence part of a test script to send a text-only message, created through the Home Assistant GUI: This is the same script, but with an image added to the notification: You can use the new Button Card to trigger your test scripts.","title":"Script GUI examples"},{"location":"notifications/new/notification-actionable/","text":"Actionable Notifications Important: this feature requires at least HASS.Agent 2022.13.0 . Introduction HASS.Agent's actionable notifications work the same way as the companion apps do. Read HA's docs for more info, found here . It basically works as follows: You send a notification, combined with a few actions Each of those actions have a unique name, eg. yes or no It's even better to give them more descriptive names, eg. turn_garden_light_on or activate_alarm Don't worry: that's not what you see in the notification, you can set any title you want When the notification shows, it'll have buttons containing the actions As soon as you click one of the buttons, the action name will get triggered Every automation that has that trigger will activate If that still sounds a bit complex, just follow the examples below and it'll start making sense (hopefully). Preparation You need a notifier entity ready. If you use the legacy integration, check the examples for info on how to do that. Otherwise, you should have it autodetected after installing the new integration . Actionable Notification Let's prepare the notification. For our test, we'll create a script to handle that. In the GUI editor, configure it like this: Or if you're into yaml: alias: Notification - Actionable Test sequence: - service: notify.hass_agent_staging data: title: Test message: This is an actionable test message. data: actions: - action: \"yes\" title: \"Yes\" - action: \"no\" title: \"No\" mode: single icon: mdi:bell We added two actions: yes and no , which will show as Yes and No in the notification. The action value should be descriptive, the title value is what the user gets to see. Action Automations HA needs to know what to do with the triggered actions, so let's make automations to handle that. Create a new automation in the GUI for our yes action, and configure the following trigger: The device_name value helps us bind it to a specific device. Make sure you enter hass_agent_notifications as the Event type . Then the action, it just sends another notification: Save your automation. Now create another automation for our no action, and configure the following trigger: And the action: Save your automation. Testing Restart HA (or reload scripts & automations). When you run the test script, a notification like this should show on your PC: Click Yes , and another popup should show: Done, you've now got actionable notifications! Thanks @fillefilip8 for implementing this!","title":"Actionable Notifications"},{"location":"notifications/new/notification-actionable/#actionable-notifications","text":"Important: this feature requires at least HASS.Agent 2022.13.0 .","title":"Actionable Notifications"},{"location":"notifications/new/notification-actionable/#introduction","text":"HASS.Agent's actionable notifications work the same way as the companion apps do. Read HA's docs for more info, found here . It basically works as follows: You send a notification, combined with a few actions Each of those actions have a unique name, eg. yes or no It's even better to give them more descriptive names, eg. turn_garden_light_on or activate_alarm Don't worry: that's not what you see in the notification, you can set any title you want When the notification shows, it'll have buttons containing the actions As soon as you click one of the buttons, the action name will get triggered Every automation that has that trigger will activate If that still sounds a bit complex, just follow the examples below and it'll start making sense (hopefully).","title":"Introduction"},{"location":"notifications/new/notification-actionable/#preparation","text":"You need a notifier entity ready. If you use the legacy integration, check the examples for info on how to do that. Otherwise, you should have it autodetected after installing the new integration .","title":"Preparation"},{"location":"notifications/new/notification-actionable/#actionable-notification","text":"Let's prepare the notification. For our test, we'll create a script to handle that. In the GUI editor, configure it like this: Or if you're into yaml: alias: Notification - Actionable Test sequence: - service: notify.hass_agent_staging data: title: Test message: This is an actionable test message. data: actions: - action: \"yes\" title: \"Yes\" - action: \"no\" title: \"No\" mode: single icon: mdi:bell We added two actions: yes and no , which will show as Yes and No in the notification. The action value should be descriptive, the title value is what the user gets to see.","title":"Actionable Notification"},{"location":"notifications/new/notification-actionable/#action-automations","text":"HA needs to know what to do with the triggered actions, so let's make automations to handle that. Create a new automation in the GUI for our yes action, and configure the following trigger: The device_name value helps us bind it to a specific device. Make sure you enter hass_agent_notifications as the Event type . Then the action, it just sends another notification: Save your automation. Now create another automation for our no action, and configure the following trigger: And the action: Save your automation.","title":"Action Automations"},{"location":"notifications/new/notification-actionable/#testing","text":"Restart HA (or reload scripts & automations). When you run the test script, a notification like this should show on your PC: Click Yes , and another popup should show: Done, you've now got actionable notifications! Thanks @fillefilip8 for implementing this!","title":"Testing"},{"location":"notifications/new/notification-debugging/","text":"Notification Debugging Introduction The info on this page is focussed on making sure notifications work on the client side: HASS.Agent on your PC. HASS.Agent uses Windows' toast notifications system, which is neatly integrated but sometimes refuses to show them. If everything's working on Home Assistant's side (no errors in the logs), but your notifications still aren't showing, chances are there's some setting in Windows that's blocking them. Since release 2022.14.0, HASS.Agent attempts to determine whether Windows allows its notifications to be shown. If it suspects that it's blocked, it'll add the following line to the logs: [NOTIFIER] Showing notifications might fail, reason: ... So if your notification isn't showing, check the logs first (for info on how to do that, check the integration debugging docs , specifically the HASS.Agent section). Windows Notifications Settings Windows manages which notifications are allowed and when. Usually HASS.Agent is allowed by default. If not, notifications aren't shown, even when you've correctly configured Home Assistant. For starters, make sure the HASS.Agent icon is shown next to the clock in your taskbar, and not in the overflow (with the hidden icons). After you've done this, try showing a test notification: Did the notification popup? Great! If not, go to Windows' (new) configuration page and make sure you've enabled Notification access or Notifications , depending on your Windows version: On that same page, make sure HASS.Agent has its checkbox set to On : Optionally, click on HASS.Agent instead of the checkbox, and make sure its settings are as follows: Depending on your Windows version, you may also need to make sure that the Action Center system icon is enabled: Important : if you have focus assist active, you need to add HASS.Agent to the Priority list (thanks @jrnhrmn): How to Customize Focus Assist Priority List in Windows 10 When you've done all this, try the show test notification button again in HASS.Agent. Did the notification show? Great, all done! If not, continue below. Obscure Windows configurations There have been a few reports of users which had to change weird Windows settings before it worked. For starters, if you're using privacy tools like o&o shutup or decrapifier (great tools by the way!), make sure they're not set to block notifications. Sometimes, when telemetry is disabled, it also disables notifications. You can temporarily reenable it with the following Powershell command: Remove-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\DataCollection\" -Name \"AllowTelemetry\" When everything's working, feel free to disable telemetry once again. External links The following links may (or may not) help in further debugging: https://www.surfacetablethelp.com/2017/02/fix-show-app-notifications-option-greyed-out-in-windows-10-settings.html https://www.guidingtech.com/top-ways-to-fix-notifications-not-working-on-windows-11/","title":"Notification Debugging"},{"location":"notifications/new/notification-debugging/#notification-debugging","text":"","title":"Notification Debugging"},{"location":"notifications/new/notification-debugging/#introduction","text":"The info on this page is focussed on making sure notifications work on the client side: HASS.Agent on your PC. HASS.Agent uses Windows' toast notifications system, which is neatly integrated but sometimes refuses to show them. If everything's working on Home Assistant's side (no errors in the logs), but your notifications still aren't showing, chances are there's some setting in Windows that's blocking them. Since release 2022.14.0, HASS.Agent attempts to determine whether Windows allows its notifications to be shown. If it suspects that it's blocked, it'll add the following line to the logs: [NOTIFIER] Showing notifications might fail, reason: ... So if your notification isn't showing, check the logs first (for info on how to do that, check the integration debugging docs , specifically the HASS.Agent section).","title":"Introduction"},{"location":"notifications/new/notification-debugging/#windows-notifications-settings","text":"Windows manages which notifications are allowed and when. Usually HASS.Agent is allowed by default. If not, notifications aren't shown, even when you've correctly configured Home Assistant. For starters, make sure the HASS.Agent icon is shown next to the clock in your taskbar, and not in the overflow (with the hidden icons). After you've done this, try showing a test notification: Did the notification popup? Great! If not, go to Windows' (new) configuration page and make sure you've enabled Notification access or Notifications , depending on your Windows version: On that same page, make sure HASS.Agent has its checkbox set to On : Optionally, click on HASS.Agent instead of the checkbox, and make sure its settings are as follows: Depending on your Windows version, you may also need to make sure that the Action Center system icon is enabled: Important : if you have focus assist active, you need to add HASS.Agent to the Priority list (thanks @jrnhrmn): How to Customize Focus Assist Priority List in Windows 10 When you've done all this, try the show test notification button again in HASS.Agent. Did the notification show? Great, all done! If not, continue below.","title":"Windows Notifications Settings"},{"location":"notifications/new/notification-debugging/#obscure-windows-configurations","text":"There have been a few reports of users which had to change weird Windows settings before it worked. For starters, if you're using privacy tools like o&o shutup or decrapifier (great tools by the way!), make sure they're not set to block notifications. Sometimes, when telemetry is disabled, it also disables notifications. You can temporarily reenable it with the following Powershell command: Remove-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\DataCollection\" -Name \"AllowTelemetry\" When everything's working, feel free to disable telemetry once again.","title":"Obscure Windows configurations"},{"location":"notifications/new/notification-debugging/#external-links","text":"The following links may (or may not) help in further debugging: https://www.surfacetablethelp.com/2017/02/fix-show-app-notifications-option-greyed-out-in-windows-10-settings.html https://www.guidingtech.com/top-ways-to-fix-notifications-not-working-on-windows-11/","title":"External links"}]}