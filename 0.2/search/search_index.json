{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"contributing/","title":"Developing / Contributing","text":"<p>There are many ways you can contribute to help make HASS.Agent better for everyone.</p>"},{"location":"contributing/#lowno-code-ways-to-help-out","title":"Low/No-code ways to help out","text":"<p>There are lots of ways to help out with HASS.Agent, even if you can't code. Here are some of the ways you can contribute:</p> <ul> <li>Submitting Github issues whenever you find an error or problem with any aspect of HASS.Agent. Use this guide for more info.</li> <li>Helping other users of HASS.Agent with setup and usage. You can help other users in our discord server here.</li> <li>Adding and updating everything found here in the HASS.Agent Documentation. More info can be found below.</li> <li>Translating HASS.Agent's app and documentation to reach more people. There is a specific guide for this, which you can find here.</li> </ul>"},{"location":"contributing/#programming-developing","title":"Programming / Developing","text":"<p>If you are a programmer and want to help out check out these sections:</p> <ul> <li>C#</li> <li>Python</li> </ul>"},{"location":"contributing/#c-and-windows-apps","title":"C# and windows apps","text":"<p>If you have experience in C# and creating native windows applications, we could use your help with creating the HASS.Agent client and Satellite service. If you would like to learn more, check out the dedicated section here.</p>"},{"location":"contributing/#python-and-homeassistant-integrations","title":"Python and Homeassistant integrations","text":"<p>If you have experience in python and creating homeassistant integrations, you can help us develop the HACS integration that connects to HASS.Agent. If you would like to learn more, check out the dedicated section here.</p>"},{"location":"contributing/#helping-out-with-the-documentation","title":"Helping out with the Documentation","text":"<p>You don't need to be a programmer or developer to help out with the documentation. 99% of the documentation is written in markdown, which is a very easy and widely used markup language to add formatting to plain text. If you would like to learn more about markdown click here.</p> <p>There are three main ways you can edit the documentation:</p> <ul> <li>Easiest Way: The easiest way to contribute is to submit github issues or message developers in the discord server to have them make the edits for you, more info on this here.</li> <li>Simple Markdown Way: There is an easy markdown editor hosted by github that you can use to make small changes to pages, find info on that here.</li> <li>Local/Full Project: If you want to add new pages or features and test changes locally you can use docker and VSCode to edit the documentation, more info here.</li> </ul>"},{"location":"contributing/need-help/","title":"We need help","text":"Link to original post <p>This page is an updated repost of the original one by LAB02Research, you can find the original one here.</p>"},{"location":"contributing/need-help/#welcome-to-the-evolving-world-of-hassagent","title":"Welcome to the Evolving World of HASS.Agent!","text":"<p>If you've noticed \"new\" versions of HASS.Agent and fresh documentation that aren't in the original HASS.Agent repository or website, don't fret. Unfortunately, the lead developer of HASS.Agent faced challenges that halted further development. But fear not \u2013 the community stepped up!</p> <p>Thanks to the efforts of some dedicated community members, HASS.Agent is not only still operational but has gained some fantastic new features! This \"unofficial\" version also brings about a fresh documentation update.</p> <p>However, these changes aren't without their challenges. If you have expertise in any of the following languages, your help would be immensely valuable. Each language section includes a link to relevant tasks that could use your expertise.</p> <p>Your involvement and contributions mean a lot to us. Thanks for being part of the HASS.Agent community!</p> <p>Cheers, The HASS.Agent Team</p>"},{"location":"contributing/need-help/#languagesways-to-help-out","title":"Languages/Ways to help out","text":"<ul> <li>C# is the main language HASs.Agent uses, it is used to build out all of the client and interface you interact with on your computer.</li> <li>Python is the language used to develop the homeassistant integration that connects to the entities and sensors.</li> <li>Markdown/documentation Markdown is used to develop the documentation, if you haven't heard of it yet it is basically just plain text, very easy to learn.</li> <li>Translating is a very important part of HASS.Agent that we cannot do on our own, it's extremely simple, you read a phrase in english and write the version in your chosen language.</li> </ul>"},{"location":"contributing/need-help/#current-code-maintainersdevelopers","title":"Current Code Maintainers/Developers","text":"<p>You can find a list of the current developers here.</p>"},{"location":"contributing/reporting-issues/","title":"Reporting Issues and Feature Requests","text":"<p>We value your feedback! If you encounter issues or have suggestions for new features, there are multiple ways to report them.</p>"},{"location":"contributing/reporting-issues/#discord","title":"Discord","text":"<p>Join our Discord server to engage with the community, share your thoughts, and get help; here.</p>"},{"location":"contributing/reporting-issues/#github-issues","title":"GitHub Issues","text":"<p>Submitting issues on GitHub allows for structured tracking and collaboration. Follow the steps below:</p> <ol> <li> <p>Navigate to the Relevant Repository:</p> <ul> <li>For Windows app features/issues</li> <li>For Documentation features/issues</li> <li>For Integration issues</li> </ul> </li> <li> <p>Access the \"Issues\" Tab:</p> <ul> <li>Click on the \"Issues\" tab at the top of the repository.</li> </ul> </li> <li> <p>Select the Appropriate Template:</p> <ul> <li>Create a new issue by clicking the \"New Issue\" button.</li> <li>Choose the relevant template for bug reports or feature requests.</li> </ul> </li> <li> <p>Provide Detailed Information:</p> <ul> <li>Fill out the issue template with as much detail as possible.</li> <li>Include permalinks by clicking the \"P\" icon to the right of any title in the documentation, it will append a <code>#</code> and the title slug to the URL in your browser. You can now copy the link and place it in your github issue.</li> </ul> </li> <li> <p>Submit Your Issue:</p> <ul> <li>Once filled, click on \"Submit new issue.\"</li> </ul> </li> </ol>"},{"location":"contributing/reporting-issues/#tips-for-effective-reporting","title":"Tips for Effective Reporting","text":"<ul> <li>Be Descriptive: Clearly describe the issue or feature request.</li> <li>Reproducible Steps: If applicable, provide step-by-step instructions to reproduce the issue.</li> <li>Attach Screenshots: Include screenshots to help illustrate the problem.</li> <li>Use Permalinks: Utilize permalinks by clicking the \"P\" icon to the right of any title before copying the URL.</li> </ul>"},{"location":"contributing/reporting-issues/#issue-templates","title":"Issue Templates","text":"<p>To streamline the reporting process, we have specific templates for bug reports and feature requests. Choose the relevant template when creating a new issue. Each Repo contains different templates but the main ones are listed here:</p> <ul> <li>Bug Reports: For any problems or bugs you encounter while using HASS.Agent.</li> <li>Feature Requests: For any features or suggestions you have to improve HASS.Agent.</li> </ul> <p>Thank you for contributing to the improvement of Hass.agent!</p>"},{"location":"contributing/reporting-issues/#permalinks","title":"Permalinks","text":"<p>Permalinks are permanent links that point to a specific section in the documentation. A permalink can point to any heading found in the documentation. If you are asked to provide a link to the place where you are having issues or want something new make sure to use a permalink. You can get a permalink by following these steps:</p> <ol> <li>Find the heading directly above the section your are linking to.</li> <li>Click the \"P\" icon to the right of the heading.</li> <li>Copy the address from the top of your browser.</li> </ol> Tip <p>For a faster way to get a permalink you can right click the \"P\" icon and select \"Copy Link Address\".</p>"},{"location":"contributing/developer-resources/","title":"Extra Resources for Developers","text":"<p>This section contains extra and shared resources for developers. You will find information in here that will be used across parts of HASS.Agent.</p>"},{"location":"contributing/developer-resources/#versioning","title":"Versioning","text":"<p>The HASS.Agent client uses a version system that is shared with the documentation, you can read more on this here.</p>"},{"location":"contributing/developer-resources/current-devs/","title":"Current Code Maintainers","text":"<p>Here you can find the list of current developers and what they help contribute. You will find discord and github links if you need to contact them for help with development.</p> <p>Warning</p> <p>Do not spam We have given you these links so you can use them correctly and to get help, they are not for you to message about some small issue that the rest of the community can help with. If you need help with their specific contributions or need to message the lead devs you can use the links in the tabs below.</p> Get added to this list <p>If you actively maintain the codebase for a week or more, head over to the Discord server and ask one of the lead devs to verify you and add you to this list.</p> Client/AppDocumentation <p>Lead Dev</p> <ul> <li>amadeo-alex: Creator of the unofficial version of HASS.Agent<ul> <li>Discord: Amadeo</li> </ul> </li> </ul> <p>Other Contributors</p> <ul> <li>MinimumDowntime: Github Actions Workflows<ul> <li>Discord: Automaton</li> </ul> </li> </ul> <p>Lead Dev</p> <ul> <li>DrR0x-Glitch: Creator of this documentation<ul> <li>Discord: DrR0x</li> </ul> </li> </ul>"},{"location":"contributing/developer-resources/version-system/","title":"HASS.Agent's version system","text":"<p>Warning</p> <p>You must read and understand this entire page if you want to be able to develop any part of HASS.Agent. It helps you to understand the versioning and how to understand different versions of HASS.Agent</p>"},{"location":"contributing/developer-resources/version-system/#overview","title":"Overview","text":""},{"location":"contributing/developer-resources/version-system/#hassagent-uses-two-main-version-systems","title":"HASS.Agent uses TWO main version systems","text":""},{"location":"contributing/developer-resources/version-system/#client","title":"Client","text":"<ul> <li>Client</li> <li>Documentation</li> </ul> <p>The client and documentation share a version system to make it easy for users to find documentation for any version.</p>"},{"location":"contributing/developer-resources/version-system/#integration","title":"Integration","text":"<p>The integration has its own version system similar to HASS's own system.</p>"},{"location":"contributing/developer-resources/version-system/#clientdocumentation-versioning","title":"Client/Documentation Versioning","text":"<p>HASS.Agent's client and documentation use a semantic-style version system, however some parts are specific to HASS.Agent, so read on.</p>"},{"location":"contributing/developer-resources/version-system/#stable-release-versions","title":"Stable release versions","text":"<p>All release version numbers of HASS.Agent look like this: <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code> An example of a released version number: <code>1.5.4</code></p>"},{"location":"contributing/developer-resources/version-system/#major","title":"Major","text":"<p>The major version number is rarely changed, if you are reading this documentation you will most likely never have to change this. But for your information it is only changed when breaking API updates are added. So version <code>2.*.*</code> client, is not backwards compatible with version <code>2.*.*</code>. This also means that all versions of <code>1.*.*</code> will be backwards compatible, there may be small warnings or missing features but all previous API calls and features work as intended. Basically this version number only needs to be incremented when no backwards compatability is added. This also forces the dev team to not release backwards compatible updates very often.</p> Example <ul> <li>Version <code>1.4.2</code> of the client does have backwards compatibility with version <code>1.8.3</code></li> <li>Version <code>2.3.2</code> of the lient does not have backwards compatibility with version <code>1.8.3</code></li> </ul>"},{"location":"contributing/developer-resources/version-system/#minor","title":"Minor","text":"<p>The minor version number is to be incremented whenever new features are added in a backwards compatible way. More than one feature can be added per version number, however they all have to have backwards compatibility.</p> Example <ul> <li>Version <code>1.4.1</code> of the client will have less features than <code>1.5.0</code></li> <li>Version <code>1.6.0</code> of the client will have more features than <code>1.5.0</code></li> </ul> <p>Note that in both of these examples the versions are backwards compatible.</p>"},{"location":"contributing/developer-resources/version-system/#patch","title":"Patch","text":"<p>The patch version number is to be incremented whenever bug fixes(patches) are released in a backwards compatible way. All bug fixes are to be released in a backwards compatible way anyway, so basically everytime a patch is released, this number will be incremented. The important thing to note about the patch version number is that no new features can be added.</p> Example <ul> <li>Version <code>1.3.0</code> of the client will have more bugs than <code>1.3.1</code> of the client</li> <li>Version <code>1.5.6</code> of the client will have more patches and therefore less bugs, than <code>1.5.2</code> of the client</li> </ul> <p>No new features are added between the versions in these examples. Only bug fixes and patches are added.</p>"},{"location":"contributing/developer-resources/version-system/#beta-developmental-versions","title":"Beta developmental versions","text":"<p>During the development of a new version of the HASS.Agent client beta versions of the code will exist. These versions will be denoted like this: <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;-beta.&lt;beta-version&gt;</code> You will notice the only difference is the addition of the <code>-beta</code> flag and the fourth version number <code>&lt;beta-version&gt;</code> The first beta version of the example upcoming <code>1.5.3</code> release would look like this: <code>1.5.3-beta.0</code></p>"},{"location":"contributing/developer-resources/version-system/#beta-version","title":"Beta version","text":"<p>The beta version number is to be incremented whenever a new beta version of the code is built or released for testing.</p> Example <p>The current stable version is <code>2.5.4</code> and the dev team is working on a new feature</p> <p>The beta version during the first development update should be <code>2.6.0-beta.0</code></p> <p>Everytime a new development update is added to this feature the last number should be incremented.</p> <p>The dev team has now finished working on this feature</p> <p>The stable version for release should be <code>2.6.0</code></p> <p>The dev team has found bugs and is working on a hotfix. They have completed 2 updates to work on this hotfix</p> <p>The current beta version should be <code>2.6.1-beta.1</code> (1)</p> <p>They have now completed this hotfix</p> <p>The stable release version should be <code>2.6.1</code></p> <ol> <li>We use 1 for the <code>&lt;beta-version&gt;</code> here, because development update 1 was .0 and development update 2 was .1</li> </ol>"},{"location":"contributing/developer-resources/version-system/#other-info","title":"Other info","text":""},{"location":"contributing/developer-resources/version-system/#resetting-numbers","title":"Resetting numbers","text":"<p>Whenever a \"parent\" version number is incremented the \"children\" numbers must be rest to zero.</p> Example <ul> <li>If the current version is <code>1.5.6</code> and a new backwards compatible feature is being added the new version will be <code>1.6.0</code></li> <li>If the current version is <code>1.5.6</code> and a new backwards incompatible feature is being added the new version will be <code>2.0.0</code></li> </ul>"},{"location":"contributing/developer-resources/version-system/#documentation","title":"Documentation","text":"<p>The documentation operates on version of just <code>&lt;major&gt;.&lt;minor&gt;</code> This will still match the client because no major documentation change will happen during a patch of the HASS.Agent client.</p> <p>The other difference between this version system and the client's version system is that beta version attributes will not exist. In the documentation if the upcoming release is going to be <code>1.5.0</code> and the current beta version is <code>1.5.0-beta.3</code> then the docs will have <code>1.5</code> with the label/attribute <code>beta</code>.</p>"},{"location":"contributing/hass-agent-app/","title":"Developing the HASS.Agent Client","text":""},{"location":"contributing/hass-agent-documentation/","title":"Contributing to the HASS.Agent Documentation","text":"<p>Easier Editor</p> <p>If you do not understand the basics of VSCode or git version control then take a look at this page.</p> <p>Warning</p> <p>Make sure you understand the HASS.Agent client version system before continuing. You can find info on it here.</p>"},{"location":"contributing/hass-agent-documentation/#overview","title":"Overview","text":"<p>The HASS.Agent docs are built on MKDocs, which is a python based tool that allows you to write documentation in simple markdown. Most of the docs is written in markdown and is therefore easily editable. However submitting these edits and testing them requires a basic understanding of git and github version control.</p>"},{"location":"contributing/hass-agent-documentation/#the-documentation-versions","title":"The documentation versions","text":"<p>At the top of the documentation you will find a selector to the write of the title. This is a version selector that allows you to view different versions of the documentation. You will notice there are two special versions and the rest follow the format of <code>*.*</code>:</p> Version Description <code>beta</code> The current beta build of the documentation, used for trying new features and writing docs for upcoming features of HASS.Agent. <code>latest</code> The current latest release of HASS.Agent, this is also the default version. <code>*.*</code> Older versions of the docs, these are not editable. These are known as <code>old-versions</code> Example: <code>1.5</code>"},{"location":"contributing/hass-agent-documentation/#github-structure","title":"Github Structure","text":"<p>The repo for the documentation is linked at the top right of the documentation at all times and is also available here. Go ahead and open it in another tab to reference as you go through this section.</p>"},{"location":"contributing/hass-agent-documentation/#branches-overview","title":"Branches Overview","text":"<p>The repo contains three branches:</p> Branch Description <code>main</code> Contains the files used to maintain the <code>latest</code><sup>1</sup> version of the documentation. <code>beta</code> Contains the files developing the next release of the documentation, this is also the <code>beta</code><sup>1</sup> version of the documentation. <code>gh-pages</code> Contains the built files of the documentation, this repo is not to be touched, everything is written in HTML, CSS and JS. All the files are auto-generated during builds of the documentation."},{"location":"contributing/hass-agent-documentation/#why-two-separate-branches","title":"Why two separate branches?","text":"<p>We use two separate branches in the github as it allows us to work on new versions of the documentation while fixing issues with the current documentation. This is great for us as we can test new features online and send them to people without accidently destroying the <code>latest</code><sup>1</sup> documentation. However this does create a few guidelines that need to be followed:</p> <ul> <li>If you want your changes to be applied in all future versions of the documentation you MUST make these changes in the <code>beta</code> branch.</li> <li>Any changes made to the <code>main</code> branch will be immediately applied to the <code>latest</code><sup>1</sup> version however they will not be included in future versions of the documentation.</li> </ul> <p>If you would like to know why these restrictions exist checkout this section.</p>"},{"location":"contributing/hass-agent-documentation/#deploying-the-documentation","title":"Deploying the documentation","text":"<p>After merges occur to either the <code>beta</code> or <code>main</code> branch specific github workflows will run that wil automatically build and deploy the correct version of the documentation. Therefore you do not need to ever do any sort of building or deploying.</p>"},{"location":"contributing/hass-agent-documentation/#releasing-the-beta-version","title":"Releasing the <code>beta</code> version","text":"<p>When it comes time to release the <code>beta</code><sup>1</sup> version of the documentation as the <code>latest</code><sup>1</sup> version, one of the admins of the github will manually trigger a workflow that will deploy and build the <code>beta</code> branch as the <code>latest</code><sup>1</sup> version and also deploy a copy for the <code>beta</code><sup>1</sup> version. After the deployment a merge will be triggered to merge the <code>beta</code> branch with the <code>main</code> branch. We will do our best to bring over changes from the <code>main</code> branch to the <code>beta</code> but we cannot guarantee, this is the reason for this section.</p>"},{"location":"contributing/hass-agent-documentation/#why-are-there-restrictions","title":"Why are there restrictions?","text":"<p>These restrictions exist because of the way the system is built. Here is a diagram showing an example of changes made to the homepage:</p> <pre><code>flowchart LR\n  beta&gt;Beta Branch]\n  main&gt;Main Branch]\n\n  beta-changes(Example change to homepage)\n  latest-changes(Different change to homepage)\n\n  beta-pr([Beta PR merged])\n  latest-pr([Main PR merged])\n\n\n  beta--&gt;beta-pr\n  beta-changes--&gt;|Commit changes to beta|beta-pr\n  main--&gt;latest-pr\n  latest-changes--&gt;|Commit changes to main|latest-pr\n\n  beta-pr --&gt; |Deploy beta version| beta-deployment\n  latest-pr --&gt; |Deploy latest version| latest-deployment\n\n  beta-deployment{{Beta Deployment}}\n  latest-deployment{{Latest Deployment}}</code></pre> <p>You will notice that now the homepage is different on each of these versions, specifically the homepage on the <code>main</code> branch has been added changes that are not included in the <code>beta</code> branch version. Now if we have a look at what happens when the beta version is released as latest:</p> <pre><code>flowchart LR\n  beta&gt;Beta Branch]\n  main&gt;Main Branch]\n\n  beta-deployment{{Beta Deployment}}\n  latest-deployment{{Latest Deployment}}\n\n  beta --&gt; |Deploy to latest| latest-deployment\n  beta --&gt; |Deploy copy for next beta version| beta-deployment\n\n  merge([Merge beta into main])\n\n  beta --&gt; |Overwrite main with beta| merge\n  main --&gt; |Changes overwritten by beta| merge\n\n  main --&gt; |Deploy main as it's version number| gh-pages[(Old Versions)]</code></pre> <p>When we release the <code>beta</code><sup>1</sup> version, we copy the <code>latest</code><sup>1</sup> version into the <code>old-versions</code> by changing it's name to it's version number. Then the <code>beta</code><sup>1</sup> version is deployed to <code>latest</code><sup>1</sup> and a copy is created for developing the next version. Finally the <code>beta</code> branch is merged with the <code>main</code> branch. This means that any changes added into the <code>main</code> branch will be overwritten by the <code>beta</code> branch.</p> <p>Now that you understand how the system works you can see why changes added to the <code>main</code> branch are not included in future versions of the documentation.</p> <ol> <li> <p>This corresponds to the label in the documentation version selector.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"contributing/hass-agent-documentation/adding-pages/","title":"Adding new pages","text":"<p>You can add new pages anywhere in the documentation if you feel the need to. However we do recommend checking in with the other docs developers before adding a new page, to make sure it is needed.</p>"},{"location":"contributing/hass-agent-documentation/adding-pages/#creating-the-page","title":"Creating the page","text":"<p>You start by creating a new .md with an all lowercase name, you can use <code>-</code> dashes in place of spaces. For example this file is called <code>adding-pages.md</code> This file should be located in the section you want it, for example; if you want a new page in this documentation contributing section you will create the page in the <code>docs/contributing/hass-agent-documentation/</code>.</p> <p>Now you can use a heading 1 to indicate the name of this page. Example: <code># Adding new pages</code></p>"},{"location":"contributing/hass-agent-documentation/adding-pages/#adding-it-to-the-navtree","title":"Adding it to the navtree","text":"<p>You now need to open the <code>mkdocs.yml</code> file in the root of the documentation. At the very bottom you will see:</p> <pre><code>nav:\n  - Home: index.md\n</code></pre> <p>To add your page you need to find the section you have placed your file in, for example a file placed in the <code>docs/contributing/hass-agent-documentation</code> should be added under the:</p> <pre><code>nav:\n  - Helping Out:\n      - Developing the Documentation:\n</code></pre> <p>You create a new entry by indenting and adding a <code>-</code> and then writing the name of your page that you want in the sidebar navigation, so keep it short. Then you add a <code>:</code> and follow it by the directory of the file.</p> Note <p>This directory starts in the docs folder so you will just write <code>contributing/hass-agent-documentation</code>, not <code>docs/contributing/hass-agent-documentation</code>.</p>"},{"location":"contributing/hass-agent-documentation/adding-pages/#editing-and-testing-the-page","title":"Editing and Testing the page","text":"<p>You can now edit the page and fill it with content, all of the changes should show in your browser and the page should be visible in the left navigation sidebar.</p>"},{"location":"contributing/hass-agent-documentation/development-lifecycle/","title":"The development lifecycle","text":""},{"location":"contributing/hass-agent-documentation/development-lifecycle/#overview","title":"Overview","text":"<p>This page contains all the information about the development lifecycle of the documentation. Start here with this diagram:</p>"},{"location":"contributing/hass-agent-documentation/development-lifecycle/#this-is-a-flowchart-you-can-reference-which-has-the-timeline-of-events-happening-during-development","title":"This is a flowchart you can reference which has the timeline of events happening during development","text":"<pre><code>flowchart TB\n  beta-changes(\"Submit PR with changes\")\n  style beta-changes fill:#3395C2\n  beta-pr&gt;Beta PR merged]\n\n  beta-changes--&gt;|Approve PR|beta-pr\n  beta-branch===beta-pr\n\n  beta-pr --&gt; |Deploy beta version| beta-deployment{{Beta Deployment}}\n\n  beta-pr === start-beta-release\n\n  start-beta-release --&gt; |Deploy new Beta version| beta-deployment\n\n  subgraph subg [\"Release Beta\"]\n    style subg fill:#0000, stroke:#CCCCCC, stroke-width:5px\n\n    start-beta-release&gt;Prepare beta for Release] --&gt; |Deploy beta as latest| latest-deployment{{Latest Deployment}}\n\n\n    start-main-release&gt;Prepare main for Release] ==o merge-beta\n\n    start-beta-release ==&gt; |Merge beta with main| merge-beta&gt;Merge beta]\n\n    start-main-release --&gt; |Deploy as version number into old versions| old-versions[(Old Versions)]\n  end\n\n  main-branch ==== start-main-release\n\n  merge-beta ==&gt; new-beta-branch&gt;Updated Beta Branch]\n  merge-beta ==&gt; new-main-branch&gt;Updated Main Branch]\n\n  beta-branch&gt;Beta Branch]\n  main-branch&gt;Main Branch]</code></pre> <p>The highlighted blue node is where your changes will be entered into the process. You will create a Pull Request to have your code reviewed and then merged into the specified branch.</p>"},{"location":"contributing/hass-agent-documentation/development-lifecycle/#picking-a-branch","title":"Picking a branch","text":"<p>At the start of each change you want to work on you will first workout which branch to use. 99% of the time you should use the <code>beta</code> branch so that your changes are included in future versions of the documentation.</p>"},{"location":"contributing/hass-agent-documentation/development-lifecycle/#editing-files","title":"Editing files","text":""},{"location":"contributing/hass-agent-documentation/development-lifecycle/#starting-development","title":"Starting development","text":"<p>To start off you will run <code>docker-compose up</code> to start the docker container and live reload server.</p>"},{"location":"contributing/hass-agent-documentation/development-lifecycle/#modifying-and-saving-markdown-files","title":"Modifying and saving markdown files","text":"<p>After selecting a branch you will modify any markdown files you want and save the changes. After saving, the localhost will reload and you can check your changes. For an in-depth tutorial on how to modify all files and the specific features/syntax included in this documentation check out this page.</p>"},{"location":"contributing/hass-agent-documentation/development-lifecycle/#uploading-changes","title":"Uploading changes","text":""},{"location":"contributing/hass-agent-documentation/development-lifecycle/#commiting-to-your-fork","title":"Commiting to your fork","text":"<p>After all edits have been made you can commit the changes to your repo. You should follow these main guidelines:</p> <ul> <li>There is such thing as too many commits. As much as we want you to separate each change into it's own commit try to not do 100 commits.</li> <li>Also don't do just 1 commit, if you only fix 1 file than 1 commit is fine, but if you have edited multiple files then more than 1 commit is appreciated.</li> <li>Make proper commit messages; don't just say <code>fixed grammar</code>, specify the page and what section you have fixed.</li> </ul>"},{"location":"contributing/hass-agent-documentation/development-lifecycle/#creating-a-pr","title":"Creating a PR","text":"<p>After you finalise your edits and have commited them all to your fork you can create a PR back to the documentation repo. Once again the same rules apply as commit messages, try to make them specific. After submitting your PR it will be reviewed and accepted by one of our admins and then it will enter the workflow found here.</p>"},{"location":"contributing/hass-agent-documentation/development-lifecycle/#done","title":"Done","text":"<p>Your changes will now be live here on the documentation! You can check them out by navigating to the page you modified.</p>"},{"location":"contributing/hass-agent-documentation/development-lifecycle/#lifecycle","title":"Lifecycle","text":"<p>This is a diagram of the development lifecycle:</p> <pre><code>flowchart LR\n  pick-branch(Pick a Branch) --&gt; start-dev(Start Development) --&gt; make-changes(Make Changes) --&gt; errors?{Errors?} --&gt; |Yes| make-changes\n\n  errors? --&gt; |No| commit(Commit changes) --&gt; pr(Create PR) --&gt; |PR Approved| merge([Merge PR, start again]) --&gt; pick-branch</code></pre>"},{"location":"contributing/hass-agent-documentation/development-lifecycle/#further-reading","title":"Further Reading","text":"<p>Now that you understand the basic workflow of editing the docs you can checkout these guides to get started on editing:</p> <ul> <li>Editing Pages - Markdown</li> <li>Adding Pages</li> <li>Special Pages - Other files</li> </ul>"},{"location":"contributing/hass-agent-documentation/easy-editing/","title":"Easier method of editing the documentation","text":"<p>You can easily edit parts of pages by clicking the edit button at the top right of any page. It will link you to github and help you fork the repo and edit the file.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/","title":"Editing the documentation files","text":"<p>Note</p> <p>Before you read through here make sure you understand the Development Lifecycle and have finished the Setup Guide.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#directory-structure","title":"Directory Structure","text":"<p>To start off with you will want to understand the directory structure of the documentation.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#root-directory","title":"Root directory","text":"<p>At the root of the project you will see a directory structure similar to this:</p> <pre><code>\u251c\u2500\u2500\u2500.github\n\u2502   \u251c\u2500\u2500\u2500ISSUE_TEMPLATE\n\u2502   \u2514\u2500\u2500\u2500workflows\n\u251c\u2500\u2500\u2500docs\n\u251c\u2500\u2500\u2500overrides\n\u2502   \u251c\u2500\u2500\u2500home.html\n\u2502   \u2514\u2500\u2500\u2500main.html\n\u251c\u2500\u2500\u2500mkdocs.yaml\n\u2514\u2500\u2500\u2500requirements.txt\n</code></pre>"},{"location":"contributing/hass-agent-documentation/editing-files/#important-files","title":"Important files","text":"<ul> <li><code>mkdocs.yaml</code>: The top-level configuration of the documentation. Holds information such as the navtree and plugins used.</li> <li><code>requirements.txt</code>: Used to hold all versions of dependencies required for the documentation. You will not need to edit this.</li> </ul>"},{"location":"contributing/hass-agent-documentation/editing-files/#important-directories","title":"Important directories","text":"<ul> <li> <p><code>.github</code>: This folder contains information for github such as the issue templates and the workflows.</p> </li> <li> <p><code>docs</code>: This folder contains all of the files used to make the pages of the documentation. This is where you will find the markdown files.</p> </li> <li> <p><code>overrides/</code>: This folder contains \"Theme Overrides\", which allow us to have very fine control over the documentation.</p> </li> </ul>"},{"location":"contributing/hass-agent-documentation/editing-files/#other-directories","title":"Other directories","text":"<p>There are some other files/folders you will find in your project directory such as <code>venv/</code>, <code>.gitignore</code> and <code>README.md</code>. These are all files that will not need to be edited so I don't explain them here.</p> <p>Special Files</p> <p>Most of these files/folders are talked about in more detail on the Special Files page.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#docs-directory-structure","title":"<code>docs/</code> Directory Structure","text":"<p>The <code>docs/</code> folder is where you will be spending the majority of the time. It contains all of the <code>*.md</code> files as well as the assets used in the documentation. The basic directory structure looks like this:</p> <pre><code>\u251c\u2500\u2500\u2500assets\n\u2502   \u2514\u2500\u2500\u2500images\n\u2502       \u251c\u2500\u2500\u2500icons\n\u2502       \u251c\u2500\u2500\u2500logo\n\u2502       \u2514\u2500\u2500\u2500screenshots\n\u251c\u2500\u2500\u2500contributing\n\u251c\u2500\u2500\u2500getting-started\n\u251c\u2500\u2500\u2500layouts\n\u251c\u2500\u2500\u2500stylesheets\n\u2514\u2500\u2500\u2500index.md\n</code></pre>"},{"location":"contributing/hass-agent-documentation/editing-files/#assets","title":"Assets","text":"<p>This folder contains the assets used in the documentation. This folder mainly contains images at the moment. You will find it is organised into subfolders, in this case just <code>images/</code>. When you need to reference any image you will be navigating here.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#special-directories","title":"Special Directories","text":"<ul> <li> <p><code>layouts/</code>: Contains the images and layouts used across the documentation for specific usecases. Currently it just hold data for Jinja templates that make up the social cards.</p> </li> <li> <p><code>stylesheets/</code>: Contains the extra <code>*.css</code> files used to overwrite documentation styling. Things such as the color scheme is found here.</p> </li> </ul>"},{"location":"contributing/hass-agent-documentation/editing-files/#other-directories_1","title":"Other Directories","text":"<p>The rest of the directories found here are sections of the documentation. Each one of these directories corresponds to a section. For example the <code>contributing/</code> directory corresponds to the \"Helping Out\" section you are in right now.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#indexmd-special-file","title":"<code>index.md</code> - special file","text":"<p><code>index.md</code> is a special file that you will find in every folder that holds <code>*.md</code> files. This file is the \"Home\" of every folder. So when it is in the root <code>docs/</code> folder it is the homepage for the entire site. Another example is the one in the <code>contributing/</code> folder that is the home of the \"Helping Out\" section, and so on and so forth.</p> <p>Special Case: Homepage</p> <p>The <code>index.md</code> file in the root <code>docs/</code> directory doesn't contain any actual markdown. This is because it is a fully custom page that is written in html and css as a theme override, there is more information about it here.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#intro-to-markdown","title":"Intro to Markdown","text":"<p>This section will serve as a very basic intro to markdown. As well as describe the extra features included with the documentation that are not in normal markdown.</p> <p>To start off with, most of the stuff written will just be plain text, for example this section you are reading right now is just plain text.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#simple-formatting-options","title":"Simple Formatting Options","text":"<ul> <li>Titles: <code># Title</code> We use hashtags to indicate titles, you can go from heading 1 to 6, 1 being the largest heading and 6 being the smallest. This number corresponds to the number of hashtags. A heading 3 would look like this: <code>### Title</code>.</li> <li>Bold: <code>**Bold text**</code> We use Double Asterisks to indicate bold text.</li> <li>Code blocks: <code>This is a `Code block`, specifically an inline one</code> Multiline ones are also available, checkout this section for more</li> <li>Lists: <code>- List item</code> A dash indicates a bulleted list, like this one. And for numbered you just write <code>1. Numbered list item</code></li> </ul> <p>Callouts like this one can be written using a <code>&gt;</code> at the start: <code>&gt; Example callout</code></p> <p>You will notice all of these require a certain character followed by a space. If you do not include a space between the special character and the text it will not showup correctly.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#hyperlinks","title":"Hyperlinks","text":"<p>We use the standard markdown implementation for hyper links however some extra attributes can be added. Here is a standard link with the text home and the link to the homepage:</p> <pre><code>[home](https://hass-agent.github.io/latest/)\n</code></pre>"},{"location":"contributing/hass-agent-documentation/editing-files/#inside-links","title":"Inside Links","text":"<p>Inside links point to pages or sections inside of this documentation, for example I want to navigate a user to the forking section of the setup for editing the documentation:</p> <pre><code>[More info on forking the repo](./setup.md/#forking-the-repo)\n</code></pre> <p>More info on forking the repo</p> <p>This link points to a local file by using a <code>./</code> followed by the name of the file. If you want to go up a directory you use <code>../</code> These can be chained together to get anywhere in the documentation. E.g <code>../../getting-started/index.md</code></p> <p>The hashtag specifies which section of the page you want to link to, vscode should autocomplete this for you but if not you can click the P icon to the right of any heading in the docs and the url at the top will end with the correct hashtag link to use.</p> <p>Example</p> <p>This section we are in right now can be linked to with <code>#inside-links</code></p>"},{"location":"contributing/hass-agent-documentation/editing-files/#external-links","title":"External Links","text":"<p>You can add links that point to any address however most of the time they should be opened in a new tab. Unless the link is a direct file download link you need to add this attribute to tell the browser to open the link in a new tab: <code>{: target=\"\\_blank\"}</code></p> Example link to open google in a new tab<pre><code>[google](https://google.com){: target=\"\\_blank\"}\n</code></pre> <p>google</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#newlines-and-document-structure","title":"Newlines and document structure","text":"<p>Every different \"text-type\" should have a newline separating it from the previous one. So there should be a new line between titles and paragraphs and also a new line between a title and a group of list items, etc.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#separating-paragraphs","title":"Separating paragraphs","text":"<p>You can separate paragraphs in two ways, here are the 2 options: Text starting on next line.</p> <p>Gap before next text block.</p> <p>You can create a gap between each paragraph by just creating a newline in the file. To continue the text without a gap but on the next line you add 2 spaces to the end of the previous line.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#codeblocks","title":"Codeblocks","text":"<p>Codeblocks are unsurprisingly used to indicate code, they have different styling and can be copied as well as highlighted depending on the syntax.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#inline-codeblocks","title":"Inline Codeblocks","text":"<p>These are the most simple. They are just a small section of a paragraph or line. These do not have options such as a copy button or annotations.</p> <p>Example: <code>Inline codeblock here</code> Normal text here</p> <p>You can write these inline codeblocks by adding a backtick: <code>`</code>, at the start and end of the codeblock.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#multiline-codeblocks","title":"Multiline Codeblocks","text":"<p>These codeblocks are slightly more complex but include features such as a copy button and line highlighting.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#basic-codeblock","title":"Basic codeblock","text":"<p>A basic codeblock can be written using 3 backticks: <code>```</code> at the start and end.</p> Example basic codeblock syntax<pre><code>```\ndef add1(num):\n  return num += 1\n```\n</code></pre> <p>Looks like this:</p> <pre><code>def add1(num):\n  return num += 1\n</code></pre> <p>You will notice a copy button at the top right of each codeblock.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>You can add syntax highlighting for almost every language. Here is the same python function with some highlighting:</p> <pre><code>def add1(num):\n  return num += 1\n</code></pre> <p>To do this you add a language shortcode right after the backtick(s). Like this:</p> <pre><code>```py\nHighlighted as python\n```\n</code></pre>"},{"location":"contributing/hass-agent-documentation/editing-files/#line-numbers-titles-and-highlighting-lines","title":"Line numbers, titles and highlighting lines","text":""},{"location":"contributing/hass-agent-documentation/editing-files/#line-numbers","title":"Line Numbers","text":"<p>You can add line numbers with <code>linenums=\"1\"</code> this will make the first line 1. You can set the first line to any number; For example, to start at 54(1): use <code>linenums=\"54\"</code>.</p> <ol> <li>This is just an example number, any number can be used.</li> </ol>"},{"location":"contributing/hass-agent-documentation/editing-files/#highlighting-lines","title":"Highlighting Lines","text":"<p>You can also highlight any of the lines using <code>hl_lines=\"2 3\"</code>; this will highlight lines 2 and 3, if you want to use a range just add a dash: <code>hl_lines=\"3-5\"</code></p>"},{"location":"contributing/hass-agent-documentation/editing-files/#adding-titles","title":"Adding Titles","text":"<p>Titles can be added with <code>title=\"This is a title\"</code></p> With line numbers, a title and line 2 highlighted<pre><code>def add1(num):\n  return num += 1\n</code></pre>"},{"location":"contributing/hass-agent-documentation/editing-files/#annotations-footnotes-and-admonitions","title":"Annotations, Footnotes and Admonitions","text":"<p>The documentation also has annotations and admonitions which are not a normal markdown feature.</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#annotations","title":"Annotations","text":""},{"location":"contributing/hass-agent-documentation/editing-files/#annotations-overview","title":"Annotations Overview","text":"<p>Annotations are small plus buttons that can be placed almost anywhere in the documentation that when clicked show more information.(1)</p> <ol> <li>This is an example annotation</li> </ol>"},{"location":"contributing/hass-agent-documentation/editing-files/#syntax","title":"Syntax","text":"<p>You can add these anywhere with a number inside of 2 parentheses, example: <code>(1)</code>. And then at the end of that block you add <code>{.annotate}</code> followed by a numbered list corresponding to the annotation number. Here is an example with comments to help you understand:</p> <pre><code>Example bit of text with annotation here: (1)\n\nAnother annotation here: (2)\n{.annotate}\n\n1. This is the first annotation - corresponds to `(1)`\n2. Another annotation - corresponds to `(2)`\n</code></pre> <p>Note</p> <p>Note the <code>{.annotate} after the codeblock, it is required for the list item to not be rendered and instead link to the</code>(1)`. Also note the numbers used, they must matchup for the annotations to work correctly.</p> <p>More information can be found here</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#footnotes","title":"Footnotes","text":"<p>Footnotes can be added anywhere in a page. They work similarly to the annotations and look like this:</p> <p>There is a footnote at the end of this sentence.<sup>1</sup></p>"},{"location":"contributing/hass-agent-documentation/editing-files/#syntax_1","title":"Syntax","text":"<p>You indicate footnotes anywhere in a page with <code>[^1]</code> with the number working the same as the annotations. Just make sure the number corresponds between the location in the page and at the bottom.</p> <p>At the very bottom of the page you write the same identifier, so in this case <code>[^1]</code> followed by a <code>:</code> like this:</p> <pre><code>Text with footnote here: [^1]\n\n[^1]: This is an example footnote text\n</code></pre> <p>More information can be found here</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#admonitions","title":"Admonitions","text":"<p>Admonitions are the \"notes\" or \"warnings\" you will have seen, they are in a colored box and stand out. Here is an example:</p> Example admonition <p>Admonition text</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#syntax_2","title":"Syntax","text":"<p>They can be written like this:</p> <pre><code>!!! note\n\n    This is a note admonition\n</code></pre> <p>Titles can be included by adding text in <code>\"\"</code> after the admonition type:</p> <pre><code>!!! note \"Note admonition example title\"\n</code></pre>"},{"location":"contributing/hass-agent-documentation/editing-files/#collapsible-admonitions","title":"Collapsible admonitions","text":"<p>You can create either static admonitions or collapsible ones. Collapsible ones are indicated with a <code>???</code> instead of <code>!!!</code>, if you would like the collapsible one to be open by default then use <code>???+</code>.</p> <p>More informaition including the list of admonition types can be found here</p>"},{"location":"contributing/hass-agent-documentation/editing-files/#diagrams","title":"Diagrams","text":"<p>The documentation has multiple diagrams spread across the pages that can be edited from the markdown files. All of these are based on mermaidjs.</p> <p>The documentation basically exlusively uses flowcharts for better styling but all mermaid types are technically supported. You can find docs on the flowcharts here, and more information about our implementation of mermaidjs here.</p> <ol> <li> <p>The example footnote, you can use the enter button here to return to where you were:\u00a0\u21a9</p> </li> </ol>"},{"location":"contributing/hass-agent-documentation/setup/","title":"Setting up a local environment to develop the documentation","text":"<p>Note</p> <p>You should understand the github structure before attempting this, more info can be found here.</p>"},{"location":"contributing/hass-agent-documentation/setup/#forking-the-repo","title":"Forking the repo","text":"<p>To start off you will need to create your own fork of the documentation repo to track your changes. To do this go ahead and navigate to this repo. You will need to create a fork of this repo, a tutorial for this can be found here.</p>"},{"location":"contributing/hass-agent-documentation/setup/#forking-all-branches","title":"Forking all branches","text":"<p>Warning</p> <p>Make sure you do this step correctly or you will have problems later on.</p> <p>After clicking fork you will be presented with this screen. You can customise the repo name and description however you must make sure to de-select \"Copy the <code>main</code> branch only\". You need both the <code>main</code> and <code>beta</code> branches to contribute.</p> <p></p>"},{"location":"contributing/hass-agent-documentation/setup/#disabling-github-actions","title":"Disabling github actions","text":"<p>You will want to disable github actions so that nothing goes wrong. You can do that in the settings menu like this:</p> <p>Settings --&gt; Actions / General --&gt; Disable actions --&gt; save</p>"},{"location":"contributing/hass-agent-documentation/setup/#deleting-gh-pages-branch","title":"Deleting <code>gh-pages</code> branch","text":"<p>You wil not need the <code>gh-pages</code> branch so you can delete it like this.</p> <p>Select the current branch --&gt; View all branches --&gt; Select the delete icon next to the <code>gh-pages</code> branch</p>"},{"location":"contributing/hass-agent-documentation/setup/#setting-up-the-local-branches","title":"Setting up the local branches","text":"<p>Now you will want to navigate to a directory on your pc for HASS.Agent, I will be using <code>HASS.Agent</code></p> <p>Now go ahead and create at least one new folder named <code>hass-agent-docs-beta</code>.</p>"},{"location":"contributing/hass-agent-documentation/setup/#clone-the-branches-to-each-folder","title":"Clone the branches to each folder","text":"<p>Open a command prompt in the <code>HASS.agent</code> directory and clone the <code>beta</code> branch of your forked repo into the <code>hass-agent-docs-beta</code> folder. You can use the <code>-b beta</code> flag for this.</p>"},{"location":"contributing/hass-agent-documentation/setup/#setting-up-local-environment","title":"Setting up local environment","text":"Docker Required <p>Docker is required to contribute to the documentation, you can get it here. You will also need the docker engine to be running whenever you want to edit the documentation.</p>"},{"location":"contributing/hass-agent-documentation/setup/#setup-docker","title":"Setup Docker","text":"<p>To setup the local docker environment all you need to do is run the following command:</p> <pre><code>docker-compose up\n</code></pre> <p>This will build and setup the local docker and activate the live reload editing page. You can view this page at localhost:8000.</p> <p>As long as this page successfully shows the documentation you can continue on to the development lifecycle and editing pages.</p> Hotfixes on the main branch <p>If you want to put hotfixes onto the main branch you can repeat the steps from here.</p>"},{"location":"contributing/hass-agent-documentation/special-files/","title":"Special Files","text":""},{"location":"contributing/hass-agent-documentation/special-files/#theme-overrides","title":"Theme Overrides","text":"<p>Theme overrides are files that override the theme and style of the documentation. The homepage is the biggest one.</p>"},{"location":"contributing/hass-agent-documentation/special-files/#homepage","title":"Homepage","text":"<p>You will notice the homepage is so different compared to the rest of the documentation, this is because it is a theme override that is overriding the markdown page.</p>"},{"location":"contributing/hass-agent-documentation/special-files/#the-markdown-file","title":"The markdown file","text":"<p>The base index.md file that is the homepage just contains the following code:</p> <pre><code>---\ntitle: Home\ntemplate: home.html\n---\n</code></pre> <p>This sets the title to be Home and tells the theme that I want to use the theme override <code>home.html</code> as the \"template\". This renders the file <code>home.html</code> as the homepage.</p>"},{"location":"contributing/hass-agent-documentation/special-files/#the-homehtml-file","title":"The <code>home.html</code> file","text":"<p>The <code>home.html</code> file is in the <code>overrides/</code> folder and contains a few keywords to tell the docs to render the header tabs and footer. After that the whole file is just <code>&lt;style&gt;</code> blocks for css, and other html blocks.</p>"},{"location":"contributing/hass-agent-documentation/special-files/#editing-the-homepage","title":"Editing the homepage","text":"<p>Feel free to edit the html if you know what you are doing, but note that homepage and all special file changes will be heavily scrutinised by the dev team to make sure there are no breaking changes, i.e it may take a long time for your changes to be approved.</p> <p>I don't know how to edit html/css but have found issues/modifications</p> <p>You can either submit a github issue or use discord. For more info on creating a github issue checkout Reporting Issues. If you want to use discord you can either dm @drr0x the lead documentation dev or post a message in the dev channel on this discord server.</p>"},{"location":"contributing/hass-agent-documentation/special-files/#list-of-current-overrides","title":"List of current overrides","text":"<ul> <li>Homepage</li> <li>Top notification bar</li> <li>Outdated version alert bar</li> <li>404 Page</li> </ul>"},{"location":"contributing/hass-agent-integration/","title":"Developing the HASS.Agent integration","text":""},{"location":"contributing/translating/","title":"Translating HASS.Agent","text":"<p>Translating is complicated atm.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#introduction","title":"Introduction","text":"<p>This page explains the basics behind HASS.Agent: What it is and what it can do. We'll be using the abbreviation HA for Home Assistant, so when HA is mentioned, it refers to your Home Assistant instance.</p> Home Assistant Glossary <p>You can use Home Assistant's glossary to look up words you don't know yet.</p> Getting started Video <p>EverythingSmartHome's youtube video is a great guide to get you started: Control Your Windows PC With Home Assistant!. Note that it is based on an older version(v1), so for instance the mentioned missing 'actionable notifications' are already implemented.</p>"},{"location":"getting-started/#overview","title":"Overview","text":"<p>In general, HASS.Agent is a client (companion) application for Home Assistant. It's being developed for Windows, with Windows 10 and 11 (fully up-to-date) in mind - previous versions or unpatched systems may work.</p> <p>The communication goes both ways: HASS.Agent can send data to HA, and HA can send data to HASS.Agent. In other words: you can use HASS.Agent to control and inform HA, and you can use HA to control HASS.Agent.</p>"},{"location":"getting-started/#main-functionalities","title":"Main Functionalities","text":"Function Description Usage Examples Commands Control your PC from HA. Lock your session, open notepad, or emulate a keypress. Sensors Send PC telemetry data to HA. CPU load, webcam status, or user activity. Quick Actions Control and view any HA entity from your taskbar or a hotkey. Turn on lights or open the garage door. Notifications Send notifications from HA to Windows, includes actionable buttons and images. Display an image of who's at the front door. Media Player Control your PC from HA as if it were a media player. See what Spotify song's playing, or send a text-to-speech message. WebView Show any webpage or URL, without launching a browser. Show a doorbell camera stream when the doorbell is pressed. Satellite Service Process commands and sensors even when no user is logged in. Shutdown your PC at any time, locked or not. <p>We'll go into each function in depth a bit later on. For now lets get HASS.Agent installed and connected.</p>"},{"location":"getting-started/initial-setup/","title":"Initial Configuration and First Run","text":"<p>Once you've installed HASS.Agent onto your computer you are ready to run HASS.Agent.</p>"},{"location":"getting-started/initial-setup/#onboarding-and-first-run","title":"Onboarding and First Run","text":"<p>When you open HASS.Agent for the first time it will guide you through the onboarding process to get everything setup and working. After the onboarding process is complete you can move onto the setup in Home Assistant.</p>"},{"location":"getting-started/initial-setup/#api","title":"API","text":"<p>During onboarding, on page 3, you'll be prompted for an API token and your Home Assistant URL. Here's how to obtain an API key from your Home Assistant installation:</p> <ol> <li>Open the profile page.</li> <li>Scroll down to Long-lived Access Tokens.</li> <li>Click \"Create Token\".</li> <li>Copy the token using the button and paste it into the HASS.Agent onboarding page.</li> </ol>"},{"location":"getting-started/initial-setup/#mqtt","title":"MQTT","text":"<p>For the MQTT configuration, provide your MQTT broker's username, password, URI, and port.</p> <p>Here are the steps for getting the MQTT broker if you are using the mosquitto add-on in homeassistant. For other mqtt brokers you will need to checkout their own guides.</p> <ol> <li>Username and Password This depends on how you have setup the Mosquitto Add-on, but assuming you have done it in the recommended way you will have created a separate Home Assistant user for the MQTT broker. If that's the case go ahead and use it's username and password for this section. If you haven't yet setup authentication for the Home Assistant Mosquitto add-on then checkout this video.</li> <li>IP and Port This will be the IP/Hostname of your Home Assistant server and the port <code>1883</code>. So for most people use: <code>http://homeassistant.local</code> with port <code>1883</code>.</li> </ol> <p>Discovery Prefix</p> <p>The discovery prefix is an advanced feature intended for professionals. It does not identify your PC but is used by Home Assistant to locate devices. Unless you are experienced, leave it as is.</p>"},{"location":"getting-started/initial-setup/#initial-setup-in-home-assistant","title":"Initial Setup in Home Assistant","text":"<p>After running the onboarding for HASS.Agent and installing the integration you can move on to connecting your computer to Home Assistant.</p>"},{"location":"getting-started/initial-setup/#checklist","title":"Checklist","text":"<ul> <li> HASS.Agent has been installed and the onboarding has been completed.</li> <li> The HASS.Agent HACS integration has been installed.</li> </ul>"},{"location":"getting-started/initial-setup/#configure-your-computer","title":"Configure your computer","text":"<p>If you navigate to your integrations dashboard you should see your HASS.Agent PC auto-discovered and pop-up.</p> <p></p> <p>If not you can checkout the troubleshooting steps.</p>"},{"location":"getting-started/initial-setup/#finish-setup","title":"Finish Setup","text":"<p>The first time Home Assistant discovers your PC it will pop-up asking you to select the room the PC is located in. After selecting the room you are ready to move on to the next step.</p>"},{"location":"getting-started/initial-setup/#setup-hassagent","title":"Setup HASS.Agent","text":"<p>Now you have finished installing and configuring HASS.Agent you are ready to set it up how you want to use it. You can checkout these getting started guides for more:</p> <ul> <li> Quick Actions \u2013 Interact with homeassistant entities and scripts from your taskbar or a hotkey!</li> <li> Sensors \u2013 Send data from your computer to homeassistant to create automations!</li> <li> Commands \u2013 Create commands homeassistant can run to do things on your computer!</li> <li> Notifications \u2013 Send notifications from homeassistant, including actions and images!</li> <li> Other Features \u2013 For a guide on all the features and config options in HASS.Agent.</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>HASS.Agent consists of two parts: the client/Windows app and the Home Assistant integration. You will need to install and configure both of these to use most of HASS.Agent's features.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Home Assistant: Ensure that your Home Assistant version is newer than <code>2023.6.0</code>. If you need help with Home Assistant, refer to the official documentation.</li> <li>MQTT: Set up an MQTT broker and install/configure the MQTT add-on in Home Assistant. A simple guide for MQTT setup can be found here.</li> <li>Windows 10/11: HASS.Agent supports Windows 10 and 11. Older versions may work, but functionality is not guaranteed.</li> </ul> I don't want to install or use MQTT, can I still use HASS.Agent? <p>You don't have to have MQTT to use HASS.Agent; however, most features rely on it for bidirectional communication. Without MQTT, only Quick Actions will work.</p>"},{"location":"getting-started/installation/#installing-hassagent","title":"Installing HASS.Agent","text":"<p>To get started with installing HASS.Agent, follow these steps:</p> <ol> <li>Download the latest installer from here.</li> <li>Open the installer and follow the on-screen instructions.</li> <li>Optional: The installer allows you to copy the configuration from the previously installed version of HASS.Agent (Pre v2).</li> </ol>"},{"location":"getting-started/installation/#installing-the-home-assistant-integration","title":"Installing the Home Assistant Integration","text":"<p>After installing HASS.Agent on your PC, follow these steps to install the Home Assistant integration:</p> <ol> <li>Ensure you have HACS installed. If not, follow the installation guide here.</li> <li>Click the button below to install the HASS.Agent integration.</li> </ol> <p></p> I don't want to install HACS, can I still install the HASS.Agent integration? <p>Yes, it is possible to install the integration without HACS; however, it is more difficult. Find more information here.</p>"},{"location":"getting-started/installation/#finishing-up","title":"Finishing up","text":"<p>After installing both the integration and client/Windows app, proceed to the initial setup and configuration.</p> Info <p>After installation, you can delete the <code>HASS.Agent.Installer.exe</code>.</p>"},{"location":"getting-started/other-installs/","title":"Other HASS.Agent Installation Methods","text":""},{"location":"getting-started/other-installs/#installing-the-integration-without-hacs","title":"Installing the integration without HACS","text":"<p>If you don't want to use HACS for installation of the HASS.Agent integration you can do it manually.</p> <p>Warning</p> <p>If you choose to install the integration without HACS you will not automatically receive updates. You will have to follow these installation steps again for each update.</p> <ol> <li>Download and extract the files in the Integration Repo.</li> <li>Copy the <code>custom_components/</code> directory into your Home Assistant's <code>config/</code> directory.</li> </ol> <p>Done! Thats it, but remember there will be no updates, so you need to re-download the file and copy again for each update of the integration. Make sure to restart Home Assistant to apply the changes.</p>"}]}