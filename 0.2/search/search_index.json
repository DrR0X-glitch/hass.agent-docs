{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"introduction/","title":"Introduction","text":"<p>This page explains the basics behind HASS.Agent: What it is and what it can do. We'll be using the abbreviation HA for Home Assistant, so when HA is mentioned, it refers to your Home Assistant instance.</p> <p>Tip: you can use Home Assistant's glossary to look up words you don't know yet.</p> <p>Tip: EverythingSmartHome's youtube video is a great guide to get you started: Control Your Windows PC With Home Assistant!. Note that it is based on an older version, so for instance the mentioned missing 'actionable notifications' are already implemented.</p>"},{"location":"introduction/#overview","title":"Overview","text":"<p>In general, HASS.Agent is a client (companion) application for Home Assistant. It's being developed for Windows, with Windows 10 and 11 (fully up-to-date) in mind - previous versions or unpatched systems may work.</p> <p>The communication goes both ways: HASS.Agent can send data to HA, and HA can send data to HASS.Agent. In other words: you can use HASS.Agent to control and inform HA, and you can use HA to control HASS.Agent.</p> <p>Globally, these are the functionalities:</p> Function Description Commands Control your PC from HA.Example: lock your session, open notepad or emulate a keypress. Sensors Send PC telemetry to HA.Example: cpu load, is your webcam active or is the current user active. Quick Actions Trigger any HA entity.Example: turn on your lights or open the garage door. Notifications Receive a notification from HA, and show it as a Windows notification.Example: image of who's at the front door. Media Player Control your PC from HA as if it were a mediaplayer.Example: see what Spotify song's playing, or send a text-to-speech message. WebView Show any webpage, without launching a browser.Example: show a HA dashboard when rightclicking HASS.Agent's tray icon. Satellite Service Process commands and sensors even when no user's logged in.Example: shutdown your PC at any time, locked or not. <p>Let's go over every function for a bit more in-depth.</p>"},{"location":"introduction/#commands","title":"Commands","text":"<p>Commands have their own introduction page: Command Basics.</p> <p>If you want to go a bit more advanced, have a look at the actions page: Actions Usage and Examples. Actions allow you to send variables alongside your command, so you can for example have you HA automation decide what URL you want to show.</p>"},{"location":"introduction/#sensors","title":"Sensors","text":"<p>Sensors allow you to send all sorts of telemetry from your PC to HA. A few common examples are what's the current cpu load, are you using your webcam/mic, are you logged in or is your session locked - but there are over 30 of them, so there's much more to explore.</p> <p>When you create a new sensor, it shows up in HA as an entity:</p> <p></p> <p>To find the entities, go to your HA instance, and press <code>c</code>. This will show the search bar. Now type <code>devices</code> and press enter. In the <code>Search devices</code> bar that's shown on top, type the name of your HASS.Agent instance:</p> <p></p> <p>Tip: you can always find (and change) the name of your HASS.Agent instance by clicking on the <code>configuration</code> button in the main window.</p> <p>If your HASS.Agent is properly configured, your pc will now show as a result. You can easily verify it's a HASS.Agent instance by confirming it says <code>LAB02 Research</code> under the <code>Manufacturer</code> column.</p> <p>Click on your pc to see what commands and sensors are currently configured.</p>"},{"location":"introduction/#multi-value-sensors","title":"Multi-Value Sensors","text":"<p>Some sensors have multiple relevant data points. For instance, if you add a storage sensor, statistics for all your disks will get sent. You can easily see which sensors are multi-value through this column:</p> <p></p> <p>And here you can see the multiple sensors being added (they all start with the name you gave it):</p> <p></p>"},{"location":"introduction/#quick-actions","title":"Quick Actions","text":"<p>One of the reasons for developing HASS.Agent was the ability to easily trigger HA entities. For instance, if I want to turn on a light, I don't want to open an app or browser and go to the right dashboard. Nor do I always want to say it out load to a Google Home-device of sorts. To make that possible, HASS.Agent has Quick Actions.</p> <p>You configure them once by selected the desired entity and the desired state:</p> <p></p> <p>And from that on you can either execute them by their individual hotkey, or pull up the list of quick actions by their global hotkey:</p> <p></p>"},{"location":"introduction/#notifications","title":"Notifications","text":"<p>Another reason for HASS.Agent's creation was the ability to receive notifications from HA. For instance: someone presses the doorbell, and you get a notification with a picture of the guest on your PC. Because I'm usually listening to music with earpods in while working, this would be a good way to get my attention.</p> <p>Use the integration installation to help get you started, or the notifications example page for inspiration.</p>"},{"location":"introduction/#media-player","title":"Media Player","text":"<p>The mediaplayer allows you to use your HASS.Agent as a mediaplayer device: see and control what's playing (regardless of what application you're actually using to play media), and send text-to-speech notifications.</p> <p>Use the integration installation to help get you started or the mediaplayer example page for inspiration.</p>"},{"location":"introduction/#webview","title":"WebView","text":"<p>The webview capability is not something you can see directly like commands and sensors, but more of an underlying technique. It's basically a way to show a website, without having to launch a browser.</p> <p>There are currently two implementations for the webview component.</p>"},{"location":"introduction/#webview-command","title":"WebView Command","text":"<p>This command allows you to open any webpage with some extra configuration, like where on your monitor, and what size. You can use this to launch a predefined URL (like a HA dashboard) or even dynamically when using an Action.</p> <p>Example configuration:</p> <p></p>"},{"location":"introduction/#tray-icon","title":"Tray Icon","text":"<p>By default, when you right-click the HASS.Agent tray icon (near your clock on the taskbar) you'll get a simple menu. However, you can also configure (through <code>Configuration</code> -&gt; <code>Tray Icon</code>) to show a webview. This is really neat if you want to quickly show a dashboard with a bit more options than the quick actions:</p> <p></p>"},{"location":"introduction/#satellite-service","title":"Satellite Service","text":"<p>HASS.Agent is a very easy (at least I think so) tool to configure your sensors and commands. There is however a downside: if you're not logged into Windows, it won't load, so your sensors and commands won't run. Another issue is security-wise: HASS.Agent runs with the least possible privileges, but that means you can't perform commands that would require elevation.</p> <p>To allow for all that, the satellite service was added. This is a Windows service which runs in the background, and allows you to run sensors and commands without having to be logged in - and with elevated privileges (be careful though when running potential hazardous commands).</p> <p>You can start tinkering by clicking the <code>satellite service</code> button in the main window:</p> <p></p> <p>The satellite service copies HASS.Agent's MQTT settings, except the <code>client id</code> (which is required to be unique). If you want to set another user, you can do so on the <code>MQTT</code> tab. Otherwise, jump straight into adding commands and sensors! HASS.Agent will warn you when a certain command or sensor can't be run via the satellite service.</p> <p>Remember to click the <code>send and activate</code> button after adding or modifying your entities!</p> <p>Tip: if the MQTT status remains <code>disconnected</code>, restart the service (go to <code>Configuration</code> in the main window, then tab <code>Satellite Service</code> and click <code>stop service</code> and <code>start service</code> respectively) and check again.</p> <p>Note: you can't do anything that would require an UI in the satellite service - for instance, you can't open a browser. It wouldn't show.</p> <p>If you need more info or want to talk, please feel free to reach out:</p> <ul> <li> <p>Github Tickets: Report bugs, feature requests, ideas, tips, ..</p> </li> <li> <p>Discord: Get help with setting up and using HASS.Agent, report bugs or just talk about whatever.</p> </li> <li> <p>Home Assistant forum: Bit of everything, with the addition that other HA users can help as well.</p> </li> </ul>"},{"location":"contributing/","title":"Developing / Contributing","text":"<p>There are many ways you can contribute to help make HASS.Agent better for everyone.</p>"},{"location":"contributing/#lowno-code-ways-to-help-out","title":"Low/No-code ways to help out","text":"<p>There are lots of ways to help out with HASS.Agent, even if you can't code. Here are some of the ways you can contribute:</p> <ul> <li>Submitting Github issues whenever you find an error or problem with any aspect of HASS.Agent. Use this guide for more info.</li> <li>Helping other users of HASS.Agent with setup and usage. You can help other users in our discord server here.</li> <li>Adding and updating everything found here in the HASS.Agent Documentation. More info can be found below.</li> </ul>"},{"location":"contributing/#programming-developing","title":"Programming / Developing","text":"<p>If you are a programmer and want to help out check out these sections:</p> <ul> <li>C#</li> <li>Python</li> </ul>"},{"location":"contributing/#c-and-windows-apps","title":"C# and windows apps","text":"<p>If you have experience in C# and creating native windows applications, we could use your help with creating the HASS.Agent client and Satellite service. If you would like to learn more, check out the dedicated section here.</p>"},{"location":"contributing/#python-and-homeassistant-integrations","title":"Python and Homeassistant integrations","text":"<p>If you have experience in python and creating homeassistant integrations, you can help us develop the HACS integration that connects to HASS.Agent. If you would like to learn more, check out the dedicated section here.</p>"},{"location":"contributing/#helping-out-with-the-documentation","title":"Helping out with the Documentation","text":"<p>You don't need to be a programmer or developer to help out with the documentation. 99% of the documentation is written in markdown, which is a very easy and widely used markup language to add formatting to plain text. If you would like to learn more about markdown click here.</p> <p>However the project does require that you understand the basics of git version control and using an IDE(VSCode is highly recommended). But there is still another way you can help out which is submitting simple github issues that explain the problem with the documentation and one of our developers will implement the changes for you. Check out the guide to reporting issues here.</p>"},{"location":"contributing/#editing-the-documentation-yourself","title":"Editing the documentation yourself","text":"<p>If you understand the basics of git and can use an IDE(VSCode) then you can check out this section about contributing to the documentation.</p>"},{"location":"contributing/reporting-issues/","title":"Reporting Issues","text":""},{"location":"contributing/reporting-issues/#direct-urls","title":"Direct URL's","text":""},{"location":"contributing/developer-resources/","title":"Extra Resources for Developers","text":"<p>This section contains extra and shared resources for developers. You will find information in here that will be used across parts of HASS.Agent.</p>"},{"location":"contributing/developer-resources/#versioning","title":"Versioning","text":"<p>The HASS.Agent client uses a version system that is shared with the documentation, you can read more on this here</p>"},{"location":"contributing/developer-resources/version-system/","title":"HASS.Agent's version system","text":""},{"location":"contributing/developer-resources/version-system/#warning","title":"WARNING!","text":""},{"location":"contributing/developer-resources/version-system/#you-must-read-and-understand-this-entire-page-if-you-want-to-be-able-to-develop-any-part-of-hassagent","title":"You must read and understand this entire page if you want to be able to develop any part of HASS.Agent","text":""},{"location":"contributing/developer-resources/version-system/#overview","title":"Overview","text":""},{"location":"contributing/developer-resources/version-system/#hassagent-uses-two-main-version-systems","title":"HASS.Agent uses TWO main version systems","text":""},{"location":"contributing/developer-resources/version-system/#client","title":"Client","text":"<ul> <li>Client</li> <li>Documentation</li> </ul> <p>The client and documentation share a version system to make it easy for users to find documentation for any version.</p>"},{"location":"contributing/developer-resources/version-system/#integration","title":"Integration","text":"<p>The integration has its own version system similar to HASS's own system.</p>"},{"location":"contributing/developer-resources/version-system/#clientdocumentation-versioning","title":"Client/Documentation Versioning","text":"<p>HASS.Agent's client and documentation use a semantic-style version system, however some parts are specific to HASS.Agent, so read on.</p>"},{"location":"contributing/developer-resources/version-system/#stable-release-versions","title":"Stable release versions","text":"<p>All release version numbers of HASS.Agent look like this: <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code> An example of a released version number: <code>1.5.4</code></p>"},{"location":"contributing/developer-resources/version-system/#major","title":"Major","text":"<p>The major version number is rarely changed, if you are reading this documentation you will most likely never have to change this. But for your information it is only changed when breaking API updates are added. So version <code>2.*.*</code> client, is not backwards compatible with version <code>2.*.*</code>. This also means that all versions of <code>1.*.*</code> will be backwards compatible, there may be small warnings or missing features but all previous API calls and features work as intended. Basically this version number only needs to be incremented when no backwards compatability is added. This also forces the dev team to not release backwards compatible updates very often.</p> Example <ul> <li>Version <code>1.4.2</code> of the client does have backwards compatibility with version <code>1.8.3</code></li> <li>Version <code>2.3.2</code> of the lient does not have backwards compatibility with version <code>1.8.3</code></li> </ul>"},{"location":"contributing/developer-resources/version-system/#minor","title":"Minor","text":"<p>The minor version number is to be incremented whenever new features are added in a backwards compatible way. More than one feature can be added per version number, however they all have to have backwards compatibility.</p> Example <ul> <li>Version <code>1.4.1</code> of the client will have less features than <code>1.5.0</code></li> <li>Version <code>1.6.0</code> of the client will have more features than <code>1.5.0</code></li> </ul> <p>Note that in both of these examples the versions are backwards compatible.</p>"},{"location":"contributing/developer-resources/version-system/#patch","title":"Patch","text":"<p>The patch version number is to be incremented whenever bug fixes(patches) are released in a backwards compatible way. All bug fixes are to be released in a backwards compatible way anyway, so basically everytime a patch is released, this number will be incremented. The important thing to note about the patch version number is that no new features can be added.</p> Example <ul> <li>Version <code>1.3.0</code> of the client will have more bugs than <code>1.3.1</code> of the client</li> <li>Version <code>1.5.6</code> of the client will have more patches and therefore less bugs, than <code>1.5.2</code> of the client</li> </ul> <p>No new features are added between the versions in these examples. Only bug fixes and patches are added.</p>"},{"location":"contributing/developer-resources/version-system/#beta-developmental-versions","title":"Beta developmental versions","text":"<p>During the development of a new version of the HASS.Agent client beta versions of the code will exist. These versions will be denoted like this: <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;-beta.&lt;beta-version&gt;</code> You will notice the only difference is the addition of the <code>-beta</code> flag and the fourth version number <code>&lt;beta-version&gt;</code> The first beta version of the example upcoming <code>1.5.3</code> release would look like this: <code>1.5.3-beta.0</code></p>"},{"location":"contributing/developer-resources/version-system/#beta-version","title":"Beta version","text":"<p>The beta version number is to be incremented whenever a new beta version of the code is built or released for testing.</p> Example <p>The current stable version is <code>2.5.4</code> and the dev team is working on a new feature</p> <p>The beta version during the first development update should be <code>2.6.0-beta.0</code></p> <p>Everytime a new development update is added to this feature the last number should be incremented.</p> <p>The dev team has now finished working on this feature</p> <p>The stable version for release should be <code>2.6.0</code></p> <p>The dev team has found bugs and is working on a hotfix. They have completed 2 updates to work on this hotfix</p> <p>The current beta version should be <code>2.6.1-beta.1</code> (1)</p> <p>They have now completed this hotfix</p> <p>The stable release version should be <code>2.6.1</code></p> <ol> <li>We use 1 for the <code>&lt;beta-version&gt;</code> here, because development update 1 was .0 and development update 2 was .1</li> </ol>"},{"location":"contributing/developer-resources/version-system/#other-info","title":"Other info","text":""},{"location":"contributing/developer-resources/version-system/#resetting-numbers","title":"Resetting numbers","text":"<p>Whenever a \"parent\" version number is incremented the \"children\" numbers must be rest to zero.</p> Example <ul> <li>If the current version is <code>1.5.6</code> and a new backwards compatible feature is being added the new version will be <code>1.6.0</code></li> <li>If the current version is <code>1.5.6</code> and a new backwards incompatible feature is being added the new version will be <code>2.0.0</code></li> </ul>"},{"location":"contributing/developer-resources/version-system/#documentation","title":"Documentation","text":"<p>The documentation operates on version of just <code>&lt;major&gt;.&lt;minor&gt;</code> This will still match the client because no major documentation change will happen during a patch of the HASS.Agent client.</p> <p>The other difference between this version system and the client's version system is that beta version attributes will not exist. In the documentation if the upcoming release is going to be <code>1.5.0</code> and the current beta version is <code>1.5.0-beta.3</code> then the docs will have <code>1.5</code> with the label/attribute <code>beta</code>.</p>"},{"location":"contributing/hass-agent-app/","title":"Developing the HASS.Agent Client","text":""},{"location":"contributing/hass-agent-documentation/","title":"Contributing to the HASS.Agent Documentation","text":"<p>Warning</p> <p>Make sure you understand the HASS.Agent client version system before continuing. You can find info on it here.</p>"},{"location":"contributing/hass-agent-documentation/#overview","title":"Overview","text":"<p>The HASS.Agent docs are built on MKDocs, which is a python based tool that allows you to write documentation in simple markdown. Most of the docs is written in markdown and is therefore easily editable. However submitting these edits and testing them requires a basic understanding of git and github version control.</p>"},{"location":"contributing/hass-agent-documentation/#the-documentation-versions","title":"The documentation versions","text":"<p>At the top of the documentation you will find a selector to the write of the title. This is a version selector that allows you to view different versions of the documentation. You will notice there are two special versions and the rest follow the format of <code>*.*</code>:</p> Version Description <code>beta</code> The current beta build of the documentation, used for trying new features and writing docs for upcoming features of HASS.Agent. <code>latest</code> The current latest release of HASS.Agent, this is also the default version. <code>*.*</code> Older versions of the docs, these are not editable. These are known as <code>old-versions</code> Example: <code>1.5</code>"},{"location":"contributing/hass-agent-documentation/#github-structure","title":"Github Structure","text":"<p>The repo for the documentation is linked at the top right of the documentation at all times and is also available here. Go ahead and open it in another tab to reference as you go through this section.</p>"},{"location":"contributing/hass-agent-documentation/#branches-overview","title":"Branches Overview","text":"<p>The repo contains three branches:</p> Branch Description <code>main</code> Contains the files used to maintain the <code>latest</code><sup>1</sup> version of the documentation. <code>beta</code> Contains the files developing the next release of the documentation, this is also the <code>beta</code><sup>1</sup> version of the documentation. <code>gh-pages</code> Contains the built files of the documentation, this repo is not to be touched, everything is written in HTML, CSS and JS. All the files are auto-generated during builds of the documentation."},{"location":"contributing/hass-agent-documentation/#why-two-separate-branches","title":"Why two separate branches?","text":"<p>We use two separate branches in the github as it allows us to work on new versions of the documentation while fixing issues with the current documentation. This is great for us as we can test new features online and send them to people without accidently destroying the <code>latest</code><sup>1</sup> documentation. However this does create a few guidelines that need to be followed:</p> <ul> <li>If you want your changes to be applied in all future versions of the documentation you MUST make these changes in the <code>beta</code> branch.</li> <li>Any changes made to the <code>main</code> branch will be immediately applied to the <code>latest</code><sup>1</sup> version however they will not be included in future versions of the documentation.</li> </ul> <p>If you would like to know why these restrictions exist checkout this section.</p>"},{"location":"contributing/hass-agent-documentation/#deploying-the-documentation","title":"Deploying the documentation","text":"<p>After merges occur to either the <code>beta</code> or <code>main</code> branch specific github workflows will run that wil automatically build and deploy the correct version of the documentation. Therefore you do not need to ever do any sort of building or deploying.</p>"},{"location":"contributing/hass-agent-documentation/#releasing-the-beta-version","title":"Releasing the <code>beta</code> version","text":"<p>When it comes time to release the <code>beta</code><sup>1</sup> version of the documentation as the <code>latest</code><sup>1</sup> version, one of the admins of the github will manually trigger a workflow that will deploy and build the <code>beta</code> branch as the <code>latest</code><sup>1</sup> version and also deploy a copy for the <code>beta</code><sup>1</sup> version. After the deployment a merge will be triggered to merge the <code>beta</code> branch with the <code>main</code> branch. We will do our best to bring over changes from the <code>main</code> branch to the <code>beta</code> but we cannot guarantee, this is the reason for this section.</p>"},{"location":"contributing/hass-agent-documentation/#why-are-there-restrictions","title":"Why are there restrictions?","text":"<p>These restrictions exist because of the way the system is built. Here is a diagram showing an example of changes made to the homepage:</p> <pre><code>flowchart LR\n  beta&gt;Beta Branch]\n  main&gt;Main Branch]\n\n  beta-changes(Example change to homepage)\n  latest-changes(Different change to homepage)\n\n  beta-pr([Beta PR merged])\n  latest-pr([Main PR merged])\n\n\n  beta--&gt;beta-pr\n  beta-changes--&gt;|Commit changes to beta|beta-pr\n  main--&gt;latest-pr\n  latest-changes--&gt;|Commit changes to main|latest-pr\n\n  beta-pr --&gt; |Deploy beta version| beta-deployment\n  latest-pr --&gt; |Deploy latest version| latest-deployment\n\n  beta-deployment{{Beta Deployment}}\n  latest-deployment{{Latest Deployment}}</code></pre> <p>You will notice that now the homepage is different on each of these versions, specifically the homepage on the <code>main</code> branch has been added changes that are not included in the <code>beta</code> branch version. Now if we have a look at what happens when the beta version is released as latest:</p> <pre><code>flowchart LR\n  beta&gt;Beta Branch]\n  main&gt;Main Branch]\n\n  beta-deployment{{Beta Deployment}}\n  latest-deployment{{Latest Deployment}}\n\n  beta --&gt; |Deploy to latest| latest-deployment\n  beta --&gt; |Deploy copy for next beta version| beta-deployment\n\n  merge([Merge beta into main])\n\n  beta --&gt; |Overwrite main with beta| merge\n  main --&gt; |Changes overwritten by beta| merge\n\n  main --&gt; |Deploy main as it's version number| gh-pages[(Old Versions)]</code></pre> <p>When we release the <code>beta</code><sup>1</sup> version, we copy the <code>latest</code><sup>1</sup> version into the <code>old-versions</code> by changing it's name to it's version number. Then the <code>beta</code><sup>1</sup> version is deployed to <code>latest</code><sup>1</sup> and a copy is created for developing the next version. Finally the <code>beta</code> branch is merged with the <code>main</code> branch. This means that any changes added into the <code>main</code> branch will be overwritten by the <code>beta</code> branch.</p> <p>Now that you understand how the system works you can see why changes added to the <code>main</code> branch are not included in future versions of the documentation.</p> <ol> <li> <p>This corresponds to the label in the documentation version selector.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"contributing/hass-agent-documentation/setup/","title":"Setting up a local environment to develop the documentation","text":"<p>Note</p> <p>You should understand the github structure before attempting this, more info can be found here.</p>"},{"location":"contributing/hass-agent-documentation/setup/#forking-the-repo","title":"Forking the repo","text":"<p>To start off you will need to create your own fork of the documentation repo to track your changes. To do this go ahead and navigate to this repo. You will need to create a fork of this repo, a tutorial for this can be found here.</p>"},{"location":"contributing/hass-agent-documentation/setup/#forking-all-branches","title":"Forking all branches","text":"<p>Warning</p> <p>Make sure you do this step correctly or you will have problems later on.</p> <p>After clicking fork you will be presented with this screen. You can customise the repo name and description however you must make sure to de-select \"Copy the <code>main</code> branch only\". You need both the <code>main</code> and <code>beta</code> branches to contribute.</p> <p></p>"},{"location":"contributing/hass-agent-documentation/setup/#disabling-github-actions","title":"Disabling github actions","text":"<p>You will want to disable github actions so that nothing goes wrong. You can do that in the settings menu like this:</p> <p>Settings --&gt; Actions / General --&gt; Disable actions --&gt; save</p>"},{"location":"contributing/hass-agent-documentation/setup/#deleting-gh-pages-branch","title":"Deleting <code>gh-pages</code> branch","text":"<p>You wil not need the <code>gh-pages</code> branch so you can delete it like this.</p> <p>Select the current branch --&gt; View all branches --&gt; Select the delete icon next to the <code>gh-pages</code> branch</p>"},{"location":"contributing/hass-agent-documentation/setup/#setting-up-the-local-branches","title":"Setting up the local branches","text":"<p>Now you will want to navigate to a directory on your pc for HASS.Agent, I will be using <code>HASS.Agent</code></p> <p>Now go ahead and create two new folders named <code>hass-agent-docs-beta</code> and <code>hass-agent-docs-main</code>.</p>"},{"location":"contributing/hass-agent-documentation/setup/#clone-the-branches-to-each-folder","title":"Clone the branches to each folder","text":"<p>Open a command prompt in the <code>HASS.Agent</code> folder and clone your forked repo into the <code>hass-agent-docs-main</code> folder. After that clone the <code>beta</code> branch of your forked repo into the <code>hass-agent-docs-beta</code> folder. You can use the <code>-b beta</code> flag for this.</p>"},{"location":"contributing/hass-agent-documentation/setup/#setting-up-virtual-environments","title":"Setting up virtual environments","text":"<p>Now you will need to repeat the following steps in each of the folders:</p> Warning <p>Steps 2 onwards require vscode and the python extension for vscode to be installed.</p>"},{"location":"contributing/hass-agent-documentation/setup/#setup-venv-and-vscode","title":"Setup venv and vscode","text":"<ol> <li>run <code>python -m venv venv</code> to create a venv environment named venv</li> <li>run <code>code .</code> to open the folder in vscode</li> <li>Use ctrl + shift + p to open the command pallette and type in <code>select interpreter</code> and press enter. Now select the python located in <code>.\\venv\\scripts\\python.exe</code></li> <li>Use ctrl + , to open the user settings page. Now search for <code>activate environment</code> and make sure Python &gt; Terminal: Activate Environment is turned on</li> <li>Open a new terminal in vscode using ctrl + `</li> <li>Verify this terminal contains <code>(venv)</code> at the start</li> </ol> Note <p>After this setup whenever you open vscode to either of these projectsm new terminals will have the venv activated by default. However when re-opening a project vscode's terminal history does not activate the venv. So make sure to create a new terminal each time to ensure it's activated. As always you will know it's active when you see <code>(venv)</code> at the start.</p>"},{"location":"contributing/hass-agent-documentation/setup/#install-all-requirements","title":"Install all requirements","text":"<p>In both of these directories you will need to run:</p> <ul> <li><code>pip install -r requirements.txt</code></li> </ul> <p>To install all the dependencies for the documentation.</p> <p>Warning</p> <p>Make sure the venv is active before running <code>pip install</code> or you will get errors.</p>"},{"location":"contributing/hass-agent-documentation/setup/#finishing-up","title":"Finishing up","text":"<p>You will now have two separate directories setup on your machine that reflect a fork of the hass.agent docs repo. This will allow you to modify the documentation and test your edits. As well as upload these edits to github and have them reviewed and implemented into the official documentation. The final directory structure will look something like this:</p> <pre><code>.\n\u2514\u2500 HASS.Agent/\n   \u251c\u2500hass-agent-docs-beta/\n   \u2514\u2500hass-agent-docs-main/\n</code></pre>"},{"location":"contributing/hass-agent-integration/","title":"Developing the HASS.Agent integration","text":""},{"location":"contributing/translating/","title":"Translating HASS.Agent","text":""},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#introduction","title":"Introduction","text":"<p>This page explains the basics behind HASS.Agent: What it is and what it can do. We'll be using the abbreviation HA for Home Assistant, so when HA is mentioned, it refers to your Home Assistant instance.</p> <p>Tip: you can use Home Assistant's glossary to look up words you don't know yet.</p> <p>Tip: EverythingSmartHome's youtube video is a great guide to get you started: Control Your Windows PC With Home Assistant!. Note that it is based on an older version, so for instance the mentioned missing 'actionable notifications' are already implemented.</p>"},{"location":"getting-started/#overview","title":"Overview","text":"<p>In general, HASS.Agent is a client (companion) application for Home Assistant. It's being developed for Windows, with Windows 10 and 11 (fully up-to-date) in mind - previous versions or unpatched systems may work.</p> <p>The communication goes both ways: HASS.Agent can send data to HA, and HA can send data to HASS.Agent. In other words: you can use HASS.Agent to control and inform HA, and you can use HA to control HASS.Agent.</p> <p>Globally, these are the functionalities:</p> Function Description Commands Control your PC from HA.Example: lock your session, open notepad or emulate a keypress. Sensors Send PC telemetry to HA.Example: cpu load, is your webcam active or is the current user active. Quick Actions Trigger any HA entity.Example: turn on your lights or open the garage door. Notifications Receive a notification from HA, and show it as a Windows notification.Example: image of who's at the front door. Media Player Control your PC from HA as if it were a mediaplayer.Example: see what Spotify song's playing, or send a text-to-speech message. WebView Show any webpage, without launching a browser.Example: show a HA dashboard when rightclicking HASS.Agent's tray icon. Satellite Service Process commands and sensors even when no user's logged in.Example: shutdown your PC at any time, locked or not. <p>We'll go into each function in depth a bit later on. For now lets get HASS.Agent installed and connected.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Currently HASS.Agent is temporarily without access to the original REPO, however this is not permanent and will be resolved soon. For now though there are 2 main branches of HASS.Agent. There is the official one, which is older but more tested and stable. Then there is the beta version which is brand new with up-to-date features but less stable. We will go over installation instructions for both.</p> <p>Quick Install: Click here to download the official(old) build.</p>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":"<p>HASS.Agent consists of two main programs; The client and the service. The client is the interface that you will interact with to update settings and access quick actions. The Service(Satellite Service) is what allows HASS.Agent to run commands in the background. This means that the client must be installed for each user whereas the service is installed for the entire machine.</p>"},{"location":"getting-started/installation/#installers","title":"Installers","text":"<p>Installers are simple programs you download and run that will install all necessary files and take you through the full setup. Installers only work for one user. Click here for this method.</p>"},{"location":"getting-started/installation/#manual-zip-files","title":"Manual .zip files","text":"<p>You can also manually download the .zip files for both parts of HASS.Agent; the service and the client. Click here for this method.</p>"},{"location":"getting-started/installation/#special-case-installing-for-multiple-users","title":"Special Case: Installing for multiple users","text":"<p>If you want to install HASS.Agent on multiple accounts on the same PC, first install using the installer, then use the corresponding .zip package for the remaining accounts.</p> <p>Note: you only have to install HASS.Agent on those accounts, the service is once-per-machine.</p>"},{"location":"getting-started/installation/#installer-recommended","title":"Installer (recommended)","text":"<p>Note: Requires elevated privileges(Administrator) to install</p> <p>HASS.Agent can use an entry in your user account's registry to launch on login. It's disabled by default, but you'll be offered to enable this during onboarding, or you can always disable/enable using the Configuration window.</p> <p>To use notifications and/or the mediaplayer functionality, you'll need to install the HASS.Agent integration. Checkout this guide for more info.</p>"},{"location":"getting-started/installation/#official-installer-release","title":"Official Installer Release","text":"<p>Click here to download the official installer.</p>"},{"location":"getting-started/installation/#beta-installer-release","title":"Beta Installer Release","text":"<p>The current dev team has no access to the original installer so betas are using a separate more bare-bones installer.</p> <p>Click here to download the beta installer.</p>"},{"location":"getting-started/installation/#manualzip-files","title":"Manual(.zip files)","text":"<p>If you don't want to (or can't) use the installer, you can also install manually - it's not that hard.</p> <p>Make sure you have dotnet 6 desktop runtime installed, you can get that here.</p> <p>There are two zip files to download with every release; the client and the service. Get them just below.</p> <p>HASS.Agent needs to be placed in a folder with write access. The default is <code>%appdata%\\LAB02 Research\\HASS.Agent</code>, but anywhere will do.</p> <p>The Satellite Service's default folder is <code>C:\\Program Files (x86)\\LAB02 Research\\HASS.Agent Satellite Service</code>. You can place it anywhere you want, however, if that's the case you need to manually start <code>HASS.Agent.Satellite.Service.exe</code>, wait for it to start, then close it again. This way, it'll have configured a local registry setting telling HASS.Agent where it's stored.</p> <p>When both are done, you can start the configuration process by opening an elevated command prompt in HASS.Agent's directory. Then, execute the following command:</p> <p><code>HASS.Agent.exe update</code></p> <p>HASS.Agent will now launch, install and configure the service and firewall rules, then relaunch itself without elevation.</p> <p>All done!</p>"},{"location":"getting-started/installation/#official-zip-release","title":"Official .zip Release","text":"<p>Click here to download the latest HASS.Agent package.</p> <p>Click here to download the latest Satellite Service package.</p>"},{"location":"getting-started/installation/#beta-zip-release","title":"Beta .zip Release","text":"<p>Click to download the latest HASS.Agent package.</p> <p>Click to download the latest Satellite Service package.</p>"},{"location":"getting-started/installation/#build-from-scratch-official-only","title":"Build From Scratch (Official only)","text":"<p>If you want, you can also build everything yourself. You'll need to have Visual Studio 2022 installed. Also, make sure you have dotnet 6 desktop runtime installed, you can get that here.</p> <p>There are two main projects:</p> <p>HASS.Agent</p> <p>HASS.Agent Satellite Service</p> <p>Just get the source through git or GitHub's zip download, launch the solution files, make sure you set <code>x64</code> as its output type and build.</p> <p>If you want to control the entire process: both projects use <code>HASS.Agent.Shared</code>, a library which contains models and code mainly for the commands and sensors. It's added as a nuget.</p> <p>You can download its source here:</p> <p>HASS.Agent.Shared</p> <p>Just like before, make sure you set <code>x64</code> as its output type and build. Then, remove the nuget reference from both projects, add your own library and rebuild them.</p> <p>When all this is done, you can follow step 2 'manual' on this page to resume installation.</p>"}]}